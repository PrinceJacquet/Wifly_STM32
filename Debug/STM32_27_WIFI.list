
STM32_27_WIFI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003428  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000324  08003564  08003564  00013564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003888  08003888  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003888  08003888  00013888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003890  08003890  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003890  08003890  00013890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003894  08003894  00013894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003898  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000070  08003908  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08003908  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b0a  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b6e  00000000  00000000  00028ba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f0  00000000  00000000  0002a718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000608  00000000  00000000  0002ae08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e70  00000000  00000000  0002b410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008c43  00000000  00000000  00041280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008473b  00000000  00000000  00049ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ce5fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e64  00000000  00000000  000ce654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	0800354c 	.word	0x0800354c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	0800354c 	.word	0x0800354c

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b96e 	b.w	8000480 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	468e      	mov	lr, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	f040 8083 	bne.w	80002d4 <__udivmoddi4+0x118>
 80001ce:	428a      	cmp	r2, r1
 80001d0:	4617      	mov	r7, r2
 80001d2:	d947      	bls.n	8000264 <__udivmoddi4+0xa8>
 80001d4:	fab2 f382 	clz	r3, r2
 80001d8:	b14b      	cbz	r3, 80001ee <__udivmoddi4+0x32>
 80001da:	f1c3 0120 	rsb	r1, r3, #32
 80001de:	fa05 fe03 	lsl.w	lr, r5, r3
 80001e2:	fa20 f101 	lsr.w	r1, r0, r1
 80001e6:	409f      	lsls	r7, r3
 80001e8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001ec:	409c      	lsls	r4, r3
 80001ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001f2:	fbbe fcf8 	udiv	ip, lr, r8
 80001f6:	fa1f f987 	uxth.w	r9, r7
 80001fa:	fb08 e21c 	mls	r2, r8, ip, lr
 80001fe:	fb0c f009 	mul.w	r0, ip, r9
 8000202:	0c21      	lsrs	r1, r4, #16
 8000204:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000208:	4290      	cmp	r0, r2
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	18ba      	adds	r2, r7, r2
 800020e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000212:	f080 8118 	bcs.w	8000446 <__udivmoddi4+0x28a>
 8000216:	4290      	cmp	r0, r2
 8000218:	f240 8115 	bls.w	8000446 <__udivmoddi4+0x28a>
 800021c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000220:	443a      	add	r2, r7
 8000222:	1a12      	subs	r2, r2, r0
 8000224:	fbb2 f0f8 	udiv	r0, r2, r8
 8000228:	fb08 2210 	mls	r2, r8, r0, r2
 800022c:	fb00 f109 	mul.w	r1, r0, r9
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000236:	42a1      	cmp	r1, r4
 8000238:	d909      	bls.n	800024e <__udivmoddi4+0x92>
 800023a:	193c      	adds	r4, r7, r4
 800023c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000240:	f080 8103 	bcs.w	800044a <__udivmoddi4+0x28e>
 8000244:	42a1      	cmp	r1, r4
 8000246:	f240 8100 	bls.w	800044a <__udivmoddi4+0x28e>
 800024a:	3802      	subs	r0, #2
 800024c:	443c      	add	r4, r7
 800024e:	1a64      	subs	r4, r4, r1
 8000250:	2100      	movs	r1, #0
 8000252:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000256:	b11e      	cbz	r6, 8000260 <__udivmoddi4+0xa4>
 8000258:	2200      	movs	r2, #0
 800025a:	40dc      	lsrs	r4, r3
 800025c:	e9c6 4200 	strd	r4, r2, [r6]
 8000260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000264:	b902      	cbnz	r2, 8000268 <__udivmoddi4+0xac>
 8000266:	deff      	udf	#255	; 0xff
 8000268:	fab2 f382 	clz	r3, r2
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14f      	bne.n	8000310 <__udivmoddi4+0x154>
 8000270:	1a8d      	subs	r5, r1, r2
 8000272:	2101      	movs	r1, #1
 8000274:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000278:	fa1f f882 	uxth.w	r8, r2
 800027c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000280:	fb0e 551c 	mls	r5, lr, ip, r5
 8000284:	fb08 f00c 	mul.w	r0, r8, ip
 8000288:	0c22      	lsrs	r2, r4, #16
 800028a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800028e:	42a8      	cmp	r0, r5
 8000290:	d907      	bls.n	80002a2 <__udivmoddi4+0xe6>
 8000292:	197d      	adds	r5, r7, r5
 8000294:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000298:	d202      	bcs.n	80002a0 <__udivmoddi4+0xe4>
 800029a:	42a8      	cmp	r0, r5
 800029c:	f200 80e9 	bhi.w	8000472 <__udivmoddi4+0x2b6>
 80002a0:	4694      	mov	ip, r2
 80002a2:	1a2d      	subs	r5, r5, r0
 80002a4:	fbb5 f0fe 	udiv	r0, r5, lr
 80002a8:	fb0e 5510 	mls	r5, lr, r0, r5
 80002ac:	fb08 f800 	mul.w	r8, r8, r0
 80002b0:	b2a4      	uxth	r4, r4
 80002b2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b6:	45a0      	cmp	r8, r4
 80002b8:	d907      	bls.n	80002ca <__udivmoddi4+0x10e>
 80002ba:	193c      	adds	r4, r7, r4
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c0:	d202      	bcs.n	80002c8 <__udivmoddi4+0x10c>
 80002c2:	45a0      	cmp	r8, r4
 80002c4:	f200 80d9 	bhi.w	800047a <__udivmoddi4+0x2be>
 80002c8:	4610      	mov	r0, r2
 80002ca:	eba4 0408 	sub.w	r4, r4, r8
 80002ce:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002d2:	e7c0      	b.n	8000256 <__udivmoddi4+0x9a>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d908      	bls.n	80002ea <__udivmoddi4+0x12e>
 80002d8:	2e00      	cmp	r6, #0
 80002da:	f000 80b1 	beq.w	8000440 <__udivmoddi4+0x284>
 80002de:	2100      	movs	r1, #0
 80002e0:	e9c6 0500 	strd	r0, r5, [r6]
 80002e4:	4608      	mov	r0, r1
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d14b      	bne.n	800038a <__udivmoddi4+0x1ce>
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0x140>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80b9 	bhi.w	800046e <__udivmoddi4+0x2b2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb65 0303 	sbc.w	r3, r5, r3
 8000302:	2001      	movs	r0, #1
 8000304:	469e      	mov	lr, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d0aa      	beq.n	8000260 <__udivmoddi4+0xa4>
 800030a:	e9c6 4e00 	strd	r4, lr, [r6]
 800030e:	e7a7      	b.n	8000260 <__udivmoddi4+0xa4>
 8000310:	409f      	lsls	r7, r3
 8000312:	f1c3 0220 	rsb	r2, r3, #32
 8000316:	40d1      	lsrs	r1, r2
 8000318:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	fa24 f202 	lsr.w	r2, r4, r2
 800032c:	409d      	lsls	r5, r3
 800032e:	fb00 fc08 	mul.w	ip, r0, r8
 8000332:	432a      	orrs	r2, r5
 8000334:	0c15      	lsrs	r5, r2, #16
 8000336:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800033a:	45ac      	cmp	ip, r5
 800033c:	fa04 f403 	lsl.w	r4, r4, r3
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0x19a>
 8000342:	197d      	adds	r5, r7, r5
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	f080 808f 	bcs.w	800046a <__udivmoddi4+0x2ae>
 800034c:	45ac      	cmp	ip, r5
 800034e:	f240 808c 	bls.w	800046a <__udivmoddi4+0x2ae>
 8000352:	3802      	subs	r0, #2
 8000354:	443d      	add	r5, r7
 8000356:	eba5 050c 	sub.w	r5, r5, ip
 800035a:	fbb5 f1fe 	udiv	r1, r5, lr
 800035e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000362:	fb01 f908 	mul.w	r9, r1, r8
 8000366:	b295      	uxth	r5, r2
 8000368:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800036c:	45a9      	cmp	r9, r5
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x1c4>
 8000370:	197d      	adds	r5, r7, r5
 8000372:	f101 32ff 	add.w	r2, r1, #4294967295
 8000376:	d274      	bcs.n	8000462 <__udivmoddi4+0x2a6>
 8000378:	45a9      	cmp	r9, r5
 800037a:	d972      	bls.n	8000462 <__udivmoddi4+0x2a6>
 800037c:	3902      	subs	r1, #2
 800037e:	443d      	add	r5, r7
 8000380:	eba5 0509 	sub.w	r5, r5, r9
 8000384:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000388:	e778      	b.n	800027c <__udivmoddi4+0xc0>
 800038a:	f1c1 0720 	rsb	r7, r1, #32
 800038e:	408b      	lsls	r3, r1
 8000390:	fa22 fc07 	lsr.w	ip, r2, r7
 8000394:	ea4c 0c03 	orr.w	ip, ip, r3
 8000398:	fa25 f407 	lsr.w	r4, r5, r7
 800039c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a0:	fbb4 f9fe 	udiv	r9, r4, lr
 80003a4:	fa1f f88c 	uxth.w	r8, ip
 80003a8:	fb0e 4419 	mls	r4, lr, r9, r4
 80003ac:	fa20 f307 	lsr.w	r3, r0, r7
 80003b0:	fb09 fa08 	mul.w	sl, r9, r8
 80003b4:	408d      	lsls	r5, r1
 80003b6:	431d      	orrs	r5, r3
 80003b8:	0c2b      	lsrs	r3, r5, #16
 80003ba:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003be:	45a2      	cmp	sl, r4
 80003c0:	fa02 f201 	lsl.w	r2, r2, r1
 80003c4:	fa00 f301 	lsl.w	r3, r0, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x222>
 80003ca:	eb1c 0404 	adds.w	r4, ip, r4
 80003ce:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d2:	d248      	bcs.n	8000466 <__udivmoddi4+0x2aa>
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d946      	bls.n	8000466 <__udivmoddi4+0x2aa>
 80003d8:	f1a9 0902 	sub.w	r9, r9, #2
 80003dc:	4464      	add	r4, ip
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003e6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003ea:	fb00 fa08 	mul.w	sl, r0, r8
 80003ee:	b2ad      	uxth	r5, r5
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	45a2      	cmp	sl, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x24e>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 35ff 	add.w	r5, r0, #4294967295
 8000400:	d22d      	bcs.n	800045e <__udivmoddi4+0x2a2>
 8000402:	45a2      	cmp	sl, r4
 8000404:	d92b      	bls.n	800045e <__udivmoddi4+0x2a2>
 8000406:	3802      	subs	r0, #2
 8000408:	4464      	add	r4, ip
 800040a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040e:	fba0 8902 	umull	r8, r9, r0, r2
 8000412:	eba4 040a 	sub.w	r4, r4, sl
 8000416:	454c      	cmp	r4, r9
 8000418:	46c6      	mov	lr, r8
 800041a:	464d      	mov	r5, r9
 800041c:	d319      	bcc.n	8000452 <__udivmoddi4+0x296>
 800041e:	d016      	beq.n	800044e <__udivmoddi4+0x292>
 8000420:	b15e      	cbz	r6, 800043a <__udivmoddi4+0x27e>
 8000422:	ebb3 020e 	subs.w	r2, r3, lr
 8000426:	eb64 0405 	sbc.w	r4, r4, r5
 800042a:	fa04 f707 	lsl.w	r7, r4, r7
 800042e:	fa22 f301 	lsr.w	r3, r2, r1
 8000432:	431f      	orrs	r7, r3
 8000434:	40cc      	lsrs	r4, r1
 8000436:	e9c6 7400 	strd	r7, r4, [r6]
 800043a:	2100      	movs	r1, #0
 800043c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000440:	4631      	mov	r1, r6
 8000442:	4630      	mov	r0, r6
 8000444:	e70c      	b.n	8000260 <__udivmoddi4+0xa4>
 8000446:	468c      	mov	ip, r1
 8000448:	e6eb      	b.n	8000222 <__udivmoddi4+0x66>
 800044a:	4610      	mov	r0, r2
 800044c:	e6ff      	b.n	800024e <__udivmoddi4+0x92>
 800044e:	4543      	cmp	r3, r8
 8000450:	d2e6      	bcs.n	8000420 <__udivmoddi4+0x264>
 8000452:	ebb8 0e02 	subs.w	lr, r8, r2
 8000456:	eb69 050c 	sbc.w	r5, r9, ip
 800045a:	3801      	subs	r0, #1
 800045c:	e7e0      	b.n	8000420 <__udivmoddi4+0x264>
 800045e:	4628      	mov	r0, r5
 8000460:	e7d3      	b.n	800040a <__udivmoddi4+0x24e>
 8000462:	4611      	mov	r1, r2
 8000464:	e78c      	b.n	8000380 <__udivmoddi4+0x1c4>
 8000466:	4681      	mov	r9, r0
 8000468:	e7b9      	b.n	80003de <__udivmoddi4+0x222>
 800046a:	4608      	mov	r0, r1
 800046c:	e773      	b.n	8000356 <__udivmoddi4+0x19a>
 800046e:	4608      	mov	r0, r1
 8000470:	e749      	b.n	8000306 <__udivmoddi4+0x14a>
 8000472:	f1ac 0c02 	sub.w	ip, ip, #2
 8000476:	443d      	add	r5, r7
 8000478:	e713      	b.n	80002a2 <__udivmoddi4+0xe6>
 800047a:	3802      	subs	r0, #2
 800047c:	443c      	add	r4, r7
 800047e:	e724      	b.n	80002ca <__udivmoddi4+0x10e>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b08a      	sub	sp, #40	; 0x28
 8000488:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048a:	f107 0314 	add.w	r3, r7, #20
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
 8000496:	60da      	str	r2, [r3, #12]
 8000498:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800049a:	4b2a      	ldr	r3, [pc, #168]	; (8000544 <MX_GPIO_Init+0xc0>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	4a29      	ldr	r2, [pc, #164]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004a0:	f043 0304 	orr.w	r3, r3, #4
 80004a4:	61d3      	str	r3, [r2, #28]
 80004a6:	4b27      	ldr	r3, [pc, #156]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	f003 0304 	and.w	r3, r3, #4
 80004ae:	613b      	str	r3, [r7, #16]
 80004b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004b2:	4b24      	ldr	r3, [pc, #144]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	4a23      	ldr	r2, [pc, #140]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004b8:	f043 0320 	orr.w	r3, r3, #32
 80004bc:	61d3      	str	r3, [r2, #28]
 80004be:	4b21      	ldr	r3, [pc, #132]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004c0:	69db      	ldr	r3, [r3, #28]
 80004c2:	f003 0320 	and.w	r3, r3, #32
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ca:	4b1e      	ldr	r3, [pc, #120]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004cc:	69db      	ldr	r3, [r3, #28]
 80004ce:	4a1d      	ldr	r2, [pc, #116]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	61d3      	str	r3, [r2, #28]
 80004d6:	4b1b      	ldr	r3, [pc, #108]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	60bb      	str	r3, [r7, #8]
 80004e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e2:	4b18      	ldr	r3, [pc, #96]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	4a17      	ldr	r2, [pc, #92]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004e8:	f043 0302 	orr.w	r3, r3, #2
 80004ec:	61d3      	str	r3, [r2, #28]
 80004ee:	4b15      	ldr	r3, [pc, #84]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004f0:	69db      	ldr	r3, [r3, #28]
 80004f2:	f003 0302 	and.w	r3, r3, #2
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2120      	movs	r1, #32
 80004fe:	4812      	ldr	r0, [pc, #72]	; (8000548 <MX_GPIO_Init+0xc4>)
 8000500:	f001 f80c 	bl	800151c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000504:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800050a:	4b10      	ldr	r3, [pc, #64]	; (800054c <MX_GPIO_Init+0xc8>)
 800050c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050e:	2300      	movs	r3, #0
 8000510:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000512:	f107 0314 	add.w	r3, r7, #20
 8000516:	4619      	mov	r1, r3
 8000518:	480d      	ldr	r0, [pc, #52]	; (8000550 <MX_GPIO_Init+0xcc>)
 800051a:	f000 fe6f 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800051e:	2320      	movs	r3, #32
 8000520:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000522:	2301      	movs	r3, #1
 8000524:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000526:	2300      	movs	r3, #0
 8000528:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052a:	2300      	movs	r3, #0
 800052c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800052e:	f107 0314 	add.w	r3, r7, #20
 8000532:	4619      	mov	r1, r3
 8000534:	4804      	ldr	r0, [pc, #16]	; (8000548 <MX_GPIO_Init+0xc4>)
 8000536:	f000 fe61 	bl	80011fc <HAL_GPIO_Init>

}
 800053a:	bf00      	nop
 800053c:	3728      	adds	r7, #40	; 0x28
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40023800 	.word	0x40023800
 8000548:	40020000 	.word	0x40020000
 800054c:	10110000 	.word	0x10110000
 8000550:	40020800 	.word	0x40020800

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000556:	f5ad 4d1c 	sub.w	sp, sp, #39936	; 0x9c00
 800055a:	b0b7      	sub	sp, #220	; 0xdc
 800055c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055e:	f000 fc6e 	bl	8000e3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000562:	f000 f987 	bl	8000874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000566:	f7ff ff8d 	bl	8000484 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800056a:	f000 fa91 	bl	8000a90 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800056e:	f000 fab9 	bl	8000ae4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */



  int ok[MAX_RCP_LEN ] = {0};
 8000572:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000576:	3b5c      	subs	r3, #92	; 0x5c
 8000578:	4618      	mov	r0, r3
 800057a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800057e:	461a      	mov	r2, r3
 8000580:	2100      	movs	r1, #0
 8000582:	f002 fb77 	bl	8002c74 <memset>
  char GET_DATA_Send[100] = "GET /ShowData?id=10";
 8000586:	f107 06c0 	add.w	r6, r7, #192	; 0xc0
 800058a:	3ec0      	subs	r6, #192	; 0xc0
 800058c:	4b9f      	ldr	r3, [pc, #636]	; (800080c <main+0x2b8>)
 800058e:	4634      	mov	r4, r6
 8000590:	461d      	mov	r5, r3
 8000592:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000596:	682b      	ldr	r3, [r5, #0]
 8000598:	6023      	str	r3, [r4, #0]
 800059a:	f106 0314 	add.w	r3, r6, #20
 800059e:	2250      	movs	r2, #80	; 0x50
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f002 fb66 	bl	8002c74 <memset>
  //char path = "/ShowData?";
  int  id = 10, temp = 2000, humA = 4560, humS = 6700 , Waterlvl = 5000;
 80005a8:	230a      	movs	r3, #10
 80005aa:	f507 421c 	add.w	r2, r7, #39936	; 0x9c00
 80005ae:	f102 02b4 	add.w	r2, r2, #180	; 0xb4
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80005b8:	f507 421c 	add.w	r2, r7, #39936	; 0x9c00
 80005bc:	f102 02b0 	add.w	r2, r2, #176	; 0xb0
 80005c0:	6013      	str	r3, [r2, #0]
 80005c2:	f241 13d0 	movw	r3, #4560	; 0x11d0
 80005c6:	f507 421c 	add.w	r2, r7, #39936	; 0x9c00
 80005ca:	f102 02ac 	add.w	r2, r2, #172	; 0xac
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	f641 232c 	movw	r3, #6700	; 0x1a2c
 80005d4:	f507 421c 	add.w	r2, r7, #39936	; 0x9c00
 80005d8:	f102 02a8 	add.w	r2, r2, #168	; 0xa8
 80005dc:	6013      	str	r3, [r2, #0]
 80005de:	f241 3388 	movw	r3, #5000	; 0x1388
 80005e2:	f507 421c 	add.w	r2, r7, #39936	; 0x9c00
 80005e6:	f102 02a4 	add.w	r2, r2, #164	; 0xa4
 80005ea:	6013      	str	r3, [r2, #0]
  int reboot = 0, i =0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	f507 421c 	add.w	r2, r7, #39936	; 0x9c00
 80005f2:	f102 02bc 	add.w	r2, r2, #188	; 0xbc
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	2300      	movs	r3, #0
 80005fa:	f507 421c 	add.w	r2, r7, #39936	; 0x9c00
 80005fe:	f102 02b8 	add.w	r2, r2, #184	; 0xb8
 8000602:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  commandMode();
 8000604:	f000 fb1c 	bl	8000c40 <commandMode>


  /* -----  WIFI_authentification(SSID,AUTH,KEY);  ----- */


	sendCommand("set wlan ssid " SSID "\r", "OK",ok);
 8000608:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800060c:	3b5c      	subs	r3, #92	; 0x5c
 800060e:	461a      	mov	r2, r3
 8000610:	497f      	ldr	r1, [pc, #508]	; (8000810 <main+0x2bc>)
 8000612:	4880      	ldr	r0, [pc, #512]	; (8000814 <main+0x2c0>)
 8000614:	f000 fb54 	bl	8000cc0 <sendCommand>
	  if (strcmp(AUTH , WIFLY_AUTH_OPEN) > 0 || strcmp(AUTH , WIFLY_AUTH_OPEN) < 0 )
	    {
		  sendCommand("set wlan auth " AUTH "\r","OK", ok);
 8000618:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800061c:	3b5c      	subs	r3, #92	; 0x5c
 800061e:	461a      	mov	r2, r3
 8000620:	497b      	ldr	r1, [pc, #492]	; (8000810 <main+0x2bc>)
 8000622:	487d      	ldr	r0, [pc, #500]	; (8000818 <main+0x2c4>)
 8000624:	f000 fb4c 	bl	8000cc0 <sendCommand>
	  	  if (strcmp(AUTH , WIFLY_AUTH_WEP)==0)
	  	  {
	  		sendCommand("set wlan key " KEY "\r","OK", ok); // Key must be EXACTLY 13 bytes (26 ASCII chars)
	  	  }
	  	  else{
	  		sendCommand("set wlan phrase " KEY"\r","OK", ok);
 8000628:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800062c:	3b5c      	subs	r3, #92	; 0x5c
 800062e:	461a      	mov	r2, r3
 8000630:	4977      	ldr	r1, [pc, #476]	; (8000810 <main+0x2bc>)
 8000632:	487a      	ldr	r0, [pc, #488]	; (800081c <main+0x2c8>)
 8000634:	f000 fb44 	bl	8000cc0 <sendCommand>



   /* -----  Connect to server ----- */

  sendCommand("set ip protocol 18\r","OK",ok); //enable html client
 8000638:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800063c:	3b5c      	subs	r3, #92	; 0x5c
 800063e:	461a      	mov	r2, r3
 8000640:	4973      	ldr	r1, [pc, #460]	; (8000810 <main+0x2bc>)
 8000642:	4877      	ldr	r0, [pc, #476]	; (8000820 <main+0x2cc>)
 8000644:	f000 fb3c 	bl	8000cc0 <sendCommand>
  sendCommand("set com remote 0\r","OK",ok); // turn off the REMOTE string so it does not interfere with the post
 8000648:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800064c:	3b5c      	subs	r3, #92	; 0x5c
 800064e:	461a      	mov	r2, r3
 8000650:	496f      	ldr	r1, [pc, #444]	; (8000810 <main+0x2bc>)
 8000652:	4874      	ldr	r0, [pc, #464]	; (8000824 <main+0x2d0>)
 8000654:	f000 fb34 	bl	8000cc0 <sendCommand>


  sendCommand("set ip host " HOST_IP"\r","OK",ok); //set remote IP to connect to
 8000658:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800065c:	3b5c      	subs	r3, #92	; 0x5c
 800065e:	461a      	mov	r2, r3
 8000660:	496b      	ldr	r1, [pc, #428]	; (8000810 <main+0x2bc>)
 8000662:	4871      	ldr	r0, [pc, #452]	; (8000828 <main+0x2d4>)
 8000664:	f000 fb2c 	bl	8000cc0 <sendCommand>
  sendCommand("set ip remote "HOST_PORT"\r","OK",ok); //set remote Port to connect to
 8000668:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800066c:	3b5c      	subs	r3, #92	; 0x5c
 800066e:	461a      	mov	r2, r3
 8000670:	4967      	ldr	r1, [pc, #412]	; (8000810 <main+0x2bc>)
 8000672:	486e      	ldr	r0, [pc, #440]	; (800082c <main+0x2d8>)
 8000674:	f000 fb24 	bl	8000cc0 <sendCommand>
  //sendCommand("set comm open *OPEN*\r","OK",ok); // set the string that the wifi shield will output when a connection is opened

  //sendCommand("open " HOST_IP " " HOST_PORT"\r","*OPEN*",ok);
  //sendCommand("open\r","*OPEN*",ok); // One time opening of connection to server

  sendCommand("set uart mode 2\r","AOK",ok); //auto connect on every UART message
 8000678:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800067c:	3b5c      	subs	r3, #92	; 0x5c
 800067e:	461a      	mov	r2, r3
 8000680:	496b      	ldr	r1, [pc, #428]	; (8000830 <main+0x2dc>)
 8000682:	486c      	ldr	r0, [pc, #432]	; (8000834 <main+0x2e0>)
 8000684:	f000 fb1c 	bl	8000cc0 <sendCommand>

  /* -----  Save wlan config ----- */

  sendCommand("save\r", "Storing in config",ok);
 8000688:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800068c:	3b5c      	subs	r3, #92	; 0x5c
 800068e:	461a      	mov	r2, r3
 8000690:	4969      	ldr	r1, [pc, #420]	; (8000838 <main+0x2e4>)
 8000692:	486a      	ldr	r0, [pc, #424]	; (800083c <main+0x2e8>)
 8000694:	f000 fb14 	bl	8000cc0 <sendCommand>
  sendCommand("reboot\r", "*READY*", ok); //After reboot we directly go to dataMode
 8000698:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800069c:	3b5c      	subs	r3, #92	; 0x5c
 800069e:	461a      	mov	r2, r3
 80006a0:	4967      	ldr	r1, [pc, #412]	; (8000840 <main+0x2ec>)
 80006a2:	4868      	ldr	r0, [pc, #416]	; (8000844 <main+0x2f0>)
 80006a4:	f000 fb0c 	bl	8000cc0 <sendCommand>

  /* -----  Join access point ----- */
    HAL_Delay(1000);
 80006a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ac:	f000 fc36 	bl	8000f1c <HAL_Delay>
    commandMode();
 80006b0:	f000 fac6 	bl	8000c40 <commandMode>
    sendCommand("join " SSID "\r", "Associated!",ok);
 80006b4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80006b8:	3b5c      	subs	r3, #92	; 0x5c
 80006ba:	461a      	mov	r2, r3
 80006bc:	4962      	ldr	r1, [pc, #392]	; (8000848 <main+0x2f4>)
 80006be:	4863      	ldr	r0, [pc, #396]	; (800084c <main+0x2f8>)
 80006c0:	f000 fafe 	bl	8000cc0 <sendCommand>

  sendCommand("exit\r", "EXIT", ok); // go into DATA mode (mode in which we can communicate with the network/http)
 80006c4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80006c8:	3b5c      	subs	r3, #92	; 0x5c
 80006ca:	461a      	mov	r2, r3
 80006cc:	4960      	ldr	r1, [pc, #384]	; (8000850 <main+0x2fc>)
 80006ce:	4861      	ldr	r0, [pc, #388]	; (8000854 <main+0x300>)
 80006d0:	f000 faf6 	bl	8000cc0 <sendCommand>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  commandMode();
 80006d4:	f000 fab4 	bl	8000c40 <commandMode>
	  sendCommand("show  net\r", "Assoc=OK",ok);
 80006d8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80006dc:	3b5c      	subs	r3, #92	; 0x5c
 80006de:	461a      	mov	r2, r3
 80006e0:	495d      	ldr	r1, [pc, #372]	; (8000858 <main+0x304>)
 80006e2:	485e      	ldr	r0, [pc, #376]	; (800085c <main+0x308>)
 80006e4:	f000 faec 	bl	8000cc0 <sendCommand>
	  if (strstr(ok,"Assoc=OK")==NULL)
 80006e8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80006ec:	3b5c      	subs	r3, #92	; 0x5c
 80006ee:	495a      	ldr	r1, [pc, #360]	; (8000858 <main+0x304>)
 80006f0:	4618      	mov	r0, r3
 80006f2:	f002 fafb 	bl	8002cec <strstr>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d107      	bne.n	800070c <main+0x1b8>
	  {
		  sendCommand("join\r","Associated!",ok);
 80006fc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000700:	3b5c      	subs	r3, #92	; 0x5c
 8000702:	461a      	mov	r2, r3
 8000704:	4950      	ldr	r1, [pc, #320]	; (8000848 <main+0x2f4>)
 8000706:	4856      	ldr	r0, [pc, #344]	; (8000860 <main+0x30c>)
 8000708:	f000 fada 	bl	8000cc0 <sendCommand>
	  }
	  sendCommand("exit\r","EXIT", ok);
 800070c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000710:	3b5c      	subs	r3, #92	; 0x5c
 8000712:	461a      	mov	r2, r3
 8000714:	494e      	ldr	r1, [pc, #312]	; (8000850 <main+0x2fc>)
 8000716:	484f      	ldr	r0, [pc, #316]	; (8000854 <main+0x300>)
 8000718:	f000 fad2 	bl	8000cc0 <sendCommand>

	  //memset(GET_DATA_Send,0,100);

	  snprintf(GET_DATA_Send,100,"GET %sid=%d&temp=%d&huma=%d&hums=%d&wtrlvl=%d","/ShowData?",id + i,temp,humA,humS,Waterlvl);
 800071c:	f507 431c 	add.w	r3, r7, #39936	; 0x9c00
 8000720:	f103 03b4 	add.w	r3, r3, #180	; 0xb4
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	f507 431c 	add.w	r3, r7, #39936	; 0x9c00
 800072a:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4413      	add	r3, r2
 8000732:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8000736:	38c0      	subs	r0, #192	; 0xc0
 8000738:	f507 421c 	add.w	r2, r7, #39936	; 0x9c00
 800073c:	f102 02a4 	add.w	r2, r2, #164	; 0xa4
 8000740:	6812      	ldr	r2, [r2, #0]
 8000742:	9204      	str	r2, [sp, #16]
 8000744:	f507 421c 	add.w	r2, r7, #39936	; 0x9c00
 8000748:	f102 02a8 	add.w	r2, r2, #168	; 0xa8
 800074c:	6812      	ldr	r2, [r2, #0]
 800074e:	9203      	str	r2, [sp, #12]
 8000750:	f507 421c 	add.w	r2, r7, #39936	; 0x9c00
 8000754:	f102 02ac 	add.w	r2, r2, #172	; 0xac
 8000758:	6812      	ldr	r2, [r2, #0]
 800075a:	9202      	str	r2, [sp, #8]
 800075c:	f507 421c 	add.w	r2, r7, #39936	; 0x9c00
 8000760:	f102 02b0 	add.w	r2, r2, #176	; 0xb0
 8000764:	6812      	ldr	r2, [r2, #0]
 8000766:	9201      	str	r2, [sp, #4]
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	4b3e      	ldr	r3, [pc, #248]	; (8000864 <main+0x310>)
 800076c:	4a3e      	ldr	r2, [pc, #248]	; (8000868 <main+0x314>)
 800076e:	2164      	movs	r1, #100	; 0x64
 8000770:	f002 fa88 	bl	8002c84 <sniprintf>
	  sendData(GET_DATA_Send,"*OPEN*", ok);
 8000774:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8000778:	3a5c      	subs	r2, #92	; 0x5c
 800077a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800077e:	3bc0      	subs	r3, #192	; 0xc0
 8000780:	493a      	ldr	r1, [pc, #232]	; (800086c <main+0x318>)
 8000782:	4618      	mov	r0, r3
 8000784:	f000 faf4 	bl	8000d70 <sendData>
	  if( strstr((char *)ok,"ERR") != NULL ||  strcmp((char *)ok,"") == 0 )
 8000788:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800078c:	3b5c      	subs	r3, #92	; 0x5c
 800078e:	4938      	ldr	r1, [pc, #224]	; (8000870 <main+0x31c>)
 8000790:	4618      	mov	r0, r3
 8000792:	f002 faab 	bl	8002cec <strstr>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d105      	bne.n	80007a8 <main+0x254>
 800079c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80007a0:	3b5c      	subs	r3, #92	; 0x5c
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d121      	bne.n	80007ec <main+0x298>
	  {
		  reboot ++;
 80007a8:	f507 431c 	add.w	r3, r7, #39936	; 0x9c00
 80007ac:	f103 03bc 	add.w	r3, r3, #188	; 0xbc
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	3301      	adds	r3, #1
 80007b4:	f507 421c 	add.w	r2, r7, #39936	; 0x9c00
 80007b8:	f102 02bc 	add.w	r2, r2, #188	; 0xbc
 80007bc:	6013      	str	r3, [r2, #0]
		  if(reboot >= 2)
 80007be:	f507 431c 	add.w	r3, r7, #39936	; 0x9c00
 80007c2:	f103 03bc 	add.w	r3, r3, #188	; 0xbc
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	dd0f      	ble.n	80007ec <main+0x298>
		  {
			  reboot = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	f507 421c 	add.w	r2, r7, #39936	; 0x9c00
 80007d2:	f102 02bc 	add.w	r2, r2, #188	; 0xbc
 80007d6:	6013      	str	r3, [r2, #0]
			  commandMode();
 80007d8:	f000 fa32 	bl	8000c40 <commandMode>
			  sendCommand("reboot\r", "*READY*", ok);
 80007dc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80007e0:	3b5c      	subs	r3, #92	; 0x5c
 80007e2:	461a      	mov	r2, r3
 80007e4:	4916      	ldr	r1, [pc, #88]	; (8000840 <main+0x2ec>)
 80007e6:	4817      	ldr	r0, [pc, #92]	; (8000844 <main+0x2f0>)
 80007e8:	f000 fa6a 	bl	8000cc0 <sendCommand>
		  }

	  }

	  HAL_Delay(5000);
 80007ec:	f241 3088 	movw	r0, #5000	; 0x1388
 80007f0:	f000 fb94 	bl	8000f1c <HAL_Delay>

	  i++;
 80007f4:	f507 431c 	add.w	r3, r7, #39936	; 0x9c00
 80007f8:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	3301      	adds	r3, #1
 8000800:	f507 421c 	add.w	r2, r7, #39936	; 0x9c00
 8000804:	f102 02b8 	add.w	r2, r2, #184	; 0xb8
 8000808:	6013      	str	r3, [r2, #0]
	  commandMode();
 800080a:	e763      	b.n	80006d4 <main+0x180>
 800080c:	080036e4 	.word	0x080036e4
 8000810:	08003564 	.word	0x08003564
 8000814:	08003568 	.word	0x08003568
 8000818:	08003584 	.word	0x08003584
 800081c:	08003598 	.word	0x08003598
 8000820:	080035b4 	.word	0x080035b4
 8000824:	080035c8 	.word	0x080035c8
 8000828:	080035dc 	.word	0x080035dc
 800082c:	080035f8 	.word	0x080035f8
 8000830:	0800360c 	.word	0x0800360c
 8000834:	08003610 	.word	0x08003610
 8000838:	08003624 	.word	0x08003624
 800083c:	08003638 	.word	0x08003638
 8000840:	08003640 	.word	0x08003640
 8000844:	08003648 	.word	0x08003648
 8000848:	08003650 	.word	0x08003650
 800084c:	0800365c 	.word	0x0800365c
 8000850:	0800366c 	.word	0x0800366c
 8000854:	08003674 	.word	0x08003674
 8000858:	0800367c 	.word	0x0800367c
 800085c:	08003688 	.word	0x08003688
 8000860:	08003694 	.word	0x08003694
 8000864:	0800369c 	.word	0x0800369c
 8000868:	080036a8 	.word	0x080036a8
 800086c:	080036d8 	.word	0x080036d8
 8000870:	080036e0 	.word	0x080036e0

08000874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b092      	sub	sp, #72	; 0x48
 8000878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	2234      	movs	r2, #52	; 0x34
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f002 f9f6 	bl	8002c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000888:	463b      	mov	r3, r7
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000896:	4b1d      	ldr	r3, [pc, #116]	; (800090c <SystemClock_Config+0x98>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800089e:	4a1b      	ldr	r2, [pc, #108]	; (800090c <SystemClock_Config+0x98>)
 80008a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008a4:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008a6:	2302      	movs	r3, #2
 80008a8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008aa:	2301      	movs	r3, #1
 80008ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ae:	2310      	movs	r3, #16
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b2:	2302      	movs	r3, #2
 80008b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008b6:	2300      	movs	r3, #0
 80008b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80008ba:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80008be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80008c0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80008c4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 fe58 	bl	8001580 <HAL_RCC_OscConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0x66>
  {
    Error_Handler();
 80008d6:	f000 f81b 	bl	8000910 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008da:	230f      	movs	r3, #15
 80008dc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008de:	2303      	movs	r3, #3
 80008e0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008ee:	463b      	mov	r3, r7
 80008f0:	2101      	movs	r1, #1
 80008f2:	4618      	mov	r0, r3
 80008f4:	f001 f974 	bl	8001be0 <HAL_RCC_ClockConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80008fe:	f000 f807 	bl	8000910 <Error_Handler>
  }
}
 8000902:	bf00      	nop
 8000904:	3748      	adds	r7, #72	; 0x48
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40007000 	.word	0x40007000

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000914:	b672      	cpsid	i
}
 8000916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000918:	e7fe      	b.n	8000918 <Error_Handler+0x8>
	...

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <HAL_MspInit+0x5c>)
 8000924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000926:	4a14      	ldr	r2, [pc, #80]	; (8000978 <HAL_MspInit+0x5c>)
 8000928:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800092c:	6253      	str	r3, [r2, #36]	; 0x24
 800092e:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_MspInit+0x5c>)
 8000930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000932:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <HAL_MspInit+0x5c>)
 800093c:	6a1b      	ldr	r3, [r3, #32]
 800093e:	4a0e      	ldr	r2, [pc, #56]	; (8000978 <HAL_MspInit+0x5c>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6213      	str	r3, [r2, #32]
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <HAL_MspInit+0x5c>)
 8000948:	6a1b      	ldr	r3, [r3, #32]
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <HAL_MspInit+0x5c>)
 8000954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000956:	4a08      	ldr	r2, [pc, #32]	; (8000978 <HAL_MspInit+0x5c>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095c:	6253      	str	r3, [r2, #36]	; 0x24
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <HAL_MspInit+0x5c>)
 8000960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800096a:	2007      	movs	r0, #7
 800096c:	f000 fbc4 	bl	80010f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000970:	bf00      	nop
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40023800 	.word	0x40023800

0800097c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <NMI_Handler+0x4>

08000982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <HardFault_Handler+0x4>

08000988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <MemManage_Handler+0x4>

0800098e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <BusFault_Handler+0x4>

08000994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <UsageFault_Handler+0x4>

0800099a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr

080009a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr

080009b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr

080009be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c2:	f000 fa8f 	bl	8000ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009d0:	4802      	ldr	r0, [pc, #8]	; (80009dc <USART1_IRQHandler+0x10>)
 80009d2:	f001 fdbd 	bl	8002550 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200000a4 	.word	0x200000a4

080009e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	static uint8_t data[10] = {0};
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80009e4:	2120      	movs	r1, #32
 80009e6:	4806      	ldr	r0, [pc, #24]	; (8000a00 <USART2_IRQHandler+0x20>)
 80009e8:	f000 fdb0 	bl	800154c <HAL_GPIO_TogglePin>
	HAL_UART_Receive_IT(&huart2, data, sizeof(data));
 80009ec:	220a      	movs	r2, #10
 80009ee:	4905      	ldr	r1, [pc, #20]	; (8000a04 <USART2_IRQHandler+0x24>)
 80009f0:	4805      	ldr	r0, [pc, #20]	; (8000a08 <USART2_IRQHandler+0x28>)
 80009f2:	f001 fd59 	bl	80024a8 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009f6:	4804      	ldr	r0, [pc, #16]	; (8000a08 <USART2_IRQHandler+0x28>)
 80009f8:	f001 fdaa 	bl	8002550 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40020000 	.word	0x40020000
 8000a04:	2000008c 	.word	0x2000008c
 8000a08:	200000e4 	.word	0x200000e4

08000a0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a14:	4a14      	ldr	r2, [pc, #80]	; (8000a68 <_sbrk+0x5c>)
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <_sbrk+0x60>)
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a20:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <_sbrk+0x64>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d102      	bne.n	8000a2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a28:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <_sbrk+0x64>)
 8000a2a:	4a12      	ldr	r2, [pc, #72]	; (8000a74 <_sbrk+0x68>)
 8000a2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <_sbrk+0x64>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4413      	add	r3, r2
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d207      	bcs.n	8000a4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a3c:	f002 f8f0 	bl	8002c20 <__errno>
 8000a40:	4603      	mov	r3, r0
 8000a42:	220c      	movs	r2, #12
 8000a44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4a:	e009      	b.n	8000a60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a4c:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <_sbrk+0x64>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a52:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <_sbrk+0x64>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4413      	add	r3, r2
 8000a5a:	4a05      	ldr	r2, [pc, #20]	; (8000a70 <_sbrk+0x64>)
 8000a5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3718      	adds	r7, #24
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20014000 	.word	0x20014000
 8000a6c:	00000400 	.word	0x00000400
 8000a70:	20000098 	.word	0x20000098
 8000a74:	20000138 	.word	0x20000138

08000a78 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000a7c:	4b03      	ldr	r3, [pc, #12]	; (8000a8c <SystemInit+0x14>)
 8000a7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a82:	609a      	str	r2, [r3, #8]
#endif
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000a96:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <MX_USART1_UART_Init+0x50>)
 8000a98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000a9c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000aa0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ab4:	4b09      	ldr	r3, [pc, #36]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000ac8:	f001 fb1e 	bl	8002108 <HAL_UART_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ad2:	f7ff ff1d 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200000a4 	.word	0x200000a4
 8000ae0:	40013800 	.word	0x40013800

08000ae4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000aea:	4a12      	ldr	r2, [pc, #72]	; (8000b34 <MX_USART2_UART_Init+0x50>)
 8000aec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000af0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000af4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000af6:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b02:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b08:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000b0a:	220c      	movs	r2, #12
 8000b0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0e:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b1a:	4805      	ldr	r0, [pc, #20]	; (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000b1c:	f001 faf4 	bl	8002108 <HAL_UART_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b26:	f7ff fef3 	bl	8000910 <Error_Handler>
  /* USER CODE BEGIN USART2_Init 2 */


  /* USER CODE END USART2_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200000e4 	.word	0x200000e4
 8000b34:	40004400 	.word	0x40004400

08000b38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08c      	sub	sp, #48	; 0x30
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 031c 	add.w	r3, r7, #28
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a36      	ldr	r2, [pc, #216]	; (8000c30 <HAL_UART_MspInit+0xf8>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d131      	bne.n	8000bbe <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b5a:	4b36      	ldr	r3, [pc, #216]	; (8000c34 <HAL_UART_MspInit+0xfc>)
 8000b5c:	6a1b      	ldr	r3, [r3, #32]
 8000b5e:	4a35      	ldr	r2, [pc, #212]	; (8000c34 <HAL_UART_MspInit+0xfc>)
 8000b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b64:	6213      	str	r3, [r2, #32]
 8000b66:	4b33      	ldr	r3, [pc, #204]	; (8000c34 <HAL_UART_MspInit+0xfc>)
 8000b68:	6a1b      	ldr	r3, [r3, #32]
 8000b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b6e:	61bb      	str	r3, [r7, #24]
 8000b70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	4b30      	ldr	r3, [pc, #192]	; (8000c34 <HAL_UART_MspInit+0xfc>)
 8000b74:	69db      	ldr	r3, [r3, #28]
 8000b76:	4a2f      	ldr	r2, [pc, #188]	; (8000c34 <HAL_UART_MspInit+0xfc>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	61d3      	str	r3, [r2, #28]
 8000b7e:	4b2d      	ldr	r3, [pc, #180]	; (8000c34 <HAL_UART_MspInit+0xfc>)
 8000b80:	69db      	ldr	r3, [r3, #28]
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b8a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b9c:	2307      	movs	r3, #7
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba0:	f107 031c 	add.w	r3, r7, #28
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4824      	ldr	r0, [pc, #144]	; (8000c38 <HAL_UART_MspInit+0x100>)
 8000ba8:	f000 fb28 	bl	80011fc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2100      	movs	r1, #0
 8000bb0:	2025      	movs	r0, #37	; 0x25
 8000bb2:	f000 faac 	bl	800110e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bb6:	2025      	movs	r0, #37	; 0x25
 8000bb8:	f000 fac5 	bl	8001146 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000bbc:	e034      	b.n	8000c28 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a1e      	ldr	r2, [pc, #120]	; (8000c3c <HAL_UART_MspInit+0x104>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d12f      	bne.n	8000c28 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <HAL_UART_MspInit+0xfc>)
 8000bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bcc:	4a19      	ldr	r2, [pc, #100]	; (8000c34 <HAL_UART_MspInit+0xfc>)
 8000bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd2:	6253      	str	r3, [r2, #36]	; 0x24
 8000bd4:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <HAL_UART_MspInit+0xfc>)
 8000bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be0:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <HAL_UART_MspInit+0xfc>)
 8000be2:	69db      	ldr	r3, [r3, #28]
 8000be4:	4a13      	ldr	r2, [pc, #76]	; (8000c34 <HAL_UART_MspInit+0xfc>)
 8000be6:	f043 0301 	orr.w	r3, r3, #1
 8000bea:	61d3      	str	r3, [r2, #28]
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <HAL_UART_MspInit+0xfc>)
 8000bee:	69db      	ldr	r3, [r3, #28]
 8000bf0:	f003 0301 	and.w	r3, r3, #1
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bf8:	230c      	movs	r3, #12
 8000bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c04:	2303      	movs	r3, #3
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c08:	2307      	movs	r3, #7
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0c:	f107 031c 	add.w	r3, r7, #28
 8000c10:	4619      	mov	r1, r3
 8000c12:	4809      	ldr	r0, [pc, #36]	; (8000c38 <HAL_UART_MspInit+0x100>)
 8000c14:	f000 faf2 	bl	80011fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	2026      	movs	r0, #38	; 0x26
 8000c1e:	f000 fa76 	bl	800110e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c22:	2026      	movs	r0, #38	; 0x26
 8000c24:	f000 fa8f 	bl	8001146 <HAL_NVIC_EnableIRQ>
}
 8000c28:	bf00      	nop
 8000c2a:	3730      	adds	r7, #48	; 0x30
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40013800 	.word	0x40013800
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020000 	.word	0x40020000
 8000c3c:	40004400 	.word	0x40004400

08000c40 <commandMode>:
#include "usart.h"



void commandMode()
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&huart2, (uint8_t *)"\nPasser en mode Commande\n\n", 27);
 8000c46:	221b      	movs	r2, #27
 8000c48:	4918      	ldr	r1, [pc, #96]	; (8000cac <commandMode+0x6c>)
 8000c4a:	4819      	ldr	r0, [pc, #100]	; (8000cb0 <commandMode+0x70>)
 8000c4c:	f001 fbe8 	bl	8002420 <HAL_UART_Transmit_IT>

	//Go into Command mode
		char CMD_MODE[4] = {'$','$','$'};
 8000c50:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <commandMode+0x74>)
 8000c52:	60fb      	str	r3, [r7, #12]
		uint8_t ok[5] = {0};
 8000c54:	2300      	movs	r3, #0
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	2300      	movs	r3, #0
 8000c5a:	723b      	strb	r3, [r7, #8]

		HAL_Delay(250);
 8000c5c:	20fa      	movs	r0, #250	; 0xfa
 8000c5e:	f000 f95d 	bl	8000f1c <HAL_Delay>

		do{
			HAL_UART_Transmit(&huart1, (uint8_t *)CMD_MODE, strlen(CMD_MODE), 5000);
 8000c62:	f107 030c 	add.w	r3, r7, #12
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff fa88 	bl	800017c <strlen>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	f107 010c 	add.w	r1, r7, #12
 8000c74:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c78:	480f      	ldr	r0, [pc, #60]	; (8000cb8 <commandMode+0x78>)
 8000c7a:	f001 fa92 	bl	80021a2 <HAL_UART_Transmit>
		 	HAL_UART_Receive(&huart1, (uint8_t *)ok, MAX_RCP_LEN, DEFAULT_WAIT_RESPONSE_TIME);
 8000c7e:	1d39      	adds	r1, r7, #4
 8000c80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c84:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c88:	480b      	ldr	r0, [pc, #44]	; (8000cb8 <commandMode+0x78>)
 8000c8a:	f001 fb23 	bl	80022d4 <HAL_UART_Receive>
		  }while (strstr((char *) ok, "CMD")==NULL);
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	490a      	ldr	r1, [pc, #40]	; (8000cbc <commandMode+0x7c>)
 8000c92:	4618      	mov	r0, r3
 8000c94:	f002 f82a 	bl	8002cec <strstr>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d0e1      	beq.n	8000c62 <commandMode+0x22>
		HAL_Delay(250);
 8000c9e:	20fa      	movs	r0, #250	; 0xfa
 8000ca0:	f000 f93c 	bl	8000f1c <HAL_Delay>
}
 8000ca4:	bf00      	nop
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	08003748 	.word	0x08003748
 8000cb0:	200000e4 	.word	0x200000e4
 8000cb4:	00242424 	.word	0x00242424
 8000cb8:	200000a4 	.word	0x200000a4
 8000cbc:	08003764 	.word	0x08003764

08000cc0 <sendCommand>:


//void sendCommand(char * CMD, char * ACK,uint8_t timeout , uint8_t * ANS)
void sendCommand(char * CMD, char * ACK, int * ANS)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
	int i =0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
	int k = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	613b      	str	r3, [r7, #16]
	//uint8_t TIME_Delay;

	if(strstr(CMD, "scan")==NULL)
 8000cd4:	4923      	ldr	r1, [pc, #140]	; (8000d64 <sendCommand+0xa4>)
 8000cd6:	68f8      	ldr	r0, [r7, #12]
 8000cd8:	f002 f808 	bl	8002cec <strstr>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d102      	bne.n	8000ce8 <sendCommand+0x28>
		k = 1;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	e001      	b.n	8000cec <sendCommand+0x2c>
	else
		k = 10;
 8000ce8:	230a      	movs	r3, #10
 8000cea:	613b      	str	r3, [r7, #16]

	memset(ANS,0,MAX_RCP_LEN);
 8000cec:	f242 7210 	movw	r2, #10000	; 0x2710
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f001 ffbe 	bl	8002c74 <memset>
		//commandMode();

	//Pass the command to the module

	 	 do{
	 		 i++;
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	617b      	str	r3, [r7, #20]
	 		 HAL_Delay(200);
 8000cfe:	20c8      	movs	r0, #200	; 0xc8
 8000d00:	f000 f90c 	bl	8000f1c <HAL_Delay>

	 		 HAL_UART_Transmit_IT(&huart1,  (uint8_t *)CMD, strlen(CMD));
 8000d04:	68f8      	ldr	r0, [r7, #12]
 8000d06:	f7ff fa39 	bl	800017c <strlen>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	461a      	mov	r2, r3
 8000d10:	68f9      	ldr	r1, [r7, #12]
 8000d12:	4815      	ldr	r0, [pc, #84]	; (8000d68 <sendCommand+0xa8>)
 8000d14:	f001 fb84 	bl	8002420 <HAL_UART_Transmit_IT>
	 		 HAL_UART_Receive(&huart1,  (uint8_t *)ANS, MAX_RCP_LEN, DEFAULT_WAIT_RESPONSE_TIME*k);
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d1e:	fb02 f303 	mul.w	r3, r2, r3
 8000d22:	f242 7210 	movw	r2, #10000	; 0x2710
 8000d26:	6879      	ldr	r1, [r7, #4]
 8000d28:	480f      	ldr	r0, [pc, #60]	; (8000d68 <sendCommand+0xa8>)
 8000d2a:	f001 fad3 	bl	80022d4 <HAL_UART_Receive>

	 		 HAL_UART_Transmit_IT(&huart2,  (uint8_t *)CMD, strlen(CMD)+1);
 8000d2e:	68f8      	ldr	r0, [r7, #12]
 8000d30:	f7ff fa24 	bl	800017c <strlen>
 8000d34:	4603      	mov	r3, r0
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	3301      	adds	r3, #1
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	68f9      	ldr	r1, [r7, #12]
 8000d40:	480a      	ldr	r0, [pc, #40]	; (8000d6c <sendCommand+0xac>)
 8000d42:	f001 fb6d 	bl	8002420 <HAL_UART_Transmit_IT>

	 	 }while (strstr(( char *)ANS, ACK)==NULL && i <5);
 8000d46:	68b9      	ldr	r1, [r7, #8]
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f001 ffcf 	bl	8002cec <strstr>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d102      	bne.n	8000d5a <sendCommand+0x9a>
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	2b04      	cmp	r3, #4
 8000d58:	ddce      	ble.n	8000cf8 <sendCommand+0x38>

 }
 8000d5a:	bf00      	nop
 8000d5c:	3718      	adds	r7, #24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	08003768 	.word	0x08003768
 8000d68:	200000a4 	.word	0x200000a4
 8000d6c:	200000e4 	.word	0x200000e4

08000d70 <sendData>:

void sendData(char * DATA, char * ACK, int * ANS)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
	int i =0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]

	memset(ANS,0,MAX_RCP_LEN);
 8000d80:	f242 7210 	movw	r2, #10000	; 0x2710
 8000d84:	2100      	movs	r1, #0
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f001 ff74 	bl	8002c74 <memset>
		//commandMode();

	//Pass the command to the module

	 	 do{
	 		i++;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	617b      	str	r3, [r7, #20]
	 		HAL_Delay(200);
 8000d92:	20c8      	movs	r0, #200	; 0xc8
 8000d94:	f000 f8c2 	bl	8000f1c <HAL_Delay>

	 		 HAL_UART_Transmit_IT(&huart1,  (uint8_t *)DATA, strlen(DATA));
 8000d98:	68f8      	ldr	r0, [r7, #12]
 8000d9a:	f7ff f9ef 	bl	800017c <strlen>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	461a      	mov	r2, r3
 8000da4:	68f9      	ldr	r1, [r7, #12]
 8000da6:	4811      	ldr	r0, [pc, #68]	; (8000dec <sendData+0x7c>)
 8000da8:	f001 fb3a 	bl	8002420 <HAL_UART_Transmit_IT>
	 		 HAL_UART_Receive(&huart1,  (uint8_t *)ANS, MAX_RCP_LEN, DEFAULT_WAIT_RESPONSE_TIME*3);
 8000dac:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000db0:	f242 7210 	movw	r2, #10000	; 0x2710
 8000db4:	6879      	ldr	r1, [r7, #4]
 8000db6:	480d      	ldr	r0, [pc, #52]	; (8000dec <sendData+0x7c>)
 8000db8:	f001 fa8c 	bl	80022d4 <HAL_UART_Receive>

	 		 HAL_UART_Transmit_IT(&huart2,  (uint8_t *)ANS, strlen((char *)ANS));
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff f9dd 	bl	800017c <strlen>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	6879      	ldr	r1, [r7, #4]
 8000dca:	4809      	ldr	r0, [pc, #36]	; (8000df0 <sendData+0x80>)
 8000dcc:	f001 fb28 	bl	8002420 <HAL_UART_Transmit_IT>

	 	 }while (strstr(( char *)ANS, ACK)==NULL && i <5);
 8000dd0:	68b9      	ldr	r1, [r7, #8]
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f001 ff8a 	bl	8002cec <strstr>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d102      	bne.n	8000de4 <sendData+0x74>
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	2b04      	cmp	r3, #4
 8000de2:	ddd3      	ble.n	8000d8c <sendData+0x1c>

 }
 8000de4:	bf00      	nop
 8000de6:	3718      	adds	r7, #24
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	200000a4 	.word	0x200000a4
 8000df0:	200000e4 	.word	0x200000e4

08000df4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000df4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000df6:	e003      	b.n	8000e00 <LoopCopyDataInit>

08000df8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000df8:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000dfa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000dfc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000dfe:	3104      	adds	r1, #4

08000e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e00:	480a      	ldr	r0, [pc, #40]	; (8000e2c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000e04:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000e06:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000e08:	d3f6      	bcc.n	8000df8 <CopyDataInit>
  ldr r2, =_sbss
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000e0c:	e002      	b.n	8000e14 <LoopFillZerobss>

08000e0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000e10:	f842 3b04 	str.w	r3, [r2], #4

08000e14 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000e16:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000e18:	d3f9      	bcc.n	8000e0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e1a:	f7ff fe2d 	bl	8000a78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e1e:	f001 ff05 	bl	8002c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e22:	f7ff fb97 	bl	8000554 <main>
  bx lr
 8000e26:	4770      	bx	lr
  ldr r3, =_sidata
 8000e28:	08003898 	.word	0x08003898
  ldr r0, =_sdata
 8000e2c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000e30:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000e34:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000e38:	20000138 	.word	0x20000138

08000e3c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e3c:	e7fe      	b.n	8000e3c <ADC1_IRQHandler>

08000e3e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e44:	2300      	movs	r3, #0
 8000e46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e48:	2003      	movs	r0, #3
 8000e4a:	f000 f955 	bl	80010f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f000 f80e 	bl	8000e70 <HAL_InitTick>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d002      	beq.n	8000e60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	71fb      	strb	r3, [r7, #7]
 8000e5e:	e001      	b.n	8000e64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e60:	f7ff fd5c 	bl	800091c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e64:	79fb      	ldrb	r3, [r7, #7]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e7c:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <HAL_InitTick+0x68>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d022      	beq.n	8000eca <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e84:	4b15      	ldr	r3, [pc, #84]	; (8000edc <HAL_InitTick+0x6c>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <HAL_InitTick+0x68>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e90:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f000 f962 	bl	8001162 <HAL_SYSTICK_Config>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d10f      	bne.n	8000ec4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2b0f      	cmp	r3, #15
 8000ea8:	d809      	bhi.n	8000ebe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	6879      	ldr	r1, [r7, #4]
 8000eae:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb2:	f000 f92c 	bl	800110e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <HAL_InitTick+0x70>)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6013      	str	r3, [r2, #0]
 8000ebc:	e007      	b.n	8000ece <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	73fb      	strb	r3, [r7, #15]
 8000ec2:	e004      	b.n	8000ece <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	73fb      	strb	r3, [r7, #15]
 8000ec8:	e001      	b.n	8000ece <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	20000004 	.word	0x20000004

08000ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <HAL_IncTick+0x1c>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <HAL_IncTick+0x20>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	4a03      	ldr	r2, [pc, #12]	; (8000f00 <HAL_IncTick+0x1c>)
 8000ef4:	6013      	str	r3, [r2, #0]
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000124 	.word	0x20000124
 8000f04:	20000008 	.word	0x20000008

08000f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f0c:	4b02      	ldr	r3, [pc, #8]	; (8000f18 <HAL_GetTick+0x10>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr
 8000f18:	20000124 	.word	0x20000124

08000f1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f24:	f7ff fff0 	bl	8000f08 <HAL_GetTick>
 8000f28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f34:	d004      	beq.n	8000f40 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <HAL_Delay+0x40>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f40:	bf00      	nop
 8000f42:	f7ff ffe1 	bl	8000f08 <HAL_GetTick>
 8000f46:	4602      	mov	r2, r0
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d8f7      	bhi.n	8000f42 <HAL_Delay+0x26>
  {
  }
}
 8000f52:	bf00      	nop
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000008 	.word	0x20000008

08000f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f92:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	60d3      	str	r3, [r2, #12]
}
 8000f98:	bf00      	nop
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fac:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	0a1b      	lsrs	r3, r3, #8
 8000fb2:	f003 0307 	and.w	r3, r3, #7
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	db0b      	blt.n	8000fee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	f003 021f 	and.w	r2, r3, #31
 8000fdc:	4906      	ldr	r1, [pc, #24]	; (8000ff8 <__NVIC_EnableIRQ+0x34>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	095b      	lsrs	r3, r3, #5
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr
 8000ff8:	e000e100 	.word	0xe000e100

08000ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	6039      	str	r1, [r7, #0]
 8001006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100c:	2b00      	cmp	r3, #0
 800100e:	db0a      	blt.n	8001026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	b2da      	uxtb	r2, r3
 8001014:	490c      	ldr	r1, [pc, #48]	; (8001048 <__NVIC_SetPriority+0x4c>)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	0112      	lsls	r2, r2, #4
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	440b      	add	r3, r1
 8001020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001024:	e00a      	b.n	800103c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4908      	ldr	r1, [pc, #32]	; (800104c <__NVIC_SetPriority+0x50>)
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	f003 030f 	and.w	r3, r3, #15
 8001032:	3b04      	subs	r3, #4
 8001034:	0112      	lsls	r2, r2, #4
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	440b      	add	r3, r1
 800103a:	761a      	strb	r2, [r3, #24]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000e100 	.word	0xe000e100
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001050:	b480      	push	{r7}
 8001052:	b089      	sub	sp, #36	; 0x24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f1c3 0307 	rsb	r3, r3, #7
 800106a:	2b04      	cmp	r3, #4
 800106c:	bf28      	it	cs
 800106e:	2304      	movcs	r3, #4
 8001070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3304      	adds	r3, #4
 8001076:	2b06      	cmp	r3, #6
 8001078:	d902      	bls.n	8001080 <NVIC_EncodePriority+0x30>
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3b03      	subs	r3, #3
 800107e:	e000      	b.n	8001082 <NVIC_EncodePriority+0x32>
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	f04f 32ff 	mov.w	r2, #4294967295
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43da      	mvns	r2, r3
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	401a      	ands	r2, r3
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001098:	f04f 31ff 	mov.w	r1, #4294967295
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	fa01 f303 	lsl.w	r3, r1, r3
 80010a2:	43d9      	mvns	r1, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	4313      	orrs	r3, r2
         );
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3724      	adds	r7, #36	; 0x24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr

080010b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010c4:	d301      	bcc.n	80010ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010c6:	2301      	movs	r3, #1
 80010c8:	e00f      	b.n	80010ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ca:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <SysTick_Config+0x40>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010d2:	210f      	movs	r1, #15
 80010d4:	f04f 30ff 	mov.w	r0, #4294967295
 80010d8:	f7ff ff90 	bl	8000ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <SysTick_Config+0x40>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010e2:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <SysTick_Config+0x40>)
 80010e4:	2207      	movs	r2, #7
 80010e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	e000e010 	.word	0xe000e010

080010f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff ff2d 	bl	8000f60 <__NVIC_SetPriorityGrouping>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b086      	sub	sp, #24
 8001112:	af00      	add	r7, sp, #0
 8001114:	4603      	mov	r3, r0
 8001116:	60b9      	str	r1, [r7, #8]
 8001118:	607a      	str	r2, [r7, #4]
 800111a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001120:	f7ff ff42 	bl	8000fa8 <__NVIC_GetPriorityGrouping>
 8001124:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	68b9      	ldr	r1, [r7, #8]
 800112a:	6978      	ldr	r0, [r7, #20]
 800112c:	f7ff ff90 	bl	8001050 <NVIC_EncodePriority>
 8001130:	4602      	mov	r2, r0
 8001132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001136:	4611      	mov	r1, r2
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff5f 	bl	8000ffc <__NVIC_SetPriority>
}
 800113e:	bf00      	nop
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	4603      	mov	r3, r0
 800114e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff35 	bl	8000fc4 <__NVIC_EnableIRQ>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff ffa2 	bl	80010b4 <SysTick_Config>
 8001170:	4603      	mov	r3, r0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b084      	sub	sp, #16
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001182:	2300      	movs	r3, #0
 8001184:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b02      	cmp	r3, #2
 8001190:	d005      	beq.n	800119e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2204      	movs	r2, #4
 8001196:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	73fb      	strb	r3, [r7, #15]
 800119c:	e029      	b.n	80011f2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f022 020e 	bic.w	r2, r2, #14
 80011ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f022 0201 	bic.w	r2, r2, #1
 80011bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	f003 021c 	and.w	r2, r3, #28
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ca:	2101      	movs	r1, #1
 80011cc:	fa01 f202 	lsl.w	r2, r1, r2
 80011d0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2201      	movs	r2, #1
 80011d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	4798      	blx	r3
    }
  }
  return status;
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b087      	sub	sp, #28
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001212:	e160      	b.n	80014d6 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	2101      	movs	r1, #1
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	fa01 f303 	lsl.w	r3, r1, r3
 8001220:	4013      	ands	r3, r2
 8001222:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2b00      	cmp	r3, #0
 8001228:	f000 8152 	beq.w	80014d0 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d00b      	beq.n	800124c <HAL_GPIO_Init+0x50>
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b02      	cmp	r3, #2
 800123a:	d007      	beq.n	800124c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001240:	2b11      	cmp	r3, #17
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b12      	cmp	r3, #18
 800124a:	d130      	bne.n	80012ae <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	2203      	movs	r2, #3
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001282:	2201      	movs	r2, #1
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	091b      	lsrs	r3, r3, #4
 8001298:	f003 0201 	and.w	r2, r3, #1
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	2203      	movs	r2, #3
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4013      	ands	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0xf2>
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	2b12      	cmp	r3, #18
 80012ec:	d123      	bne.n	8001336 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	08da      	lsrs	r2, r3, #3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	3208      	adds	r2, #8
 80012f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012fa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	220f      	movs	r2, #15
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	691a      	ldr	r2, [r3, #16]
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	f003 0307 	and.w	r3, r3, #7
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	08da      	lsrs	r2, r3, #3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3208      	adds	r2, #8
 8001330:	6939      	ldr	r1, [r7, #16]
 8001332:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	2203      	movs	r2, #3
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4013      	ands	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f003 0203 	and.w	r2, r3, #3
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 80ac 	beq.w	80014d0 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001378:	4b5e      	ldr	r3, [pc, #376]	; (80014f4 <HAL_GPIO_Init+0x2f8>)
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	4a5d      	ldr	r2, [pc, #372]	; (80014f4 <HAL_GPIO_Init+0x2f8>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	6213      	str	r3, [r2, #32]
 8001384:	4b5b      	ldr	r3, [pc, #364]	; (80014f4 <HAL_GPIO_Init+0x2f8>)
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001390:	4a59      	ldr	r2, [pc, #356]	; (80014f8 <HAL_GPIO_Init+0x2fc>)
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	089b      	lsrs	r3, r3, #2
 8001396:	3302      	adds	r3, #2
 8001398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	220f      	movs	r2, #15
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4013      	ands	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a51      	ldr	r2, [pc, #324]	; (80014fc <HAL_GPIO_Init+0x300>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d025      	beq.n	8001408 <HAL_GPIO_Init+0x20c>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a50      	ldr	r2, [pc, #320]	; (8001500 <HAL_GPIO_Init+0x304>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d01f      	beq.n	8001404 <HAL_GPIO_Init+0x208>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a4f      	ldr	r2, [pc, #316]	; (8001504 <HAL_GPIO_Init+0x308>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d019      	beq.n	8001400 <HAL_GPIO_Init+0x204>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4a4e      	ldr	r2, [pc, #312]	; (8001508 <HAL_GPIO_Init+0x30c>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d013      	beq.n	80013fc <HAL_GPIO_Init+0x200>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a4d      	ldr	r2, [pc, #308]	; (800150c <HAL_GPIO_Init+0x310>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d00d      	beq.n	80013f8 <HAL_GPIO_Init+0x1fc>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a4c      	ldr	r2, [pc, #304]	; (8001510 <HAL_GPIO_Init+0x314>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d007      	beq.n	80013f4 <HAL_GPIO_Init+0x1f8>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a4b      	ldr	r2, [pc, #300]	; (8001514 <HAL_GPIO_Init+0x318>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d101      	bne.n	80013f0 <HAL_GPIO_Init+0x1f4>
 80013ec:	2306      	movs	r3, #6
 80013ee:	e00c      	b.n	800140a <HAL_GPIO_Init+0x20e>
 80013f0:	2307      	movs	r3, #7
 80013f2:	e00a      	b.n	800140a <HAL_GPIO_Init+0x20e>
 80013f4:	2305      	movs	r3, #5
 80013f6:	e008      	b.n	800140a <HAL_GPIO_Init+0x20e>
 80013f8:	2304      	movs	r3, #4
 80013fa:	e006      	b.n	800140a <HAL_GPIO_Init+0x20e>
 80013fc:	2303      	movs	r3, #3
 80013fe:	e004      	b.n	800140a <HAL_GPIO_Init+0x20e>
 8001400:	2302      	movs	r3, #2
 8001402:	e002      	b.n	800140a <HAL_GPIO_Init+0x20e>
 8001404:	2301      	movs	r3, #1
 8001406:	e000      	b.n	800140a <HAL_GPIO_Init+0x20e>
 8001408:	2300      	movs	r3, #0
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	f002 0203 	and.w	r2, r2, #3
 8001410:	0092      	lsls	r2, r2, #2
 8001412:	4093      	lsls	r3, r2
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	4313      	orrs	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800141a:	4937      	ldr	r1, [pc, #220]	; (80014f8 <HAL_GPIO_Init+0x2fc>)
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	089b      	lsrs	r3, r3, #2
 8001420:	3302      	adds	r3, #2
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001428:	4b3b      	ldr	r3, [pc, #236]	; (8001518 <HAL_GPIO_Init+0x31c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	43db      	mvns	r3, r3
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4013      	ands	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d003      	beq.n	800144c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4313      	orrs	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800144c:	4a32      	ldr	r2, [pc, #200]	; (8001518 <HAL_GPIO_Init+0x31c>)
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001452:	4b31      	ldr	r3, [pc, #196]	; (8001518 <HAL_GPIO_Init+0x31c>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	43db      	mvns	r3, r3
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	4013      	ands	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4313      	orrs	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001476:	4a28      	ldr	r2, [pc, #160]	; (8001518 <HAL_GPIO_Init+0x31c>)
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800147c:	4b26      	ldr	r3, [pc, #152]	; (8001518 <HAL_GPIO_Init+0x31c>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	43db      	mvns	r3, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4013      	ands	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	4313      	orrs	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014a0:	4a1d      	ldr	r2, [pc, #116]	; (8001518 <HAL_GPIO_Init+0x31c>)
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014a6:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <HAL_GPIO_Init+0x31c>)
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	43db      	mvns	r3, r3
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	4013      	ands	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014ca:	4a13      	ldr	r2, [pc, #76]	; (8001518 <HAL_GPIO_Init+0x31c>)
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	3301      	adds	r3, #1
 80014d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	fa22 f303 	lsr.w	r3, r2, r3
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f47f ae97 	bne.w	8001214 <HAL_GPIO_Init+0x18>
  }
}
 80014e6:	bf00      	nop
 80014e8:	bf00      	nop
 80014ea:	371c      	adds	r7, #28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40010000 	.word	0x40010000
 80014fc:	40020000 	.word	0x40020000
 8001500:	40020400 	.word	0x40020400
 8001504:	40020800 	.word	0x40020800
 8001508:	40020c00 	.word	0x40020c00
 800150c:	40021000 	.word	0x40021000
 8001510:	40021400 	.word	0x40021400
 8001514:	40021800 	.word	0x40021800
 8001518:	40010400 	.word	0x40010400

0800151c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	807b      	strh	r3, [r7, #2]
 8001528:	4613      	mov	r3, r2
 800152a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800152c:	787b      	ldrb	r3, [r7, #1]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001532:	887a      	ldrh	r2, [r7, #2]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001538:	e003      	b.n	8001542 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800153a:	887b      	ldrh	r3, [r7, #2]
 800153c:	041a      	lsls	r2, r3, #16
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	619a      	str	r2, [r3, #24]
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr

0800154c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800155e:	887a      	ldrh	r2, [r7, #2]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4013      	ands	r3, r2
 8001564:	041a      	lsls	r2, r3, #16
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	43d9      	mvns	r1, r3
 800156a:	887b      	ldrh	r3, [r7, #2]
 800156c:	400b      	ands	r3, r1
 800156e:	431a      	orrs	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	619a      	str	r2, [r3, #24]
}
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr
	...

08001580 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e31d      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001592:	4b94      	ldr	r3, [pc, #592]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 030c 	and.w	r3, r3, #12
 800159a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800159c:	4b91      	ldr	r3, [pc, #580]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d07b      	beq.n	80016aa <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	2b08      	cmp	r3, #8
 80015b6:	d006      	beq.n	80015c6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	2b0c      	cmp	r3, #12
 80015bc:	d10f      	bne.n	80015de <HAL_RCC_OscConfig+0x5e>
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015c4:	d10b      	bne.n	80015de <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c6:	4b87      	ldr	r3, [pc, #540]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d06a      	beq.n	80016a8 <HAL_RCC_OscConfig+0x128>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d166      	bne.n	80016a8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e2f7      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d106      	bne.n	80015f4 <HAL_RCC_OscConfig+0x74>
 80015e6:	4b7f      	ldr	r3, [pc, #508]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a7e      	ldr	r2, [pc, #504]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 80015ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	e02d      	b.n	8001650 <HAL_RCC_OscConfig+0xd0>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d10c      	bne.n	8001616 <HAL_RCC_OscConfig+0x96>
 80015fc:	4b79      	ldr	r3, [pc, #484]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a78      	ldr	r2, [pc, #480]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 8001602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	4b76      	ldr	r3, [pc, #472]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a75      	ldr	r2, [pc, #468]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 800160e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	e01c      	b.n	8001650 <HAL_RCC_OscConfig+0xd0>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b05      	cmp	r3, #5
 800161c:	d10c      	bne.n	8001638 <HAL_RCC_OscConfig+0xb8>
 800161e:	4b71      	ldr	r3, [pc, #452]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a70      	ldr	r2, [pc, #448]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 8001624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	4b6e      	ldr	r3, [pc, #440]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a6d      	ldr	r2, [pc, #436]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 8001630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	e00b      	b.n	8001650 <HAL_RCC_OscConfig+0xd0>
 8001638:	4b6a      	ldr	r3, [pc, #424]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a69      	ldr	r2, [pc, #420]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 800163e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001642:	6013      	str	r3, [r2, #0]
 8001644:	4b67      	ldr	r3, [pc, #412]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a66      	ldr	r2, [pc, #408]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 800164a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800164e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d013      	beq.n	8001680 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001658:	f7ff fc56 	bl	8000f08 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001660:	f7ff fc52 	bl	8000f08 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b64      	cmp	r3, #100	; 0x64
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e2ad      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001672:	4b5c      	ldr	r3, [pc, #368]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f0      	beq.n	8001660 <HAL_RCC_OscConfig+0xe0>
 800167e:	e014      	b.n	80016aa <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff fc42 	bl	8000f08 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001688:	f7ff fc3e 	bl	8000f08 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b64      	cmp	r3, #100	; 0x64
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e299      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800169a:	4b52      	ldr	r3, [pc, #328]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x108>
 80016a6:	e000      	b.n	80016aa <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d05a      	beq.n	800176c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d005      	beq.n	80016c8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	2b0c      	cmp	r3, #12
 80016c0:	d119      	bne.n	80016f6 <HAL_RCC_OscConfig+0x176>
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d116      	bne.n	80016f6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c8:	4b46      	ldr	r3, [pc, #280]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <HAL_RCC_OscConfig+0x160>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d001      	beq.n	80016e0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e276      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e0:	4b40      	ldr	r3, [pc, #256]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	021b      	lsls	r3, r3, #8
 80016ee:	493d      	ldr	r1, [pc, #244]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016f4:	e03a      	b.n	800176c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d020      	beq.n	8001740 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016fe:	4b3a      	ldr	r3, [pc, #232]	; (80017e8 <HAL_RCC_OscConfig+0x268>)
 8001700:	2201      	movs	r2, #1
 8001702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001704:	f7ff fc00 	bl	8000f08 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800170c:	f7ff fbfc 	bl	8000f08 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e257      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800171e:	4b31      	ldr	r3, [pc, #196]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0f0      	beq.n	800170c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172a:	4b2e      	ldr	r3, [pc, #184]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	021b      	lsls	r3, r3, #8
 8001738:	492a      	ldr	r1, [pc, #168]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 800173a:	4313      	orrs	r3, r2
 800173c:	604b      	str	r3, [r1, #4]
 800173e:	e015      	b.n	800176c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001740:	4b29      	ldr	r3, [pc, #164]	; (80017e8 <HAL_RCC_OscConfig+0x268>)
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001746:	f7ff fbdf 	bl	8000f08 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800174e:	f7ff fbdb 	bl	8000f08 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e236      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001760:	4b20      	ldr	r3, [pc, #128]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1f0      	bne.n	800174e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0310 	and.w	r3, r3, #16
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 80b8 	beq.w	80018ea <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d170      	bne.n	8001862 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001780:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001788:	2b00      	cmp	r3, #0
 800178a:	d005      	beq.n	8001798 <HAL_RCC_OscConfig+0x218>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e21a      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a1a      	ldr	r2, [r3, #32]
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d921      	bls.n	80017ec <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f000 fc4b 	bl	8002048 <RCC_SetFlashLatencyFromMSIRange>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e208      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017bc:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	4906      	ldr	r1, [pc, #24]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017ce:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	061b      	lsls	r3, r3, #24
 80017dc:	4901      	ldr	r1, [pc, #4]	; (80017e4 <HAL_RCC_OscConfig+0x264>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	604b      	str	r3, [r1, #4]
 80017e2:	e020      	b.n	8001826 <HAL_RCC_OscConfig+0x2a6>
 80017e4:	40023800 	.word	0x40023800
 80017e8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017ec:	4ba4      	ldr	r3, [pc, #656]	; (8001a80 <HAL_RCC_OscConfig+0x500>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	49a1      	ldr	r1, [pc, #644]	; (8001a80 <HAL_RCC_OscConfig+0x500>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017fe:	4ba0      	ldr	r3, [pc, #640]	; (8001a80 <HAL_RCC_OscConfig+0x500>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	061b      	lsls	r3, r3, #24
 800180c:	499c      	ldr	r1, [pc, #624]	; (8001a80 <HAL_RCC_OscConfig+0x500>)
 800180e:	4313      	orrs	r3, r2
 8001810:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	4618      	mov	r0, r3
 8001818:	f000 fc16 	bl	8002048 <RCC_SetFlashLatencyFromMSIRange>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e1d3      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	0b5b      	lsrs	r3, r3, #13
 800182c:	3301      	adds	r3, #1
 800182e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001836:	4a92      	ldr	r2, [pc, #584]	; (8001a80 <HAL_RCC_OscConfig+0x500>)
 8001838:	6892      	ldr	r2, [r2, #8]
 800183a:	0912      	lsrs	r2, r2, #4
 800183c:	f002 020f 	and.w	r2, r2, #15
 8001840:	4990      	ldr	r1, [pc, #576]	; (8001a84 <HAL_RCC_OscConfig+0x504>)
 8001842:	5c8a      	ldrb	r2, [r1, r2]
 8001844:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001846:	4a90      	ldr	r2, [pc, #576]	; (8001a88 <HAL_RCC_OscConfig+0x508>)
 8001848:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800184a:	4b90      	ldr	r3, [pc, #576]	; (8001a8c <HAL_RCC_OscConfig+0x50c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fb0e 	bl	8000e70 <HAL_InitTick>
 8001854:	4603      	mov	r3, r0
 8001856:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d045      	beq.n	80018ea <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	e1b5      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d029      	beq.n	80018be <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800186a:	4b89      	ldr	r3, [pc, #548]	; (8001a90 <HAL_RCC_OscConfig+0x510>)
 800186c:	2201      	movs	r2, #1
 800186e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7ff fb4a 	bl	8000f08 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001878:	f7ff fb46 	bl	8000f08 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e1a1      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800188a:	4b7d      	ldr	r3, [pc, #500]	; (8001a80 <HAL_RCC_OscConfig+0x500>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0f0      	beq.n	8001878 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001896:	4b7a      	ldr	r3, [pc, #488]	; (8001a80 <HAL_RCC_OscConfig+0x500>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	4977      	ldr	r1, [pc, #476]	; (8001a80 <HAL_RCC_OscConfig+0x500>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018a8:	4b75      	ldr	r3, [pc, #468]	; (8001a80 <HAL_RCC_OscConfig+0x500>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	69db      	ldr	r3, [r3, #28]
 80018b4:	061b      	lsls	r3, r3, #24
 80018b6:	4972      	ldr	r1, [pc, #456]	; (8001a80 <HAL_RCC_OscConfig+0x500>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	604b      	str	r3, [r1, #4]
 80018bc:	e015      	b.n	80018ea <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018be:	4b74      	ldr	r3, [pc, #464]	; (8001a90 <HAL_RCC_OscConfig+0x510>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c4:	f7ff fb20 	bl	8000f08 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018cc:	f7ff fb1c 	bl	8000f08 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e177      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80018de:	4b68      	ldr	r3, [pc, #416]	; (8001a80 <HAL_RCC_OscConfig+0x500>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d030      	beq.n	8001958 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d016      	beq.n	800192c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018fe:	4b65      	ldr	r3, [pc, #404]	; (8001a94 <HAL_RCC_OscConfig+0x514>)
 8001900:	2201      	movs	r2, #1
 8001902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001904:	f7ff fb00 	bl	8000f08 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800190c:	f7ff fafc 	bl	8000f08 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e157      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800191e:	4b58      	ldr	r3, [pc, #352]	; (8001a80 <HAL_RCC_OscConfig+0x500>)
 8001920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f0      	beq.n	800190c <HAL_RCC_OscConfig+0x38c>
 800192a:	e015      	b.n	8001958 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800192c:	4b59      	ldr	r3, [pc, #356]	; (8001a94 <HAL_RCC_OscConfig+0x514>)
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001932:	f7ff fae9 	bl	8000f08 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800193a:	f7ff fae5 	bl	8000f08 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e140      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800194c:	4b4c      	ldr	r3, [pc, #304]	; (8001a80 <HAL_RCC_OscConfig+0x500>)
 800194e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1f0      	bne.n	800193a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	2b00      	cmp	r3, #0
 8001962:	f000 80b5 	beq.w	8001ad0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001966:	2300      	movs	r3, #0
 8001968:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800196a:	4b45      	ldr	r3, [pc, #276]	; (8001a80 <HAL_RCC_OscConfig+0x500>)
 800196c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10d      	bne.n	8001992 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001976:	4b42      	ldr	r3, [pc, #264]	; (8001a80 <HAL_RCC_OscConfig+0x500>)
 8001978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197a:	4a41      	ldr	r2, [pc, #260]	; (8001a80 <HAL_RCC_OscConfig+0x500>)
 800197c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001980:	6253      	str	r3, [r2, #36]	; 0x24
 8001982:	4b3f      	ldr	r3, [pc, #252]	; (8001a80 <HAL_RCC_OscConfig+0x500>)
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198a:	60bb      	str	r3, [r7, #8]
 800198c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800198e:	2301      	movs	r3, #1
 8001990:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001992:	4b41      	ldr	r3, [pc, #260]	; (8001a98 <HAL_RCC_OscConfig+0x518>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199a:	2b00      	cmp	r3, #0
 800199c:	d118      	bne.n	80019d0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800199e:	4b3e      	ldr	r3, [pc, #248]	; (8001a98 <HAL_RCC_OscConfig+0x518>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a3d      	ldr	r2, [pc, #244]	; (8001a98 <HAL_RCC_OscConfig+0x518>)
 80019a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019aa:	f7ff faad 	bl	8000f08 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019b2:	f7ff faa9 	bl	8000f08 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b64      	cmp	r3, #100	; 0x64
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e104      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c4:	4b34      	ldr	r3, [pc, #208]	; (8001a98 <HAL_RCC_OscConfig+0x518>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0f0      	beq.n	80019b2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d106      	bne.n	80019e6 <HAL_RCC_OscConfig+0x466>
 80019d8:	4b29      	ldr	r3, [pc, #164]	; (8001a80 <HAL_RCC_OscConfig+0x500>)
 80019da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019dc:	4a28      	ldr	r2, [pc, #160]	; (8001a80 <HAL_RCC_OscConfig+0x500>)
 80019de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e2:	6353      	str	r3, [r2, #52]	; 0x34
 80019e4:	e02d      	b.n	8001a42 <HAL_RCC_OscConfig+0x4c2>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10c      	bne.n	8001a08 <HAL_RCC_OscConfig+0x488>
 80019ee:	4b24      	ldr	r3, [pc, #144]	; (8001a80 <HAL_RCC_OscConfig+0x500>)
 80019f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f2:	4a23      	ldr	r2, [pc, #140]	; (8001a80 <HAL_RCC_OscConfig+0x500>)
 80019f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019f8:	6353      	str	r3, [r2, #52]	; 0x34
 80019fa:	4b21      	ldr	r3, [pc, #132]	; (8001a80 <HAL_RCC_OscConfig+0x500>)
 80019fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019fe:	4a20      	ldr	r2, [pc, #128]	; (8001a80 <HAL_RCC_OscConfig+0x500>)
 8001a00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a04:	6353      	str	r3, [r2, #52]	; 0x34
 8001a06:	e01c      	b.n	8001a42 <HAL_RCC_OscConfig+0x4c2>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	2b05      	cmp	r3, #5
 8001a0e:	d10c      	bne.n	8001a2a <HAL_RCC_OscConfig+0x4aa>
 8001a10:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <HAL_RCC_OscConfig+0x500>)
 8001a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a14:	4a1a      	ldr	r2, [pc, #104]	; (8001a80 <HAL_RCC_OscConfig+0x500>)
 8001a16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a1a:	6353      	str	r3, [r2, #52]	; 0x34
 8001a1c:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <HAL_RCC_OscConfig+0x500>)
 8001a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a20:	4a17      	ldr	r2, [pc, #92]	; (8001a80 <HAL_RCC_OscConfig+0x500>)
 8001a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a26:	6353      	str	r3, [r2, #52]	; 0x34
 8001a28:	e00b      	b.n	8001a42 <HAL_RCC_OscConfig+0x4c2>
 8001a2a:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <HAL_RCC_OscConfig+0x500>)
 8001a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a2e:	4a14      	ldr	r2, [pc, #80]	; (8001a80 <HAL_RCC_OscConfig+0x500>)
 8001a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a34:	6353      	str	r3, [r2, #52]	; 0x34
 8001a36:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <HAL_RCC_OscConfig+0x500>)
 8001a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a3a:	4a11      	ldr	r2, [pc, #68]	; (8001a80 <HAL_RCC_OscConfig+0x500>)
 8001a3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a40:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d015      	beq.n	8001a76 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4a:	f7ff fa5d 	bl	8000f08 <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a50:	e00a      	b.n	8001a68 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a52:	f7ff fa59 	bl	8000f08 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e0b2      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <HAL_RCC_OscConfig+0x500>)
 8001a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0ee      	beq.n	8001a52 <HAL_RCC_OscConfig+0x4d2>
 8001a74:	e023      	b.n	8001abe <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a76:	f7ff fa47 	bl	8000f08 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a7c:	e019      	b.n	8001ab2 <HAL_RCC_OscConfig+0x532>
 8001a7e:	bf00      	nop
 8001a80:	40023800 	.word	0x40023800
 8001a84:	0800383c 	.word	0x0800383c
 8001a88:	20000000 	.word	0x20000000
 8001a8c:	20000004 	.word	0x20000004
 8001a90:	42470020 	.word	0x42470020
 8001a94:	42470680 	.word	0x42470680
 8001a98:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a9c:	f7ff fa34 	bl	8000f08 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e08d      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ab2:	4b49      	ldr	r3, [pc, #292]	; (8001bd8 <HAL_RCC_OscConfig+0x658>)
 8001ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1ee      	bne.n	8001a9c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001abe:	7ffb      	ldrb	r3, [r7, #31]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d105      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac4:	4b44      	ldr	r3, [pc, #272]	; (8001bd8 <HAL_RCC_OscConfig+0x658>)
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	4a43      	ldr	r2, [pc, #268]	; (8001bd8 <HAL_RCC_OscConfig+0x658>)
 8001aca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ace:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d079      	beq.n	8001bcc <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	2b0c      	cmp	r3, #12
 8001adc:	d056      	beq.n	8001b8c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d13b      	bne.n	8001b5e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae6:	4b3d      	ldr	r3, [pc, #244]	; (8001bdc <HAL_RCC_OscConfig+0x65c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aec:	f7ff fa0c 	bl	8000f08 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af4:	f7ff fa08 	bl	8000f08 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e063      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b06:	4b34      	ldr	r3, [pc, #208]	; (8001bd8 <HAL_RCC_OscConfig+0x658>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f0      	bne.n	8001af4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b12:	4b31      	ldr	r3, [pc, #196]	; (8001bd8 <HAL_RCC_OscConfig+0x658>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b22:	4319      	orrs	r1, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b28:	430b      	orrs	r3, r1
 8001b2a:	492b      	ldr	r1, [pc, #172]	; (8001bd8 <HAL_RCC_OscConfig+0x658>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b30:	4b2a      	ldr	r3, [pc, #168]	; (8001bdc <HAL_RCC_OscConfig+0x65c>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b36:	f7ff f9e7 	bl	8000f08 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b3e:	f7ff f9e3 	bl	8000f08 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e03e      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b50:	4b21      	ldr	r3, [pc, #132]	; (8001bd8 <HAL_RCC_OscConfig+0x658>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0f0      	beq.n	8001b3e <HAL_RCC_OscConfig+0x5be>
 8001b5c:	e036      	b.n	8001bcc <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5e:	4b1f      	ldr	r3, [pc, #124]	; (8001bdc <HAL_RCC_OscConfig+0x65c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b64:	f7ff f9d0 	bl	8000f08 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b6c:	f7ff f9cc 	bl	8000f08 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e027      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b7e:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <HAL_RCC_OscConfig+0x658>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x5ec>
 8001b8a:	e01f      	b.n	8001bcc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d101      	bne.n	8001b98 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e01a      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b98:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <HAL_RCC_OscConfig+0x658>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d10d      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d106      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d001      	beq.n	8001bcc <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e000      	b.n	8001bce <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3720      	adds	r7, #32
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	42470060 	.word	0x42470060

08001be0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e11a      	b.n	8001e2a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bf4:	4b8f      	ldr	r3, [pc, #572]	; (8001e34 <HAL_RCC_ClockConfig+0x254>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d919      	bls.n	8001c36 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d105      	bne.n	8001c14 <HAL_RCC_ClockConfig+0x34>
 8001c08:	4b8a      	ldr	r3, [pc, #552]	; (8001e34 <HAL_RCC_ClockConfig+0x254>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a89      	ldr	r2, [pc, #548]	; (8001e34 <HAL_RCC_ClockConfig+0x254>)
 8001c0e:	f043 0304 	orr.w	r3, r3, #4
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	4b87      	ldr	r3, [pc, #540]	; (8001e34 <HAL_RCC_ClockConfig+0x254>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f023 0201 	bic.w	r2, r3, #1
 8001c1c:	4985      	ldr	r1, [pc, #532]	; (8001e34 <HAL_RCC_ClockConfig+0x254>)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c24:	4b83      	ldr	r3, [pc, #524]	; (8001e34 <HAL_RCC_ClockConfig+0x254>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d001      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e0f9      	b.n	8001e2a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d008      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c42:	4b7d      	ldr	r3, [pc, #500]	; (8001e38 <HAL_RCC_ClockConfig+0x258>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	497a      	ldr	r1, [pc, #488]	; (8001e38 <HAL_RCC_ClockConfig+0x258>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 808e 	beq.w	8001d7e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d107      	bne.n	8001c7a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c6a:	4b73      	ldr	r3, [pc, #460]	; (8001e38 <HAL_RCC_ClockConfig+0x258>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d121      	bne.n	8001cba <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e0d7      	b.n	8001e2a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b03      	cmp	r3, #3
 8001c80:	d107      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c82:	4b6d      	ldr	r3, [pc, #436]	; (8001e38 <HAL_RCC_ClockConfig+0x258>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d115      	bne.n	8001cba <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e0cb      	b.n	8001e2a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d107      	bne.n	8001caa <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c9a:	4b67      	ldr	r3, [pc, #412]	; (8001e38 <HAL_RCC_ClockConfig+0x258>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d109      	bne.n	8001cba <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e0bf      	b.n	8001e2a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001caa:	4b63      	ldr	r3, [pc, #396]	; (8001e38 <HAL_RCC_ClockConfig+0x258>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e0b7      	b.n	8001e2a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cba:	4b5f      	ldr	r3, [pc, #380]	; (8001e38 <HAL_RCC_ClockConfig+0x258>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f023 0203 	bic.w	r2, r3, #3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	495c      	ldr	r1, [pc, #368]	; (8001e38 <HAL_RCC_ClockConfig+0x258>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ccc:	f7ff f91c 	bl	8000f08 <HAL_GetTick>
 8001cd0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d112      	bne.n	8001d00 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cda:	e00a      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cdc:	f7ff f914 	bl	8000f08 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e09b      	b.n	8001e2a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cf2:	4b51      	ldr	r3, [pc, #324]	; (8001e38 <HAL_RCC_ClockConfig+0x258>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 030c 	and.w	r3, r3, #12
 8001cfa:	2b08      	cmp	r3, #8
 8001cfc:	d1ee      	bne.n	8001cdc <HAL_RCC_ClockConfig+0xfc>
 8001cfe:	e03e      	b.n	8001d7e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	d112      	bne.n	8001d2e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d08:	e00a      	b.n	8001d20 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d0a:	f7ff f8fd 	bl	8000f08 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e084      	b.n	8001e2a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d20:	4b45      	ldr	r3, [pc, #276]	; (8001e38 <HAL_RCC_ClockConfig+0x258>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 030c 	and.w	r3, r3, #12
 8001d28:	2b0c      	cmp	r3, #12
 8001d2a:	d1ee      	bne.n	8001d0a <HAL_RCC_ClockConfig+0x12a>
 8001d2c:	e027      	b.n	8001d7e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d11d      	bne.n	8001d72 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d36:	e00a      	b.n	8001d4e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d38:	f7ff f8e6 	bl	8000f08 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e06d      	b.n	8001e2a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d4e:	4b3a      	ldr	r3, [pc, #232]	; (8001e38 <HAL_RCC_ClockConfig+0x258>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 030c 	and.w	r3, r3, #12
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	d1ee      	bne.n	8001d38 <HAL_RCC_ClockConfig+0x158>
 8001d5a:	e010      	b.n	8001d7e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d5c:	f7ff f8d4 	bl	8000f08 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e05b      	b.n	8001e2a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d72:	4b31      	ldr	r3, [pc, #196]	; (8001e38 <HAL_RCC_ClockConfig+0x258>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 030c 	and.w	r3, r3, #12
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1ee      	bne.n	8001d5c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d7e:	4b2d      	ldr	r3, [pc, #180]	; (8001e34 <HAL_RCC_ClockConfig+0x254>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d219      	bcs.n	8001dc0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d105      	bne.n	8001d9e <HAL_RCC_ClockConfig+0x1be>
 8001d92:	4b28      	ldr	r3, [pc, #160]	; (8001e34 <HAL_RCC_ClockConfig+0x254>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a27      	ldr	r2, [pc, #156]	; (8001e34 <HAL_RCC_ClockConfig+0x254>)
 8001d98:	f043 0304 	orr.w	r3, r3, #4
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	4b25      	ldr	r3, [pc, #148]	; (8001e34 <HAL_RCC_ClockConfig+0x254>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f023 0201 	bic.w	r2, r3, #1
 8001da6:	4923      	ldr	r1, [pc, #140]	; (8001e34 <HAL_RCC_ClockConfig+0x254>)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dae:	4b21      	ldr	r3, [pc, #132]	; (8001e34 <HAL_RCC_ClockConfig+0x254>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d001      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e034      	b.n	8001e2a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d008      	beq.n	8001dde <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dcc:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <HAL_RCC_ClockConfig+0x258>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	4917      	ldr	r1, [pc, #92]	; (8001e38 <HAL_RCC_ClockConfig+0x258>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d009      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dea:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <HAL_RCC_ClockConfig+0x258>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	490f      	ldr	r1, [pc, #60]	; (8001e38 <HAL_RCC_ClockConfig+0x258>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dfe:	f000 f823 	bl	8001e48 <HAL_RCC_GetSysClockFreq>
 8001e02:	4602      	mov	r2, r0
 8001e04:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <HAL_RCC_ClockConfig+0x258>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	091b      	lsrs	r3, r3, #4
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	490b      	ldr	r1, [pc, #44]	; (8001e3c <HAL_RCC_ClockConfig+0x25c>)
 8001e10:	5ccb      	ldrb	r3, [r1, r3]
 8001e12:	fa22 f303 	lsr.w	r3, r2, r3
 8001e16:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <HAL_RCC_ClockConfig+0x260>)
 8001e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e1a:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <HAL_RCC_ClockConfig+0x264>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff f826 	bl	8000e70 <HAL_InitTick>
 8001e24:	4603      	mov	r3, r0
 8001e26:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e28:	7afb      	ldrb	r3, [r7, #11]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40023c00 	.word	0x40023c00
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	0800383c 	.word	0x0800383c
 8001e40:	20000000 	.word	0x20000000
 8001e44:	20000004 	.word	0x20000004

08001e48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e48:	b5b0      	push	{r4, r5, r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001e4e:	4b61      	ldr	r3, [pc, #388]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x18c>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f003 030c 	and.w	r3, r3, #12
 8001e5a:	2b0c      	cmp	r3, #12
 8001e5c:	d00d      	beq.n	8001e7a <HAL_RCC_GetSysClockFreq+0x32>
 8001e5e:	2b0c      	cmp	r3, #12
 8001e60:	f200 80a4 	bhi.w	8001fac <HAL_RCC_GetSysClockFreq+0x164>
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d002      	beq.n	8001e6e <HAL_RCC_GetSysClockFreq+0x26>
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	d003      	beq.n	8001e74 <HAL_RCC_GetSysClockFreq+0x2c>
 8001e6c:	e09e      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e6e:	4b5a      	ldr	r3, [pc, #360]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x190>)
 8001e70:	613b      	str	r3, [r7, #16]
      break;
 8001e72:	e0a9      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e74:	4b59      	ldr	r3, [pc, #356]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x194>)
 8001e76:	613b      	str	r3, [r7, #16]
      break;
 8001e78:	e0a6      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	0c9b      	lsrs	r3, r3, #18
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	4a57      	ldr	r2, [pc, #348]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x198>)
 8001e84:	5cd3      	ldrb	r3, [r2, r3]
 8001e86:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	0d9b      	lsrs	r3, r3, #22
 8001e8c:	f003 0303 	and.w	r3, r3, #3
 8001e90:	3301      	adds	r3, #1
 8001e92:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e94:	4b4f      	ldr	r3, [pc, #316]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x18c>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d041      	beq.n	8001f24 <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	461c      	mov	r4, r3
 8001ea4:	f04f 0500 	mov.w	r5, #0
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	4629      	mov	r1, r5
 8001eac:	f04f 0200 	mov.w	r2, #0
 8001eb0:	f04f 0300 	mov.w	r3, #0
 8001eb4:	014b      	lsls	r3, r1, #5
 8001eb6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001eba:	0142      	lsls	r2, r0, #5
 8001ebc:	4610      	mov	r0, r2
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	1b00      	subs	r0, r0, r4
 8001ec2:	eb61 0105 	sbc.w	r1, r1, r5
 8001ec6:	f04f 0200 	mov.w	r2, #0
 8001eca:	f04f 0300 	mov.w	r3, #0
 8001ece:	018b      	lsls	r3, r1, #6
 8001ed0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ed4:	0182      	lsls	r2, r0, #6
 8001ed6:	1a12      	subs	r2, r2, r0
 8001ed8:	eb63 0301 	sbc.w	r3, r3, r1
 8001edc:	f04f 0000 	mov.w	r0, #0
 8001ee0:	f04f 0100 	mov.w	r1, #0
 8001ee4:	00d9      	lsls	r1, r3, #3
 8001ee6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001eea:	00d0      	lsls	r0, r2, #3
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	1912      	adds	r2, r2, r4
 8001ef2:	eb45 0303 	adc.w	r3, r5, r3
 8001ef6:	f04f 0000 	mov.w	r0, #0
 8001efa:	f04f 0100 	mov.w	r1, #0
 8001efe:	0259      	lsls	r1, r3, #9
 8001f00:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001f04:	0250      	lsls	r0, r2, #9
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	4610      	mov	r0, r2
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	461a      	mov	r2, r3
 8001f12:	f04f 0300 	mov.w	r3, #0
 8001f16:	f7fe f939 	bl	800018c <__aeabi_uldivmod>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	4613      	mov	r3, r2
 8001f20:	617b      	str	r3, [r7, #20]
 8001f22:	e040      	b.n	8001fa6 <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	461c      	mov	r4, r3
 8001f28:	f04f 0500 	mov.w	r5, #0
 8001f2c:	4620      	mov	r0, r4
 8001f2e:	4629      	mov	r1, r5
 8001f30:	f04f 0200 	mov.w	r2, #0
 8001f34:	f04f 0300 	mov.w	r3, #0
 8001f38:	014b      	lsls	r3, r1, #5
 8001f3a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f3e:	0142      	lsls	r2, r0, #5
 8001f40:	4610      	mov	r0, r2
 8001f42:	4619      	mov	r1, r3
 8001f44:	1b00      	subs	r0, r0, r4
 8001f46:	eb61 0105 	sbc.w	r1, r1, r5
 8001f4a:	f04f 0200 	mov.w	r2, #0
 8001f4e:	f04f 0300 	mov.w	r3, #0
 8001f52:	018b      	lsls	r3, r1, #6
 8001f54:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f58:	0182      	lsls	r2, r0, #6
 8001f5a:	1a12      	subs	r2, r2, r0
 8001f5c:	eb63 0301 	sbc.w	r3, r3, r1
 8001f60:	f04f 0000 	mov.w	r0, #0
 8001f64:	f04f 0100 	mov.w	r1, #0
 8001f68:	00d9      	lsls	r1, r3, #3
 8001f6a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f6e:	00d0      	lsls	r0, r2, #3
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	1912      	adds	r2, r2, r4
 8001f76:	eb45 0303 	adc.w	r3, r5, r3
 8001f7a:	f04f 0000 	mov.w	r0, #0
 8001f7e:	f04f 0100 	mov.w	r1, #0
 8001f82:	0299      	lsls	r1, r3, #10
 8001f84:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001f88:	0290      	lsls	r0, r2, #10
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	4610      	mov	r0, r2
 8001f90:	4619      	mov	r1, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	461a      	mov	r2, r3
 8001f96:	f04f 0300 	mov.w	r3, #0
 8001f9a:	f7fe f8f7 	bl	800018c <__aeabi_uldivmod>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	613b      	str	r3, [r7, #16]
      break;
 8001faa:	e00d      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001fac:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x18c>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	0b5b      	lsrs	r3, r3, #13
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	613b      	str	r3, [r7, #16]
      break;
 8001fc6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fc8:	693b      	ldr	r3, [r7, #16]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bdb0      	pop	{r4, r5, r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	00f42400 	.word	0x00f42400
 8001fdc:	007a1200 	.word	0x007a1200
 8001fe0:	08003830 	.word	0x08003830

08001fe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fe8:	4b02      	ldr	r3, [pc, #8]	; (8001ff4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fea:	681b      	ldr	r3, [r3, #0]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr
 8001ff4:	20000000 	.word	0x20000000

08001ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ffc:	f7ff fff2 	bl	8001fe4 <HAL_RCC_GetHCLKFreq>
 8002000:	4602      	mov	r2, r0
 8002002:	4b05      	ldr	r3, [pc, #20]	; (8002018 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	0a1b      	lsrs	r3, r3, #8
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	4903      	ldr	r1, [pc, #12]	; (800201c <HAL_RCC_GetPCLK1Freq+0x24>)
 800200e:	5ccb      	ldrb	r3, [r1, r3]
 8002010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002014:	4618      	mov	r0, r3
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40023800 	.word	0x40023800
 800201c:	0800384c 	.word	0x0800384c

08002020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002024:	f7ff ffde 	bl	8001fe4 <HAL_RCC_GetHCLKFreq>
 8002028:	4602      	mov	r2, r0
 800202a:	4b05      	ldr	r3, [pc, #20]	; (8002040 <HAL_RCC_GetPCLK2Freq+0x20>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	0adb      	lsrs	r3, r3, #11
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	4903      	ldr	r1, [pc, #12]	; (8002044 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002036:	5ccb      	ldrb	r3, [r1, r3]
 8002038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800203c:	4618      	mov	r0, r3
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40023800 	.word	0x40023800
 8002044:	0800384c 	.word	0x0800384c

08002048 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002048:	b480      	push	{r7}
 800204a:	b087      	sub	sp, #28
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002050:	2300      	movs	r3, #0
 8002052:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002054:	4b29      	ldr	r3, [pc, #164]	; (80020fc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d12c      	bne.n	80020ba <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002060:	4b26      	ldr	r3, [pc, #152]	; (80020fc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d005      	beq.n	8002078 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800206c:	4b24      	ldr	r3, [pc, #144]	; (8002100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002074:	617b      	str	r3, [r7, #20]
 8002076:	e016      	b.n	80020a6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002078:	4b20      	ldr	r3, [pc, #128]	; (80020fc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	4a1f      	ldr	r2, [pc, #124]	; (80020fc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800207e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002082:	6253      	str	r3, [r2, #36]	; 0x24
 8002084:	4b1d      	ldr	r3, [pc, #116]	; (80020fc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002090:	4b1b      	ldr	r3, [pc, #108]	; (8002100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002098:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800209a:	4b18      	ldr	r3, [pc, #96]	; (80020fc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	4a17      	ldr	r2, [pc, #92]	; (80020fc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80020a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a4:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80020ac:	d105      	bne.n	80020ba <RCC_SetFlashLatencyFromMSIRange+0x72>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80020b4:	d101      	bne.n	80020ba <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80020b6:	2301      	movs	r3, #1
 80020b8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d105      	bne.n	80020cc <RCC_SetFlashLatencyFromMSIRange+0x84>
 80020c0:	4b10      	ldr	r3, [pc, #64]	; (8002104 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a0f      	ldr	r2, [pc, #60]	; (8002104 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020c6:	f043 0304 	orr.w	r3, r3, #4
 80020ca:	6013      	str	r3, [r2, #0]
 80020cc:	4b0d      	ldr	r3, [pc, #52]	; (8002104 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f023 0201 	bic.w	r2, r3, #1
 80020d4:	490b      	ldr	r1, [pc, #44]	; (8002104 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020dc:	4b09      	ldr	r3, [pc, #36]	; (8002104 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d001      	beq.n	80020ee <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	371c      	adds	r7, #28
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40023800 	.word	0x40023800
 8002100:	40007000 	.word	0x40007000
 8002104:	40023c00 	.word	0x40023c00

08002108 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e03f      	b.n	800219a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d106      	bne.n	8002134 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7fe fd02 	bl	8000b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2224      	movs	r2, #36	; 0x24
 8002138:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68da      	ldr	r2, [r3, #12]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800214a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 fc83 	bl	8002a58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	691a      	ldr	r2, [r3, #16]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002160:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	695a      	ldr	r2, [r3, #20]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002170:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68da      	ldr	r2, [r3, #12]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002180:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2220      	movs	r2, #32
 800218c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2220      	movs	r2, #32
 8002194:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b088      	sub	sp, #32
 80021a6:	af02      	add	r7, sp, #8
 80021a8:	60f8      	str	r0, [r7, #12]
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	603b      	str	r3, [r7, #0]
 80021ae:	4613      	mov	r3, r2
 80021b0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b20      	cmp	r3, #32
 80021c0:	f040 8083 	bne.w	80022ca <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d002      	beq.n	80021d0 <HAL_UART_Transmit+0x2e>
 80021ca:	88fb      	ldrh	r3, [r7, #6]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e07b      	b.n	80022cc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d101      	bne.n	80021e2 <HAL_UART_Transmit+0x40>
 80021de:	2302      	movs	r3, #2
 80021e0:	e074      	b.n	80022cc <HAL_UART_Transmit+0x12a>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2221      	movs	r2, #33	; 0x21
 80021f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80021f8:	f7fe fe86 	bl	8000f08 <HAL_GetTick>
 80021fc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	88fa      	ldrh	r2, [r7, #6]
 8002202:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	88fa      	ldrh	r2, [r7, #6]
 8002208:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002212:	e042      	b.n	800229a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002218:	b29b      	uxth	r3, r3
 800221a:	3b01      	subs	r3, #1
 800221c:	b29a      	uxth	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800222a:	d122      	bne.n	8002272 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	2200      	movs	r2, #0
 8002234:	2180      	movs	r1, #128	; 0x80
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f000 faa5 	bl	8002786 <UART_WaitOnFlagUntilTimeout>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e042      	b.n	80022cc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002258:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d103      	bne.n	800226a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	3302      	adds	r3, #2
 8002266:	60bb      	str	r3, [r7, #8]
 8002268:	e017      	b.n	800229a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	3301      	adds	r3, #1
 800226e:	60bb      	str	r3, [r7, #8]
 8002270:	e013      	b.n	800229a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	2200      	movs	r2, #0
 800227a:	2180      	movs	r1, #128	; 0x80
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 fa82 	bl	8002786 <UART_WaitOnFlagUntilTimeout>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e01f      	b.n	80022cc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	1c5a      	adds	r2, r3, #1
 8002290:	60ba      	str	r2, [r7, #8]
 8002292:	781a      	ldrb	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800229e:	b29b      	uxth	r3, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1b7      	bne.n	8002214 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	2200      	movs	r2, #0
 80022ac:	2140      	movs	r1, #64	; 0x40
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f000 fa69 	bl	8002786 <UART_WaitOnFlagUntilTimeout>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e006      	b.n	80022cc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2220      	movs	r2, #32
 80022c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80022c6:	2300      	movs	r3, #0
 80022c8:	e000      	b.n	80022cc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80022ca:	2302      	movs	r3, #2
  }
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af02      	add	r7, sp, #8
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	603b      	str	r3, [r7, #0]
 80022e0:	4613      	mov	r3, r2
 80022e2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2b20      	cmp	r3, #32
 80022f2:	f040 8090 	bne.w	8002416 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d002      	beq.n	8002302 <HAL_UART_Receive+0x2e>
 80022fc:	88fb      	ldrh	r3, [r7, #6]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e088      	b.n	8002418 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800230c:	2b01      	cmp	r3, #1
 800230e:	d101      	bne.n	8002314 <HAL_UART_Receive+0x40>
 8002310:	2302      	movs	r3, #2
 8002312:	e081      	b.n	8002418 <HAL_UART_Receive+0x144>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2222      	movs	r2, #34	; 0x22
 8002326:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800232a:	f7fe fded 	bl	8000f08 <HAL_GetTick>
 800232e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	88fa      	ldrh	r2, [r7, #6]
 8002334:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	88fa      	ldrh	r2, [r7, #6]
 800233a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002344:	e05c      	b.n	8002400 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800234a:	b29b      	uxth	r3, r3
 800234c:	3b01      	subs	r3, #1
 800234e:	b29a      	uxth	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800235c:	d12b      	bne.n	80023b6 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	2200      	movs	r2, #0
 8002366:	2120      	movs	r1, #32
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f000 fa0c 	bl	8002786 <UART_WaitOnFlagUntilTimeout>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e04f      	b.n	8002418 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10c      	bne.n	800239e <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	b29b      	uxth	r3, r3
 800238c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002390:	b29a      	uxth	r2, r3
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	3302      	adds	r3, #2
 800239a:	60bb      	str	r3, [r7, #8]
 800239c:	e030      	b.n	8002400 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	3301      	adds	r3, #1
 80023b2:	60bb      	str	r3, [r7, #8]
 80023b4:	e024      	b.n	8002400 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	2200      	movs	r2, #0
 80023be:	2120      	movs	r1, #32
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 f9e0 	bl	8002786 <UART_WaitOnFlagUntilTimeout>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e023      	b.n	8002418 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d108      	bne.n	80023ea <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6859      	ldr	r1, [r3, #4]
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	60ba      	str	r2, [r7, #8]
 80023e4:	b2ca      	uxtb	r2, r1
 80023e6:	701a      	strb	r2, [r3, #0]
 80023e8:	e00a      	b.n	8002400 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	1c59      	adds	r1, r3, #1
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002404:	b29b      	uxth	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d19d      	bne.n	8002346 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2220      	movs	r2, #32
 800240e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8002412:	2300      	movs	r3, #0
 8002414:	e000      	b.n	8002418 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8002416:	2302      	movs	r3, #2
  }
}
 8002418:	4618      	mov	r0, r3
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	4613      	mov	r3, r2
 800242c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b20      	cmp	r3, #32
 8002438:	d130      	bne.n	800249c <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d002      	beq.n	8002446 <HAL_UART_Transmit_IT+0x26>
 8002440:	88fb      	ldrh	r3, [r7, #6]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e029      	b.n	800249e <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002450:	2b01      	cmp	r3, #1
 8002452:	d101      	bne.n	8002458 <HAL_UART_Transmit_IT+0x38>
 8002454:	2302      	movs	r3, #2
 8002456:	e022      	b.n	800249e <HAL_UART_Transmit_IT+0x7e>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	88fa      	ldrh	r2, [r7, #6]
 800246a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	88fa      	ldrh	r2, [r7, #6]
 8002470:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2221      	movs	r2, #33	; 0x21
 800247c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002496:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	e000      	b.n	800249e <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800249c:	2302      	movs	r3, #2
  }
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr

080024a8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	4613      	mov	r3, r2
 80024b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b20      	cmp	r3, #32
 80024c0:	d140      	bne.n	8002544 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d002      	beq.n	80024ce <HAL_UART_Receive_IT+0x26>
 80024c8:	88fb      	ldrh	r3, [r7, #6]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e039      	b.n	8002546 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d101      	bne.n	80024e0 <HAL_UART_Receive_IT+0x38>
 80024dc:	2302      	movs	r3, #2
 80024de:	e032      	b.n	8002546 <HAL_UART_Receive_IT+0x9e>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	88fa      	ldrh	r2, [r7, #6]
 80024f2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	88fa      	ldrh	r2, [r7, #6]
 80024f8:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2222      	movs	r2, #34	; 0x22
 8002504:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800251e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	695a      	ldr	r2, [r3, #20]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0201 	orr.w	r2, r2, #1
 800252e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68da      	ldr	r2, [r3, #12]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0220 	orr.w	r2, r2, #32
 800253e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	e000      	b.n	8002546 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002544:	2302      	movs	r3, #2
  }
}
 8002546:	4618      	mov	r0, r3
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr

08002550 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b088      	sub	sp, #32
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002570:	2300      	movs	r3, #0
 8002572:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002574:	2300      	movs	r3, #0
 8002576:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10d      	bne.n	80025a2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	f003 0320 	and.w	r3, r3, #32
 800258c:	2b00      	cmp	r3, #0
 800258e:	d008      	beq.n	80025a2 <HAL_UART_IRQHandler+0x52>
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	f003 0320 	and.w	r3, r3, #32
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f9db 	bl	8002956 <UART_Receive_IT>
      return;
 80025a0:	e0d0      	b.n	8002744 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 80b0 	beq.w	800270a <HAL_UART_IRQHandler+0x1ba>
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d105      	bne.n	80025c0 <HAL_UART_IRQHandler+0x70>
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 80a5 	beq.w	800270a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00a      	beq.n	80025e0 <HAL_UART_IRQHandler+0x90>
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d005      	beq.n	80025e0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d8:	f043 0201 	orr.w	r2, r3, #1
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00a      	beq.n	8002600 <HAL_UART_IRQHandler+0xb0>
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d005      	beq.n	8002600 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f8:	f043 0202 	orr.w	r2, r3, #2
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00a      	beq.n	8002620 <HAL_UART_IRQHandler+0xd0>
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002618:	f043 0204 	orr.w	r2, r3, #4
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	f003 0308 	and.w	r3, r3, #8
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00f      	beq.n	800264a <HAL_UART_IRQHandler+0xfa>
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	f003 0320 	and.w	r3, r3, #32
 8002630:	2b00      	cmp	r3, #0
 8002632:	d104      	bne.n	800263e <HAL_UART_IRQHandler+0xee>
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d005      	beq.n	800264a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002642:	f043 0208 	orr.w	r2, r3, #8
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264e:	2b00      	cmp	r3, #0
 8002650:	d077      	beq.n	8002742 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	f003 0320 	and.w	r3, r3, #32
 8002658:	2b00      	cmp	r3, #0
 800265a:	d007      	beq.n	800266c <HAL_UART_IRQHandler+0x11c>
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	f003 0320 	and.w	r3, r3, #32
 8002662:	2b00      	cmp	r3, #0
 8002664:	d002      	beq.n	800266c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f975 	bl	8002956 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002676:	2b40      	cmp	r3, #64	; 0x40
 8002678:	bf0c      	ite	eq
 800267a:	2301      	moveq	r3, #1
 800267c:	2300      	movne	r3, #0
 800267e:	b2db      	uxtb	r3, r3
 8002680:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	2b00      	cmp	r3, #0
 800268c:	d102      	bne.n	8002694 <HAL_UART_IRQHandler+0x144>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d031      	beq.n	80026f8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 f8c0 	bl	800281a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a4:	2b40      	cmp	r3, #64	; 0x40
 80026a6:	d123      	bne.n	80026f0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	695a      	ldr	r2, [r3, #20]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026b6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d013      	beq.n	80026e8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c4:	4a21      	ldr	r2, [pc, #132]	; (800274c <HAL_UART_IRQHandler+0x1fc>)
 80026c6:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fe fd54 	bl	800117a <HAL_DMA_Abort_IT>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d016      	beq.n	8002706 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026e2:	4610      	mov	r0, r2
 80026e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e6:	e00e      	b.n	8002706 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 f843 	bl	8002774 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026ee:	e00a      	b.n	8002706 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 f83f 	bl	8002774 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026f6:	e006      	b.n	8002706 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 f83b 	bl	8002774 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002704:	e01d      	b.n	8002742 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002706:	bf00      	nop
    return;
 8002708:	e01b      	b.n	8002742 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002710:	2b00      	cmp	r3, #0
 8002712:	d008      	beq.n	8002726 <HAL_UART_IRQHandler+0x1d6>
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f8ac 	bl	800287c <UART_Transmit_IT>
    return;
 8002724:	e00e      	b.n	8002744 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800272c:	2b00      	cmp	r3, #0
 800272e:	d009      	beq.n	8002744 <HAL_UART_IRQHandler+0x1f4>
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002736:	2b00      	cmp	r3, #0
 8002738:	d004      	beq.n	8002744 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f8f3 	bl	8002926 <UART_EndTransmit_IT>
    return;
 8002740:	e000      	b.n	8002744 <HAL_UART_IRQHandler+0x1f4>
    return;
 8002742:	bf00      	nop
  }
}
 8002744:	3720      	adds	r7, #32
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	08002855 	.word	0x08002855

08002750 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr

08002762 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr

08002774 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr

08002786 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b084      	sub	sp, #16
 800278a:	af00      	add	r7, sp, #0
 800278c:	60f8      	str	r0, [r7, #12]
 800278e:	60b9      	str	r1, [r7, #8]
 8002790:	603b      	str	r3, [r7, #0]
 8002792:	4613      	mov	r3, r2
 8002794:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002796:	e02c      	b.n	80027f2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800279e:	d028      	beq.n	80027f2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d007      	beq.n	80027b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80027a6:	f7fe fbaf 	bl	8000f08 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d21d      	bcs.n	80027f2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68da      	ldr	r2, [r3, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80027c4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	695a      	ldr	r2, [r3, #20]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0201 	bic.w	r2, r2, #1
 80027d4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2220      	movs	r2, #32
 80027da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2220      	movs	r2, #32
 80027e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e00f      	b.n	8002812 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	4013      	ands	r3, r2
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	429a      	cmp	r2, r3
 8002800:	bf0c      	ite	eq
 8002802:	2301      	moveq	r3, #1
 8002804:	2300      	movne	r3, #0
 8002806:	b2db      	uxtb	r3, r3
 8002808:	461a      	mov	r2, r3
 800280a:	79fb      	ldrb	r3, [r7, #7]
 800280c:	429a      	cmp	r2, r3
 800280e:	d0c3      	beq.n	8002798 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68da      	ldr	r2, [r3, #12]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002830:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	695a      	ldr	r2, [r3, #20]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 0201 	bic.w	r2, r2, #1
 8002840:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2220      	movs	r2, #32
 8002846:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr

08002854 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f7ff ff80 	bl	8002774 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002874:	bf00      	nop
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b21      	cmp	r3, #33	; 0x21
 800288e:	d144      	bne.n	800291a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002898:	d11a      	bne.n	80028d0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	461a      	mov	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028ae:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d105      	bne.n	80028c4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	1c9a      	adds	r2, r3, #2
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	621a      	str	r2, [r3, #32]
 80028c2:	e00e      	b.n	80028e2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	621a      	str	r2, [r3, #32]
 80028ce:	e008      	b.n	80028e2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	1c59      	adds	r1, r3, #1
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6211      	str	r1, [r2, #32]
 80028da:	781a      	ldrb	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	4619      	mov	r1, r3
 80028f0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10f      	bne.n	8002916 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002904:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002914:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002916:	2300      	movs	r3, #0
 8002918:	e000      	b.n	800291c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800291a:	2302      	movs	r3, #2
  }
}
 800291c:	4618      	mov	r0, r3
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr

08002926 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800293c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2220      	movs	r2, #32
 8002942:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7ff ff02 	bl	8002750 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b084      	sub	sp, #16
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b22      	cmp	r3, #34	; 0x22
 8002968:	d171      	bne.n	8002a4e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002972:	d123      	bne.n	80029bc <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002978:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10e      	bne.n	80029a0 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	b29b      	uxth	r3, r3
 800298a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002998:	1c9a      	adds	r2, r3, #2
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	629a      	str	r2, [r3, #40]	; 0x28
 800299e:	e029      	b.n	80029f4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	629a      	str	r2, [r3, #40]	; 0x28
 80029ba:	e01b      	b.n	80029f4 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10a      	bne.n	80029da <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6858      	ldr	r0, [r3, #4]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ce:	1c59      	adds	r1, r3, #1
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6291      	str	r1, [r2, #40]	; 0x28
 80029d4:	b2c2      	uxtb	r2, r0
 80029d6:	701a      	strb	r2, [r3, #0]
 80029d8:	e00c      	b.n	80029f4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e6:	1c58      	adds	r0, r3, #1
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	6288      	str	r0, [r1, #40]	; 0x28
 80029ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	3b01      	subs	r3, #1
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	4619      	mov	r1, r3
 8002a02:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d120      	bne.n	8002a4a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 0220 	bic.w	r2, r2, #32
 8002a16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695a      	ldr	r2, [r3, #20]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0201 	bic.w	r2, r2, #1
 8002a36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff fe8e 	bl	8002762 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002a46:	2300      	movs	r3, #0
 8002a48:	e002      	b.n	8002a50 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	e000      	b.n	8002a50 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002a4e:	2302      	movs	r3, #2
  }
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689a      	ldr	r2, [r3, #8]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	431a      	orrs	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002a98:	f023 030c 	bic.w	r3, r3, #12
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6812      	ldr	r2, [r2, #0]
 8002aa0:	68b9      	ldr	r1, [r7, #8]
 8002aa2:	430b      	orrs	r3, r1
 8002aa4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	699a      	ldr	r2, [r3, #24]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a55      	ldr	r2, [pc, #340]	; (8002c18 <UART_SetConfig+0x1c0>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d103      	bne.n	8002ace <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ac6:	f7ff faab 	bl	8002020 <HAL_RCC_GetPCLK2Freq>
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	e002      	b.n	8002ad4 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ace:	f7ff fa93 	bl	8001ff8 <HAL_RCC_GetPCLK1Freq>
 8002ad2:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002adc:	d14c      	bne.n	8002b78 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	009a      	lsls	r2, r3, #2
 8002ae8:	441a      	add	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af4:	4a49      	ldr	r2, [pc, #292]	; (8002c1c <UART_SetConfig+0x1c4>)
 8002af6:	fba2 2303 	umull	r2, r3, r2, r3
 8002afa:	095b      	lsrs	r3, r3, #5
 8002afc:	0119      	lsls	r1, r3, #4
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	009a      	lsls	r2, r3, #2
 8002b08:	441a      	add	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b14:	4b41      	ldr	r3, [pc, #260]	; (8002c1c <UART_SetConfig+0x1c4>)
 8002b16:	fba3 0302 	umull	r0, r3, r3, r2
 8002b1a:	095b      	lsrs	r3, r3, #5
 8002b1c:	2064      	movs	r0, #100	; 0x64
 8002b1e:	fb00 f303 	mul.w	r3, r0, r3
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	3332      	adds	r3, #50	; 0x32
 8002b28:	4a3c      	ldr	r2, [pc, #240]	; (8002c1c <UART_SetConfig+0x1c4>)
 8002b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2e:	095b      	lsrs	r3, r3, #5
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b36:	4419      	add	r1, r3
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	009a      	lsls	r2, r3, #2
 8002b42:	441a      	add	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b4e:	4b33      	ldr	r3, [pc, #204]	; (8002c1c <UART_SetConfig+0x1c4>)
 8002b50:	fba3 0302 	umull	r0, r3, r3, r2
 8002b54:	095b      	lsrs	r3, r3, #5
 8002b56:	2064      	movs	r0, #100	; 0x64
 8002b58:	fb00 f303 	mul.w	r3, r0, r3
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	3332      	adds	r3, #50	; 0x32
 8002b62:	4a2e      	ldr	r2, [pc, #184]	; (8002c1c <UART_SetConfig+0x1c4>)
 8002b64:	fba2 2303 	umull	r2, r3, r2, r3
 8002b68:	095b      	lsrs	r3, r3, #5
 8002b6a:	f003 0207 	and.w	r2, r3, #7
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	440a      	add	r2, r1
 8002b74:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b76:	e04a      	b.n	8002c0e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	009a      	lsls	r2, r3, #2
 8002b82:	441a      	add	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8e:	4a23      	ldr	r2, [pc, #140]	; (8002c1c <UART_SetConfig+0x1c4>)
 8002b90:	fba2 2303 	umull	r2, r3, r2, r3
 8002b94:	095b      	lsrs	r3, r3, #5
 8002b96:	0119      	lsls	r1, r3, #4
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	009a      	lsls	r2, r3, #2
 8002ba2:	441a      	add	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bae:	4b1b      	ldr	r3, [pc, #108]	; (8002c1c <UART_SetConfig+0x1c4>)
 8002bb0:	fba3 0302 	umull	r0, r3, r3, r2
 8002bb4:	095b      	lsrs	r3, r3, #5
 8002bb6:	2064      	movs	r0, #100	; 0x64
 8002bb8:	fb00 f303 	mul.w	r3, r0, r3
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	011b      	lsls	r3, r3, #4
 8002bc0:	3332      	adds	r3, #50	; 0x32
 8002bc2:	4a16      	ldr	r2, [pc, #88]	; (8002c1c <UART_SetConfig+0x1c4>)
 8002bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc8:	095b      	lsrs	r3, r3, #5
 8002bca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bce:	4419      	add	r1, r3
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	009a      	lsls	r2, r3, #2
 8002bda:	441a      	add	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002be6:	4b0d      	ldr	r3, [pc, #52]	; (8002c1c <UART_SetConfig+0x1c4>)
 8002be8:	fba3 0302 	umull	r0, r3, r3, r2
 8002bec:	095b      	lsrs	r3, r3, #5
 8002bee:	2064      	movs	r0, #100	; 0x64
 8002bf0:	fb00 f303 	mul.w	r3, r0, r3
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	3332      	adds	r3, #50	; 0x32
 8002bfa:	4a08      	ldr	r2, [pc, #32]	; (8002c1c <UART_SetConfig+0x1c4>)
 8002bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002c00:	095b      	lsrs	r3, r3, #5
 8002c02:	f003 020f 	and.w	r2, r3, #15
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	440a      	add	r2, r1
 8002c0c:	609a      	str	r2, [r3, #8]
}
 8002c0e:	bf00      	nop
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40013800 	.word	0x40013800
 8002c1c:	51eb851f 	.word	0x51eb851f

08002c20 <__errno>:
 8002c20:	4b01      	ldr	r3, [pc, #4]	; (8002c28 <__errno+0x8>)
 8002c22:	6818      	ldr	r0, [r3, #0]
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	2000000c 	.word	0x2000000c

08002c2c <__libc_init_array>:
 8002c2c:	b570      	push	{r4, r5, r6, lr}
 8002c2e:	2600      	movs	r6, #0
 8002c30:	4d0c      	ldr	r5, [pc, #48]	; (8002c64 <__libc_init_array+0x38>)
 8002c32:	4c0d      	ldr	r4, [pc, #52]	; (8002c68 <__libc_init_array+0x3c>)
 8002c34:	1b64      	subs	r4, r4, r5
 8002c36:	10a4      	asrs	r4, r4, #2
 8002c38:	42a6      	cmp	r6, r4
 8002c3a:	d109      	bne.n	8002c50 <__libc_init_array+0x24>
 8002c3c:	f000 fc86 	bl	800354c <_init>
 8002c40:	2600      	movs	r6, #0
 8002c42:	4d0a      	ldr	r5, [pc, #40]	; (8002c6c <__libc_init_array+0x40>)
 8002c44:	4c0a      	ldr	r4, [pc, #40]	; (8002c70 <__libc_init_array+0x44>)
 8002c46:	1b64      	subs	r4, r4, r5
 8002c48:	10a4      	asrs	r4, r4, #2
 8002c4a:	42a6      	cmp	r6, r4
 8002c4c:	d105      	bne.n	8002c5a <__libc_init_array+0x2e>
 8002c4e:	bd70      	pop	{r4, r5, r6, pc}
 8002c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c54:	4798      	blx	r3
 8002c56:	3601      	adds	r6, #1
 8002c58:	e7ee      	b.n	8002c38 <__libc_init_array+0xc>
 8002c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c5e:	4798      	blx	r3
 8002c60:	3601      	adds	r6, #1
 8002c62:	e7f2      	b.n	8002c4a <__libc_init_array+0x1e>
 8002c64:	08003890 	.word	0x08003890
 8002c68:	08003890 	.word	0x08003890
 8002c6c:	08003890 	.word	0x08003890
 8002c70:	08003894 	.word	0x08003894

08002c74 <memset>:
 8002c74:	4603      	mov	r3, r0
 8002c76:	4402      	add	r2, r0
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d100      	bne.n	8002c7e <memset+0xa>
 8002c7c:	4770      	bx	lr
 8002c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c82:	e7f9      	b.n	8002c78 <memset+0x4>

08002c84 <sniprintf>:
 8002c84:	b40c      	push	{r2, r3}
 8002c86:	b530      	push	{r4, r5, lr}
 8002c88:	4b17      	ldr	r3, [pc, #92]	; (8002ce8 <sniprintf+0x64>)
 8002c8a:	1e0c      	subs	r4, r1, #0
 8002c8c:	681d      	ldr	r5, [r3, #0]
 8002c8e:	b09d      	sub	sp, #116	; 0x74
 8002c90:	da08      	bge.n	8002ca4 <sniprintf+0x20>
 8002c92:	238b      	movs	r3, #139	; 0x8b
 8002c94:	f04f 30ff 	mov.w	r0, #4294967295
 8002c98:	602b      	str	r3, [r5, #0]
 8002c9a:	b01d      	add	sp, #116	; 0x74
 8002c9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002ca0:	b002      	add	sp, #8
 8002ca2:	4770      	bx	lr
 8002ca4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002ca8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002cac:	bf0c      	ite	eq
 8002cae:	4623      	moveq	r3, r4
 8002cb0:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002cb4:	9304      	str	r3, [sp, #16]
 8002cb6:	9307      	str	r3, [sp, #28]
 8002cb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cbc:	9002      	str	r0, [sp, #8]
 8002cbe:	9006      	str	r0, [sp, #24]
 8002cc0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002cc4:	4628      	mov	r0, r5
 8002cc6:	ab21      	add	r3, sp, #132	; 0x84
 8002cc8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002cca:	a902      	add	r1, sp, #8
 8002ccc:	9301      	str	r3, [sp, #4]
 8002cce:	f000 f87f 	bl	8002dd0 <_svfiprintf_r>
 8002cd2:	1c43      	adds	r3, r0, #1
 8002cd4:	bfbc      	itt	lt
 8002cd6:	238b      	movlt	r3, #139	; 0x8b
 8002cd8:	602b      	strlt	r3, [r5, #0]
 8002cda:	2c00      	cmp	r4, #0
 8002cdc:	d0dd      	beq.n	8002c9a <sniprintf+0x16>
 8002cde:	2200      	movs	r2, #0
 8002ce0:	9b02      	ldr	r3, [sp, #8]
 8002ce2:	701a      	strb	r2, [r3, #0]
 8002ce4:	e7d9      	b.n	8002c9a <sniprintf+0x16>
 8002ce6:	bf00      	nop
 8002ce8:	2000000c 	.word	0x2000000c

08002cec <strstr>:
 8002cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cee:	780c      	ldrb	r4, [r1, #0]
 8002cf0:	b164      	cbz	r4, 8002d0c <strstr+0x20>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	781a      	ldrb	r2, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	1c5e      	adds	r6, r3, #1
 8002cfa:	b90a      	cbnz	r2, 8002d00 <strstr+0x14>
 8002cfc:	4610      	mov	r0, r2
 8002cfe:	e005      	b.n	8002d0c <strstr+0x20>
 8002d00:	4294      	cmp	r4, r2
 8002d02:	d108      	bne.n	8002d16 <strstr+0x2a>
 8002d04:	460d      	mov	r5, r1
 8002d06:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8002d0a:	b902      	cbnz	r2, 8002d0e <strstr+0x22>
 8002d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d0e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8002d12:	4297      	cmp	r7, r2
 8002d14:	d0f7      	beq.n	8002d06 <strstr+0x1a>
 8002d16:	4633      	mov	r3, r6
 8002d18:	e7ec      	b.n	8002cf4 <strstr+0x8>

08002d1a <__ssputs_r>:
 8002d1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d1e:	688e      	ldr	r6, [r1, #8]
 8002d20:	4682      	mov	sl, r0
 8002d22:	429e      	cmp	r6, r3
 8002d24:	460c      	mov	r4, r1
 8002d26:	4690      	mov	r8, r2
 8002d28:	461f      	mov	r7, r3
 8002d2a:	d838      	bhi.n	8002d9e <__ssputs_r+0x84>
 8002d2c:	898a      	ldrh	r2, [r1, #12]
 8002d2e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002d32:	d032      	beq.n	8002d9a <__ssputs_r+0x80>
 8002d34:	6825      	ldr	r5, [r4, #0]
 8002d36:	6909      	ldr	r1, [r1, #16]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	eba5 0901 	sub.w	r9, r5, r1
 8002d3e:	6965      	ldr	r5, [r4, #20]
 8002d40:	444b      	add	r3, r9
 8002d42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002d46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002d4a:	106d      	asrs	r5, r5, #1
 8002d4c:	429d      	cmp	r5, r3
 8002d4e:	bf38      	it	cc
 8002d50:	461d      	movcc	r5, r3
 8002d52:	0553      	lsls	r3, r2, #21
 8002d54:	d531      	bpl.n	8002dba <__ssputs_r+0xa0>
 8002d56:	4629      	mov	r1, r5
 8002d58:	f000 fb52 	bl	8003400 <_malloc_r>
 8002d5c:	4606      	mov	r6, r0
 8002d5e:	b950      	cbnz	r0, 8002d76 <__ssputs_r+0x5c>
 8002d60:	230c      	movs	r3, #12
 8002d62:	f04f 30ff 	mov.w	r0, #4294967295
 8002d66:	f8ca 3000 	str.w	r3, [sl]
 8002d6a:	89a3      	ldrh	r3, [r4, #12]
 8002d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d70:	81a3      	strh	r3, [r4, #12]
 8002d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d76:	464a      	mov	r2, r9
 8002d78:	6921      	ldr	r1, [r4, #16]
 8002d7a:	f000 facd 	bl	8003318 <memcpy>
 8002d7e:	89a3      	ldrh	r3, [r4, #12]
 8002d80:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d88:	81a3      	strh	r3, [r4, #12]
 8002d8a:	6126      	str	r6, [r4, #16]
 8002d8c:	444e      	add	r6, r9
 8002d8e:	6026      	str	r6, [r4, #0]
 8002d90:	463e      	mov	r6, r7
 8002d92:	6165      	str	r5, [r4, #20]
 8002d94:	eba5 0509 	sub.w	r5, r5, r9
 8002d98:	60a5      	str	r5, [r4, #8]
 8002d9a:	42be      	cmp	r6, r7
 8002d9c:	d900      	bls.n	8002da0 <__ssputs_r+0x86>
 8002d9e:	463e      	mov	r6, r7
 8002da0:	4632      	mov	r2, r6
 8002da2:	4641      	mov	r1, r8
 8002da4:	6820      	ldr	r0, [r4, #0]
 8002da6:	f000 fac5 	bl	8003334 <memmove>
 8002daa:	68a3      	ldr	r3, [r4, #8]
 8002dac:	6822      	ldr	r2, [r4, #0]
 8002dae:	1b9b      	subs	r3, r3, r6
 8002db0:	4432      	add	r2, r6
 8002db2:	2000      	movs	r0, #0
 8002db4:	60a3      	str	r3, [r4, #8]
 8002db6:	6022      	str	r2, [r4, #0]
 8002db8:	e7db      	b.n	8002d72 <__ssputs_r+0x58>
 8002dba:	462a      	mov	r2, r5
 8002dbc:	f000 fb7a 	bl	80034b4 <_realloc_r>
 8002dc0:	4606      	mov	r6, r0
 8002dc2:	2800      	cmp	r0, #0
 8002dc4:	d1e1      	bne.n	8002d8a <__ssputs_r+0x70>
 8002dc6:	4650      	mov	r0, sl
 8002dc8:	6921      	ldr	r1, [r4, #16]
 8002dca:	f000 facd 	bl	8003368 <_free_r>
 8002dce:	e7c7      	b.n	8002d60 <__ssputs_r+0x46>

08002dd0 <_svfiprintf_r>:
 8002dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dd4:	4698      	mov	r8, r3
 8002dd6:	898b      	ldrh	r3, [r1, #12]
 8002dd8:	4607      	mov	r7, r0
 8002dda:	061b      	lsls	r3, r3, #24
 8002ddc:	460d      	mov	r5, r1
 8002dde:	4614      	mov	r4, r2
 8002de0:	b09d      	sub	sp, #116	; 0x74
 8002de2:	d50e      	bpl.n	8002e02 <_svfiprintf_r+0x32>
 8002de4:	690b      	ldr	r3, [r1, #16]
 8002de6:	b963      	cbnz	r3, 8002e02 <_svfiprintf_r+0x32>
 8002de8:	2140      	movs	r1, #64	; 0x40
 8002dea:	f000 fb09 	bl	8003400 <_malloc_r>
 8002dee:	6028      	str	r0, [r5, #0]
 8002df0:	6128      	str	r0, [r5, #16]
 8002df2:	b920      	cbnz	r0, 8002dfe <_svfiprintf_r+0x2e>
 8002df4:	230c      	movs	r3, #12
 8002df6:	603b      	str	r3, [r7, #0]
 8002df8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dfc:	e0d1      	b.n	8002fa2 <_svfiprintf_r+0x1d2>
 8002dfe:	2340      	movs	r3, #64	; 0x40
 8002e00:	616b      	str	r3, [r5, #20]
 8002e02:	2300      	movs	r3, #0
 8002e04:	9309      	str	r3, [sp, #36]	; 0x24
 8002e06:	2320      	movs	r3, #32
 8002e08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e0c:	2330      	movs	r3, #48	; 0x30
 8002e0e:	f04f 0901 	mov.w	r9, #1
 8002e12:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e16:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002fbc <_svfiprintf_r+0x1ec>
 8002e1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e1e:	4623      	mov	r3, r4
 8002e20:	469a      	mov	sl, r3
 8002e22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e26:	b10a      	cbz	r2, 8002e2c <_svfiprintf_r+0x5c>
 8002e28:	2a25      	cmp	r2, #37	; 0x25
 8002e2a:	d1f9      	bne.n	8002e20 <_svfiprintf_r+0x50>
 8002e2c:	ebba 0b04 	subs.w	fp, sl, r4
 8002e30:	d00b      	beq.n	8002e4a <_svfiprintf_r+0x7a>
 8002e32:	465b      	mov	r3, fp
 8002e34:	4622      	mov	r2, r4
 8002e36:	4629      	mov	r1, r5
 8002e38:	4638      	mov	r0, r7
 8002e3a:	f7ff ff6e 	bl	8002d1a <__ssputs_r>
 8002e3e:	3001      	adds	r0, #1
 8002e40:	f000 80aa 	beq.w	8002f98 <_svfiprintf_r+0x1c8>
 8002e44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e46:	445a      	add	r2, fp
 8002e48:	9209      	str	r2, [sp, #36]	; 0x24
 8002e4a:	f89a 3000 	ldrb.w	r3, [sl]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 80a2 	beq.w	8002f98 <_svfiprintf_r+0x1c8>
 8002e54:	2300      	movs	r3, #0
 8002e56:	f04f 32ff 	mov.w	r2, #4294967295
 8002e5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e5e:	f10a 0a01 	add.w	sl, sl, #1
 8002e62:	9304      	str	r3, [sp, #16]
 8002e64:	9307      	str	r3, [sp, #28]
 8002e66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e6a:	931a      	str	r3, [sp, #104]	; 0x68
 8002e6c:	4654      	mov	r4, sl
 8002e6e:	2205      	movs	r2, #5
 8002e70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e74:	4851      	ldr	r0, [pc, #324]	; (8002fbc <_svfiprintf_r+0x1ec>)
 8002e76:	f000 fa41 	bl	80032fc <memchr>
 8002e7a:	9a04      	ldr	r2, [sp, #16]
 8002e7c:	b9d8      	cbnz	r0, 8002eb6 <_svfiprintf_r+0xe6>
 8002e7e:	06d0      	lsls	r0, r2, #27
 8002e80:	bf44      	itt	mi
 8002e82:	2320      	movmi	r3, #32
 8002e84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e88:	0711      	lsls	r1, r2, #28
 8002e8a:	bf44      	itt	mi
 8002e8c:	232b      	movmi	r3, #43	; 0x2b
 8002e8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e92:	f89a 3000 	ldrb.w	r3, [sl]
 8002e96:	2b2a      	cmp	r3, #42	; 0x2a
 8002e98:	d015      	beq.n	8002ec6 <_svfiprintf_r+0xf6>
 8002e9a:	4654      	mov	r4, sl
 8002e9c:	2000      	movs	r0, #0
 8002e9e:	f04f 0c0a 	mov.w	ip, #10
 8002ea2:	9a07      	ldr	r2, [sp, #28]
 8002ea4:	4621      	mov	r1, r4
 8002ea6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002eaa:	3b30      	subs	r3, #48	; 0x30
 8002eac:	2b09      	cmp	r3, #9
 8002eae:	d94e      	bls.n	8002f4e <_svfiprintf_r+0x17e>
 8002eb0:	b1b0      	cbz	r0, 8002ee0 <_svfiprintf_r+0x110>
 8002eb2:	9207      	str	r2, [sp, #28]
 8002eb4:	e014      	b.n	8002ee0 <_svfiprintf_r+0x110>
 8002eb6:	eba0 0308 	sub.w	r3, r0, r8
 8002eba:	fa09 f303 	lsl.w	r3, r9, r3
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	46a2      	mov	sl, r4
 8002ec2:	9304      	str	r3, [sp, #16]
 8002ec4:	e7d2      	b.n	8002e6c <_svfiprintf_r+0x9c>
 8002ec6:	9b03      	ldr	r3, [sp, #12]
 8002ec8:	1d19      	adds	r1, r3, #4
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	9103      	str	r1, [sp, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	bfbb      	ittet	lt
 8002ed2:	425b      	neglt	r3, r3
 8002ed4:	f042 0202 	orrlt.w	r2, r2, #2
 8002ed8:	9307      	strge	r3, [sp, #28]
 8002eda:	9307      	strlt	r3, [sp, #28]
 8002edc:	bfb8      	it	lt
 8002ede:	9204      	strlt	r2, [sp, #16]
 8002ee0:	7823      	ldrb	r3, [r4, #0]
 8002ee2:	2b2e      	cmp	r3, #46	; 0x2e
 8002ee4:	d10c      	bne.n	8002f00 <_svfiprintf_r+0x130>
 8002ee6:	7863      	ldrb	r3, [r4, #1]
 8002ee8:	2b2a      	cmp	r3, #42	; 0x2a
 8002eea:	d135      	bne.n	8002f58 <_svfiprintf_r+0x188>
 8002eec:	9b03      	ldr	r3, [sp, #12]
 8002eee:	3402      	adds	r4, #2
 8002ef0:	1d1a      	adds	r2, r3, #4
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	9203      	str	r2, [sp, #12]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	bfb8      	it	lt
 8002efa:	f04f 33ff 	movlt.w	r3, #4294967295
 8002efe:	9305      	str	r3, [sp, #20]
 8002f00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002fcc <_svfiprintf_r+0x1fc>
 8002f04:	2203      	movs	r2, #3
 8002f06:	4650      	mov	r0, sl
 8002f08:	7821      	ldrb	r1, [r4, #0]
 8002f0a:	f000 f9f7 	bl	80032fc <memchr>
 8002f0e:	b140      	cbz	r0, 8002f22 <_svfiprintf_r+0x152>
 8002f10:	2340      	movs	r3, #64	; 0x40
 8002f12:	eba0 000a 	sub.w	r0, r0, sl
 8002f16:	fa03 f000 	lsl.w	r0, r3, r0
 8002f1a:	9b04      	ldr	r3, [sp, #16]
 8002f1c:	3401      	adds	r4, #1
 8002f1e:	4303      	orrs	r3, r0
 8002f20:	9304      	str	r3, [sp, #16]
 8002f22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f26:	2206      	movs	r2, #6
 8002f28:	4825      	ldr	r0, [pc, #148]	; (8002fc0 <_svfiprintf_r+0x1f0>)
 8002f2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f2e:	f000 f9e5 	bl	80032fc <memchr>
 8002f32:	2800      	cmp	r0, #0
 8002f34:	d038      	beq.n	8002fa8 <_svfiprintf_r+0x1d8>
 8002f36:	4b23      	ldr	r3, [pc, #140]	; (8002fc4 <_svfiprintf_r+0x1f4>)
 8002f38:	bb1b      	cbnz	r3, 8002f82 <_svfiprintf_r+0x1b2>
 8002f3a:	9b03      	ldr	r3, [sp, #12]
 8002f3c:	3307      	adds	r3, #7
 8002f3e:	f023 0307 	bic.w	r3, r3, #7
 8002f42:	3308      	adds	r3, #8
 8002f44:	9303      	str	r3, [sp, #12]
 8002f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f48:	4433      	add	r3, r6
 8002f4a:	9309      	str	r3, [sp, #36]	; 0x24
 8002f4c:	e767      	b.n	8002e1e <_svfiprintf_r+0x4e>
 8002f4e:	460c      	mov	r4, r1
 8002f50:	2001      	movs	r0, #1
 8002f52:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f56:	e7a5      	b.n	8002ea4 <_svfiprintf_r+0xd4>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	f04f 0c0a 	mov.w	ip, #10
 8002f5e:	4619      	mov	r1, r3
 8002f60:	3401      	adds	r4, #1
 8002f62:	9305      	str	r3, [sp, #20]
 8002f64:	4620      	mov	r0, r4
 8002f66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f6a:	3a30      	subs	r2, #48	; 0x30
 8002f6c:	2a09      	cmp	r2, #9
 8002f6e:	d903      	bls.n	8002f78 <_svfiprintf_r+0x1a8>
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0c5      	beq.n	8002f00 <_svfiprintf_r+0x130>
 8002f74:	9105      	str	r1, [sp, #20]
 8002f76:	e7c3      	b.n	8002f00 <_svfiprintf_r+0x130>
 8002f78:	4604      	mov	r4, r0
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f80:	e7f0      	b.n	8002f64 <_svfiprintf_r+0x194>
 8002f82:	ab03      	add	r3, sp, #12
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	462a      	mov	r2, r5
 8002f88:	4638      	mov	r0, r7
 8002f8a:	4b0f      	ldr	r3, [pc, #60]	; (8002fc8 <_svfiprintf_r+0x1f8>)
 8002f8c:	a904      	add	r1, sp, #16
 8002f8e:	f3af 8000 	nop.w
 8002f92:	1c42      	adds	r2, r0, #1
 8002f94:	4606      	mov	r6, r0
 8002f96:	d1d6      	bne.n	8002f46 <_svfiprintf_r+0x176>
 8002f98:	89ab      	ldrh	r3, [r5, #12]
 8002f9a:	065b      	lsls	r3, r3, #25
 8002f9c:	f53f af2c 	bmi.w	8002df8 <_svfiprintf_r+0x28>
 8002fa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002fa2:	b01d      	add	sp, #116	; 0x74
 8002fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fa8:	ab03      	add	r3, sp, #12
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	462a      	mov	r2, r5
 8002fae:	4638      	mov	r0, r7
 8002fb0:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <_svfiprintf_r+0x1f8>)
 8002fb2:	a904      	add	r1, sp, #16
 8002fb4:	f000 f87c 	bl	80030b0 <_printf_i>
 8002fb8:	e7eb      	b.n	8002f92 <_svfiprintf_r+0x1c2>
 8002fba:	bf00      	nop
 8002fbc:	08003854 	.word	0x08003854
 8002fc0:	0800385e 	.word	0x0800385e
 8002fc4:	00000000 	.word	0x00000000
 8002fc8:	08002d1b 	.word	0x08002d1b
 8002fcc:	0800385a 	.word	0x0800385a

08002fd0 <_printf_common>:
 8002fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fd4:	4616      	mov	r6, r2
 8002fd6:	4699      	mov	r9, r3
 8002fd8:	688a      	ldr	r2, [r1, #8]
 8002fda:	690b      	ldr	r3, [r1, #16]
 8002fdc:	4607      	mov	r7, r0
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	bfb8      	it	lt
 8002fe2:	4613      	movlt	r3, r2
 8002fe4:	6033      	str	r3, [r6, #0]
 8002fe6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002fea:	460c      	mov	r4, r1
 8002fec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ff0:	b10a      	cbz	r2, 8002ff6 <_printf_common+0x26>
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	6033      	str	r3, [r6, #0]
 8002ff6:	6823      	ldr	r3, [r4, #0]
 8002ff8:	0699      	lsls	r1, r3, #26
 8002ffa:	bf42      	ittt	mi
 8002ffc:	6833      	ldrmi	r3, [r6, #0]
 8002ffe:	3302      	addmi	r3, #2
 8003000:	6033      	strmi	r3, [r6, #0]
 8003002:	6825      	ldr	r5, [r4, #0]
 8003004:	f015 0506 	ands.w	r5, r5, #6
 8003008:	d106      	bne.n	8003018 <_printf_common+0x48>
 800300a:	f104 0a19 	add.w	sl, r4, #25
 800300e:	68e3      	ldr	r3, [r4, #12]
 8003010:	6832      	ldr	r2, [r6, #0]
 8003012:	1a9b      	subs	r3, r3, r2
 8003014:	42ab      	cmp	r3, r5
 8003016:	dc28      	bgt.n	800306a <_printf_common+0x9a>
 8003018:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800301c:	1e13      	subs	r3, r2, #0
 800301e:	6822      	ldr	r2, [r4, #0]
 8003020:	bf18      	it	ne
 8003022:	2301      	movne	r3, #1
 8003024:	0692      	lsls	r2, r2, #26
 8003026:	d42d      	bmi.n	8003084 <_printf_common+0xb4>
 8003028:	4649      	mov	r1, r9
 800302a:	4638      	mov	r0, r7
 800302c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003030:	47c0      	blx	r8
 8003032:	3001      	adds	r0, #1
 8003034:	d020      	beq.n	8003078 <_printf_common+0xa8>
 8003036:	6823      	ldr	r3, [r4, #0]
 8003038:	68e5      	ldr	r5, [r4, #12]
 800303a:	f003 0306 	and.w	r3, r3, #6
 800303e:	2b04      	cmp	r3, #4
 8003040:	bf18      	it	ne
 8003042:	2500      	movne	r5, #0
 8003044:	6832      	ldr	r2, [r6, #0]
 8003046:	f04f 0600 	mov.w	r6, #0
 800304a:	68a3      	ldr	r3, [r4, #8]
 800304c:	bf08      	it	eq
 800304e:	1aad      	subeq	r5, r5, r2
 8003050:	6922      	ldr	r2, [r4, #16]
 8003052:	bf08      	it	eq
 8003054:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003058:	4293      	cmp	r3, r2
 800305a:	bfc4      	itt	gt
 800305c:	1a9b      	subgt	r3, r3, r2
 800305e:	18ed      	addgt	r5, r5, r3
 8003060:	341a      	adds	r4, #26
 8003062:	42b5      	cmp	r5, r6
 8003064:	d11a      	bne.n	800309c <_printf_common+0xcc>
 8003066:	2000      	movs	r0, #0
 8003068:	e008      	b.n	800307c <_printf_common+0xac>
 800306a:	2301      	movs	r3, #1
 800306c:	4652      	mov	r2, sl
 800306e:	4649      	mov	r1, r9
 8003070:	4638      	mov	r0, r7
 8003072:	47c0      	blx	r8
 8003074:	3001      	adds	r0, #1
 8003076:	d103      	bne.n	8003080 <_printf_common+0xb0>
 8003078:	f04f 30ff 	mov.w	r0, #4294967295
 800307c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003080:	3501      	adds	r5, #1
 8003082:	e7c4      	b.n	800300e <_printf_common+0x3e>
 8003084:	2030      	movs	r0, #48	; 0x30
 8003086:	18e1      	adds	r1, r4, r3
 8003088:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800308c:	1c5a      	adds	r2, r3, #1
 800308e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003092:	4422      	add	r2, r4
 8003094:	3302      	adds	r3, #2
 8003096:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800309a:	e7c5      	b.n	8003028 <_printf_common+0x58>
 800309c:	2301      	movs	r3, #1
 800309e:	4622      	mov	r2, r4
 80030a0:	4649      	mov	r1, r9
 80030a2:	4638      	mov	r0, r7
 80030a4:	47c0      	blx	r8
 80030a6:	3001      	adds	r0, #1
 80030a8:	d0e6      	beq.n	8003078 <_printf_common+0xa8>
 80030aa:	3601      	adds	r6, #1
 80030ac:	e7d9      	b.n	8003062 <_printf_common+0x92>
	...

080030b0 <_printf_i>:
 80030b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030b4:	460c      	mov	r4, r1
 80030b6:	7e27      	ldrb	r7, [r4, #24]
 80030b8:	4691      	mov	r9, r2
 80030ba:	2f78      	cmp	r7, #120	; 0x78
 80030bc:	4680      	mov	r8, r0
 80030be:	469a      	mov	sl, r3
 80030c0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80030c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80030c6:	d807      	bhi.n	80030d8 <_printf_i+0x28>
 80030c8:	2f62      	cmp	r7, #98	; 0x62
 80030ca:	d80a      	bhi.n	80030e2 <_printf_i+0x32>
 80030cc:	2f00      	cmp	r7, #0
 80030ce:	f000 80d9 	beq.w	8003284 <_printf_i+0x1d4>
 80030d2:	2f58      	cmp	r7, #88	; 0x58
 80030d4:	f000 80a4 	beq.w	8003220 <_printf_i+0x170>
 80030d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80030dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80030e0:	e03a      	b.n	8003158 <_printf_i+0xa8>
 80030e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80030e6:	2b15      	cmp	r3, #21
 80030e8:	d8f6      	bhi.n	80030d8 <_printf_i+0x28>
 80030ea:	a001      	add	r0, pc, #4	; (adr r0, 80030f0 <_printf_i+0x40>)
 80030ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80030f0:	08003149 	.word	0x08003149
 80030f4:	0800315d 	.word	0x0800315d
 80030f8:	080030d9 	.word	0x080030d9
 80030fc:	080030d9 	.word	0x080030d9
 8003100:	080030d9 	.word	0x080030d9
 8003104:	080030d9 	.word	0x080030d9
 8003108:	0800315d 	.word	0x0800315d
 800310c:	080030d9 	.word	0x080030d9
 8003110:	080030d9 	.word	0x080030d9
 8003114:	080030d9 	.word	0x080030d9
 8003118:	080030d9 	.word	0x080030d9
 800311c:	0800326b 	.word	0x0800326b
 8003120:	0800318d 	.word	0x0800318d
 8003124:	0800324d 	.word	0x0800324d
 8003128:	080030d9 	.word	0x080030d9
 800312c:	080030d9 	.word	0x080030d9
 8003130:	0800328d 	.word	0x0800328d
 8003134:	080030d9 	.word	0x080030d9
 8003138:	0800318d 	.word	0x0800318d
 800313c:	080030d9 	.word	0x080030d9
 8003140:	080030d9 	.word	0x080030d9
 8003144:	08003255 	.word	0x08003255
 8003148:	680b      	ldr	r3, [r1, #0]
 800314a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800314e:	1d1a      	adds	r2, r3, #4
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	600a      	str	r2, [r1, #0]
 8003154:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003158:	2301      	movs	r3, #1
 800315a:	e0a4      	b.n	80032a6 <_printf_i+0x1f6>
 800315c:	6825      	ldr	r5, [r4, #0]
 800315e:	6808      	ldr	r0, [r1, #0]
 8003160:	062e      	lsls	r6, r5, #24
 8003162:	f100 0304 	add.w	r3, r0, #4
 8003166:	d50a      	bpl.n	800317e <_printf_i+0xce>
 8003168:	6805      	ldr	r5, [r0, #0]
 800316a:	600b      	str	r3, [r1, #0]
 800316c:	2d00      	cmp	r5, #0
 800316e:	da03      	bge.n	8003178 <_printf_i+0xc8>
 8003170:	232d      	movs	r3, #45	; 0x2d
 8003172:	426d      	negs	r5, r5
 8003174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003178:	230a      	movs	r3, #10
 800317a:	485e      	ldr	r0, [pc, #376]	; (80032f4 <_printf_i+0x244>)
 800317c:	e019      	b.n	80031b2 <_printf_i+0x102>
 800317e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003182:	6805      	ldr	r5, [r0, #0]
 8003184:	600b      	str	r3, [r1, #0]
 8003186:	bf18      	it	ne
 8003188:	b22d      	sxthne	r5, r5
 800318a:	e7ef      	b.n	800316c <_printf_i+0xbc>
 800318c:	680b      	ldr	r3, [r1, #0]
 800318e:	6825      	ldr	r5, [r4, #0]
 8003190:	1d18      	adds	r0, r3, #4
 8003192:	6008      	str	r0, [r1, #0]
 8003194:	0628      	lsls	r0, r5, #24
 8003196:	d501      	bpl.n	800319c <_printf_i+0xec>
 8003198:	681d      	ldr	r5, [r3, #0]
 800319a:	e002      	b.n	80031a2 <_printf_i+0xf2>
 800319c:	0669      	lsls	r1, r5, #25
 800319e:	d5fb      	bpl.n	8003198 <_printf_i+0xe8>
 80031a0:	881d      	ldrh	r5, [r3, #0]
 80031a2:	2f6f      	cmp	r7, #111	; 0x6f
 80031a4:	bf0c      	ite	eq
 80031a6:	2308      	moveq	r3, #8
 80031a8:	230a      	movne	r3, #10
 80031aa:	4852      	ldr	r0, [pc, #328]	; (80032f4 <_printf_i+0x244>)
 80031ac:	2100      	movs	r1, #0
 80031ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80031b2:	6866      	ldr	r6, [r4, #4]
 80031b4:	2e00      	cmp	r6, #0
 80031b6:	bfa8      	it	ge
 80031b8:	6821      	ldrge	r1, [r4, #0]
 80031ba:	60a6      	str	r6, [r4, #8]
 80031bc:	bfa4      	itt	ge
 80031be:	f021 0104 	bicge.w	r1, r1, #4
 80031c2:	6021      	strge	r1, [r4, #0]
 80031c4:	b90d      	cbnz	r5, 80031ca <_printf_i+0x11a>
 80031c6:	2e00      	cmp	r6, #0
 80031c8:	d04d      	beq.n	8003266 <_printf_i+0x1b6>
 80031ca:	4616      	mov	r6, r2
 80031cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80031d0:	fb03 5711 	mls	r7, r3, r1, r5
 80031d4:	5dc7      	ldrb	r7, [r0, r7]
 80031d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80031da:	462f      	mov	r7, r5
 80031dc:	42bb      	cmp	r3, r7
 80031de:	460d      	mov	r5, r1
 80031e0:	d9f4      	bls.n	80031cc <_printf_i+0x11c>
 80031e2:	2b08      	cmp	r3, #8
 80031e4:	d10b      	bne.n	80031fe <_printf_i+0x14e>
 80031e6:	6823      	ldr	r3, [r4, #0]
 80031e8:	07df      	lsls	r7, r3, #31
 80031ea:	d508      	bpl.n	80031fe <_printf_i+0x14e>
 80031ec:	6923      	ldr	r3, [r4, #16]
 80031ee:	6861      	ldr	r1, [r4, #4]
 80031f0:	4299      	cmp	r1, r3
 80031f2:	bfde      	ittt	le
 80031f4:	2330      	movle	r3, #48	; 0x30
 80031f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80031fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80031fe:	1b92      	subs	r2, r2, r6
 8003200:	6122      	str	r2, [r4, #16]
 8003202:	464b      	mov	r3, r9
 8003204:	4621      	mov	r1, r4
 8003206:	4640      	mov	r0, r8
 8003208:	f8cd a000 	str.w	sl, [sp]
 800320c:	aa03      	add	r2, sp, #12
 800320e:	f7ff fedf 	bl	8002fd0 <_printf_common>
 8003212:	3001      	adds	r0, #1
 8003214:	d14c      	bne.n	80032b0 <_printf_i+0x200>
 8003216:	f04f 30ff 	mov.w	r0, #4294967295
 800321a:	b004      	add	sp, #16
 800321c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003220:	4834      	ldr	r0, [pc, #208]	; (80032f4 <_printf_i+0x244>)
 8003222:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003226:	680e      	ldr	r6, [r1, #0]
 8003228:	6823      	ldr	r3, [r4, #0]
 800322a:	f856 5b04 	ldr.w	r5, [r6], #4
 800322e:	061f      	lsls	r7, r3, #24
 8003230:	600e      	str	r6, [r1, #0]
 8003232:	d514      	bpl.n	800325e <_printf_i+0x1ae>
 8003234:	07d9      	lsls	r1, r3, #31
 8003236:	bf44      	itt	mi
 8003238:	f043 0320 	orrmi.w	r3, r3, #32
 800323c:	6023      	strmi	r3, [r4, #0]
 800323e:	b91d      	cbnz	r5, 8003248 <_printf_i+0x198>
 8003240:	6823      	ldr	r3, [r4, #0]
 8003242:	f023 0320 	bic.w	r3, r3, #32
 8003246:	6023      	str	r3, [r4, #0]
 8003248:	2310      	movs	r3, #16
 800324a:	e7af      	b.n	80031ac <_printf_i+0xfc>
 800324c:	6823      	ldr	r3, [r4, #0]
 800324e:	f043 0320 	orr.w	r3, r3, #32
 8003252:	6023      	str	r3, [r4, #0]
 8003254:	2378      	movs	r3, #120	; 0x78
 8003256:	4828      	ldr	r0, [pc, #160]	; (80032f8 <_printf_i+0x248>)
 8003258:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800325c:	e7e3      	b.n	8003226 <_printf_i+0x176>
 800325e:	065e      	lsls	r6, r3, #25
 8003260:	bf48      	it	mi
 8003262:	b2ad      	uxthmi	r5, r5
 8003264:	e7e6      	b.n	8003234 <_printf_i+0x184>
 8003266:	4616      	mov	r6, r2
 8003268:	e7bb      	b.n	80031e2 <_printf_i+0x132>
 800326a:	680b      	ldr	r3, [r1, #0]
 800326c:	6826      	ldr	r6, [r4, #0]
 800326e:	1d1d      	adds	r5, r3, #4
 8003270:	6960      	ldr	r0, [r4, #20]
 8003272:	600d      	str	r5, [r1, #0]
 8003274:	0635      	lsls	r5, r6, #24
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	d501      	bpl.n	800327e <_printf_i+0x1ce>
 800327a:	6018      	str	r0, [r3, #0]
 800327c:	e002      	b.n	8003284 <_printf_i+0x1d4>
 800327e:	0671      	lsls	r1, r6, #25
 8003280:	d5fb      	bpl.n	800327a <_printf_i+0x1ca>
 8003282:	8018      	strh	r0, [r3, #0]
 8003284:	2300      	movs	r3, #0
 8003286:	4616      	mov	r6, r2
 8003288:	6123      	str	r3, [r4, #16]
 800328a:	e7ba      	b.n	8003202 <_printf_i+0x152>
 800328c:	680b      	ldr	r3, [r1, #0]
 800328e:	1d1a      	adds	r2, r3, #4
 8003290:	600a      	str	r2, [r1, #0]
 8003292:	681e      	ldr	r6, [r3, #0]
 8003294:	2100      	movs	r1, #0
 8003296:	4630      	mov	r0, r6
 8003298:	6862      	ldr	r2, [r4, #4]
 800329a:	f000 f82f 	bl	80032fc <memchr>
 800329e:	b108      	cbz	r0, 80032a4 <_printf_i+0x1f4>
 80032a0:	1b80      	subs	r0, r0, r6
 80032a2:	6060      	str	r0, [r4, #4]
 80032a4:	6863      	ldr	r3, [r4, #4]
 80032a6:	6123      	str	r3, [r4, #16]
 80032a8:	2300      	movs	r3, #0
 80032aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032ae:	e7a8      	b.n	8003202 <_printf_i+0x152>
 80032b0:	4632      	mov	r2, r6
 80032b2:	4649      	mov	r1, r9
 80032b4:	4640      	mov	r0, r8
 80032b6:	6923      	ldr	r3, [r4, #16]
 80032b8:	47d0      	blx	sl
 80032ba:	3001      	adds	r0, #1
 80032bc:	d0ab      	beq.n	8003216 <_printf_i+0x166>
 80032be:	6823      	ldr	r3, [r4, #0]
 80032c0:	079b      	lsls	r3, r3, #30
 80032c2:	d413      	bmi.n	80032ec <_printf_i+0x23c>
 80032c4:	68e0      	ldr	r0, [r4, #12]
 80032c6:	9b03      	ldr	r3, [sp, #12]
 80032c8:	4298      	cmp	r0, r3
 80032ca:	bfb8      	it	lt
 80032cc:	4618      	movlt	r0, r3
 80032ce:	e7a4      	b.n	800321a <_printf_i+0x16a>
 80032d0:	2301      	movs	r3, #1
 80032d2:	4632      	mov	r2, r6
 80032d4:	4649      	mov	r1, r9
 80032d6:	4640      	mov	r0, r8
 80032d8:	47d0      	blx	sl
 80032da:	3001      	adds	r0, #1
 80032dc:	d09b      	beq.n	8003216 <_printf_i+0x166>
 80032de:	3501      	adds	r5, #1
 80032e0:	68e3      	ldr	r3, [r4, #12]
 80032e2:	9903      	ldr	r1, [sp, #12]
 80032e4:	1a5b      	subs	r3, r3, r1
 80032e6:	42ab      	cmp	r3, r5
 80032e8:	dcf2      	bgt.n	80032d0 <_printf_i+0x220>
 80032ea:	e7eb      	b.n	80032c4 <_printf_i+0x214>
 80032ec:	2500      	movs	r5, #0
 80032ee:	f104 0619 	add.w	r6, r4, #25
 80032f2:	e7f5      	b.n	80032e0 <_printf_i+0x230>
 80032f4:	08003865 	.word	0x08003865
 80032f8:	08003876 	.word	0x08003876

080032fc <memchr>:
 80032fc:	4603      	mov	r3, r0
 80032fe:	b510      	push	{r4, lr}
 8003300:	b2c9      	uxtb	r1, r1
 8003302:	4402      	add	r2, r0
 8003304:	4293      	cmp	r3, r2
 8003306:	4618      	mov	r0, r3
 8003308:	d101      	bne.n	800330e <memchr+0x12>
 800330a:	2000      	movs	r0, #0
 800330c:	e003      	b.n	8003316 <memchr+0x1a>
 800330e:	7804      	ldrb	r4, [r0, #0]
 8003310:	3301      	adds	r3, #1
 8003312:	428c      	cmp	r4, r1
 8003314:	d1f6      	bne.n	8003304 <memchr+0x8>
 8003316:	bd10      	pop	{r4, pc}

08003318 <memcpy>:
 8003318:	440a      	add	r2, r1
 800331a:	4291      	cmp	r1, r2
 800331c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003320:	d100      	bne.n	8003324 <memcpy+0xc>
 8003322:	4770      	bx	lr
 8003324:	b510      	push	{r4, lr}
 8003326:	f811 4b01 	ldrb.w	r4, [r1], #1
 800332a:	4291      	cmp	r1, r2
 800332c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003330:	d1f9      	bne.n	8003326 <memcpy+0xe>
 8003332:	bd10      	pop	{r4, pc}

08003334 <memmove>:
 8003334:	4288      	cmp	r0, r1
 8003336:	b510      	push	{r4, lr}
 8003338:	eb01 0402 	add.w	r4, r1, r2
 800333c:	d902      	bls.n	8003344 <memmove+0x10>
 800333e:	4284      	cmp	r4, r0
 8003340:	4623      	mov	r3, r4
 8003342:	d807      	bhi.n	8003354 <memmove+0x20>
 8003344:	1e43      	subs	r3, r0, #1
 8003346:	42a1      	cmp	r1, r4
 8003348:	d008      	beq.n	800335c <memmove+0x28>
 800334a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800334e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003352:	e7f8      	b.n	8003346 <memmove+0x12>
 8003354:	4601      	mov	r1, r0
 8003356:	4402      	add	r2, r0
 8003358:	428a      	cmp	r2, r1
 800335a:	d100      	bne.n	800335e <memmove+0x2a>
 800335c:	bd10      	pop	{r4, pc}
 800335e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003362:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003366:	e7f7      	b.n	8003358 <memmove+0x24>

08003368 <_free_r>:
 8003368:	b538      	push	{r3, r4, r5, lr}
 800336a:	4605      	mov	r5, r0
 800336c:	2900      	cmp	r1, #0
 800336e:	d043      	beq.n	80033f8 <_free_r+0x90>
 8003370:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003374:	1f0c      	subs	r4, r1, #4
 8003376:	2b00      	cmp	r3, #0
 8003378:	bfb8      	it	lt
 800337a:	18e4      	addlt	r4, r4, r3
 800337c:	f000 f8d0 	bl	8003520 <__malloc_lock>
 8003380:	4a1e      	ldr	r2, [pc, #120]	; (80033fc <_free_r+0x94>)
 8003382:	6813      	ldr	r3, [r2, #0]
 8003384:	4610      	mov	r0, r2
 8003386:	b933      	cbnz	r3, 8003396 <_free_r+0x2e>
 8003388:	6063      	str	r3, [r4, #4]
 800338a:	6014      	str	r4, [r2, #0]
 800338c:	4628      	mov	r0, r5
 800338e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003392:	f000 b8cb 	b.w	800352c <__malloc_unlock>
 8003396:	42a3      	cmp	r3, r4
 8003398:	d90a      	bls.n	80033b0 <_free_r+0x48>
 800339a:	6821      	ldr	r1, [r4, #0]
 800339c:	1862      	adds	r2, r4, r1
 800339e:	4293      	cmp	r3, r2
 80033a0:	bf01      	itttt	eq
 80033a2:	681a      	ldreq	r2, [r3, #0]
 80033a4:	685b      	ldreq	r3, [r3, #4]
 80033a6:	1852      	addeq	r2, r2, r1
 80033a8:	6022      	streq	r2, [r4, #0]
 80033aa:	6063      	str	r3, [r4, #4]
 80033ac:	6004      	str	r4, [r0, #0]
 80033ae:	e7ed      	b.n	800338c <_free_r+0x24>
 80033b0:	461a      	mov	r2, r3
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	b10b      	cbz	r3, 80033ba <_free_r+0x52>
 80033b6:	42a3      	cmp	r3, r4
 80033b8:	d9fa      	bls.n	80033b0 <_free_r+0x48>
 80033ba:	6811      	ldr	r1, [r2, #0]
 80033bc:	1850      	adds	r0, r2, r1
 80033be:	42a0      	cmp	r0, r4
 80033c0:	d10b      	bne.n	80033da <_free_r+0x72>
 80033c2:	6820      	ldr	r0, [r4, #0]
 80033c4:	4401      	add	r1, r0
 80033c6:	1850      	adds	r0, r2, r1
 80033c8:	4283      	cmp	r3, r0
 80033ca:	6011      	str	r1, [r2, #0]
 80033cc:	d1de      	bne.n	800338c <_free_r+0x24>
 80033ce:	6818      	ldr	r0, [r3, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	4401      	add	r1, r0
 80033d4:	6011      	str	r1, [r2, #0]
 80033d6:	6053      	str	r3, [r2, #4]
 80033d8:	e7d8      	b.n	800338c <_free_r+0x24>
 80033da:	d902      	bls.n	80033e2 <_free_r+0x7a>
 80033dc:	230c      	movs	r3, #12
 80033de:	602b      	str	r3, [r5, #0]
 80033e0:	e7d4      	b.n	800338c <_free_r+0x24>
 80033e2:	6820      	ldr	r0, [r4, #0]
 80033e4:	1821      	adds	r1, r4, r0
 80033e6:	428b      	cmp	r3, r1
 80033e8:	bf01      	itttt	eq
 80033ea:	6819      	ldreq	r1, [r3, #0]
 80033ec:	685b      	ldreq	r3, [r3, #4]
 80033ee:	1809      	addeq	r1, r1, r0
 80033f0:	6021      	streq	r1, [r4, #0]
 80033f2:	6063      	str	r3, [r4, #4]
 80033f4:	6054      	str	r4, [r2, #4]
 80033f6:	e7c9      	b.n	800338c <_free_r+0x24>
 80033f8:	bd38      	pop	{r3, r4, r5, pc}
 80033fa:	bf00      	nop
 80033fc:	2000009c 	.word	0x2000009c

08003400 <_malloc_r>:
 8003400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003402:	1ccd      	adds	r5, r1, #3
 8003404:	f025 0503 	bic.w	r5, r5, #3
 8003408:	3508      	adds	r5, #8
 800340a:	2d0c      	cmp	r5, #12
 800340c:	bf38      	it	cc
 800340e:	250c      	movcc	r5, #12
 8003410:	2d00      	cmp	r5, #0
 8003412:	4606      	mov	r6, r0
 8003414:	db01      	blt.n	800341a <_malloc_r+0x1a>
 8003416:	42a9      	cmp	r1, r5
 8003418:	d903      	bls.n	8003422 <_malloc_r+0x22>
 800341a:	230c      	movs	r3, #12
 800341c:	6033      	str	r3, [r6, #0]
 800341e:	2000      	movs	r0, #0
 8003420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003422:	f000 f87d 	bl	8003520 <__malloc_lock>
 8003426:	4921      	ldr	r1, [pc, #132]	; (80034ac <_malloc_r+0xac>)
 8003428:	680a      	ldr	r2, [r1, #0]
 800342a:	4614      	mov	r4, r2
 800342c:	b99c      	cbnz	r4, 8003456 <_malloc_r+0x56>
 800342e:	4f20      	ldr	r7, [pc, #128]	; (80034b0 <_malloc_r+0xb0>)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	b923      	cbnz	r3, 800343e <_malloc_r+0x3e>
 8003434:	4621      	mov	r1, r4
 8003436:	4630      	mov	r0, r6
 8003438:	f000 f862 	bl	8003500 <_sbrk_r>
 800343c:	6038      	str	r0, [r7, #0]
 800343e:	4629      	mov	r1, r5
 8003440:	4630      	mov	r0, r6
 8003442:	f000 f85d 	bl	8003500 <_sbrk_r>
 8003446:	1c43      	adds	r3, r0, #1
 8003448:	d123      	bne.n	8003492 <_malloc_r+0x92>
 800344a:	230c      	movs	r3, #12
 800344c:	4630      	mov	r0, r6
 800344e:	6033      	str	r3, [r6, #0]
 8003450:	f000 f86c 	bl	800352c <__malloc_unlock>
 8003454:	e7e3      	b.n	800341e <_malloc_r+0x1e>
 8003456:	6823      	ldr	r3, [r4, #0]
 8003458:	1b5b      	subs	r3, r3, r5
 800345a:	d417      	bmi.n	800348c <_malloc_r+0x8c>
 800345c:	2b0b      	cmp	r3, #11
 800345e:	d903      	bls.n	8003468 <_malloc_r+0x68>
 8003460:	6023      	str	r3, [r4, #0]
 8003462:	441c      	add	r4, r3
 8003464:	6025      	str	r5, [r4, #0]
 8003466:	e004      	b.n	8003472 <_malloc_r+0x72>
 8003468:	6863      	ldr	r3, [r4, #4]
 800346a:	42a2      	cmp	r2, r4
 800346c:	bf0c      	ite	eq
 800346e:	600b      	streq	r3, [r1, #0]
 8003470:	6053      	strne	r3, [r2, #4]
 8003472:	4630      	mov	r0, r6
 8003474:	f000 f85a 	bl	800352c <__malloc_unlock>
 8003478:	f104 000b 	add.w	r0, r4, #11
 800347c:	1d23      	adds	r3, r4, #4
 800347e:	f020 0007 	bic.w	r0, r0, #7
 8003482:	1ac2      	subs	r2, r0, r3
 8003484:	d0cc      	beq.n	8003420 <_malloc_r+0x20>
 8003486:	1a1b      	subs	r3, r3, r0
 8003488:	50a3      	str	r3, [r4, r2]
 800348a:	e7c9      	b.n	8003420 <_malloc_r+0x20>
 800348c:	4622      	mov	r2, r4
 800348e:	6864      	ldr	r4, [r4, #4]
 8003490:	e7cc      	b.n	800342c <_malloc_r+0x2c>
 8003492:	1cc4      	adds	r4, r0, #3
 8003494:	f024 0403 	bic.w	r4, r4, #3
 8003498:	42a0      	cmp	r0, r4
 800349a:	d0e3      	beq.n	8003464 <_malloc_r+0x64>
 800349c:	1a21      	subs	r1, r4, r0
 800349e:	4630      	mov	r0, r6
 80034a0:	f000 f82e 	bl	8003500 <_sbrk_r>
 80034a4:	3001      	adds	r0, #1
 80034a6:	d1dd      	bne.n	8003464 <_malloc_r+0x64>
 80034a8:	e7cf      	b.n	800344a <_malloc_r+0x4a>
 80034aa:	bf00      	nop
 80034ac:	2000009c 	.word	0x2000009c
 80034b0:	200000a0 	.word	0x200000a0

080034b4 <_realloc_r>:
 80034b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b6:	4607      	mov	r7, r0
 80034b8:	4614      	mov	r4, r2
 80034ba:	460e      	mov	r6, r1
 80034bc:	b921      	cbnz	r1, 80034c8 <_realloc_r+0x14>
 80034be:	4611      	mov	r1, r2
 80034c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80034c4:	f7ff bf9c 	b.w	8003400 <_malloc_r>
 80034c8:	b922      	cbnz	r2, 80034d4 <_realloc_r+0x20>
 80034ca:	f7ff ff4d 	bl	8003368 <_free_r>
 80034ce:	4625      	mov	r5, r4
 80034d0:	4628      	mov	r0, r5
 80034d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034d4:	f000 f830 	bl	8003538 <_malloc_usable_size_r>
 80034d8:	42a0      	cmp	r0, r4
 80034da:	d20f      	bcs.n	80034fc <_realloc_r+0x48>
 80034dc:	4621      	mov	r1, r4
 80034de:	4638      	mov	r0, r7
 80034e0:	f7ff ff8e 	bl	8003400 <_malloc_r>
 80034e4:	4605      	mov	r5, r0
 80034e6:	2800      	cmp	r0, #0
 80034e8:	d0f2      	beq.n	80034d0 <_realloc_r+0x1c>
 80034ea:	4631      	mov	r1, r6
 80034ec:	4622      	mov	r2, r4
 80034ee:	f7ff ff13 	bl	8003318 <memcpy>
 80034f2:	4631      	mov	r1, r6
 80034f4:	4638      	mov	r0, r7
 80034f6:	f7ff ff37 	bl	8003368 <_free_r>
 80034fa:	e7e9      	b.n	80034d0 <_realloc_r+0x1c>
 80034fc:	4635      	mov	r5, r6
 80034fe:	e7e7      	b.n	80034d0 <_realloc_r+0x1c>

08003500 <_sbrk_r>:
 8003500:	b538      	push	{r3, r4, r5, lr}
 8003502:	2300      	movs	r3, #0
 8003504:	4d05      	ldr	r5, [pc, #20]	; (800351c <_sbrk_r+0x1c>)
 8003506:	4604      	mov	r4, r0
 8003508:	4608      	mov	r0, r1
 800350a:	602b      	str	r3, [r5, #0]
 800350c:	f7fd fa7e 	bl	8000a0c <_sbrk>
 8003510:	1c43      	adds	r3, r0, #1
 8003512:	d102      	bne.n	800351a <_sbrk_r+0x1a>
 8003514:	682b      	ldr	r3, [r5, #0]
 8003516:	b103      	cbz	r3, 800351a <_sbrk_r+0x1a>
 8003518:	6023      	str	r3, [r4, #0]
 800351a:	bd38      	pop	{r3, r4, r5, pc}
 800351c:	20000128 	.word	0x20000128

08003520 <__malloc_lock>:
 8003520:	4801      	ldr	r0, [pc, #4]	; (8003528 <__malloc_lock+0x8>)
 8003522:	f000 b811 	b.w	8003548 <__retarget_lock_acquire_recursive>
 8003526:	bf00      	nop
 8003528:	20000130 	.word	0x20000130

0800352c <__malloc_unlock>:
 800352c:	4801      	ldr	r0, [pc, #4]	; (8003534 <__malloc_unlock+0x8>)
 800352e:	f000 b80c 	b.w	800354a <__retarget_lock_release_recursive>
 8003532:	bf00      	nop
 8003534:	20000130 	.word	0x20000130

08003538 <_malloc_usable_size_r>:
 8003538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800353c:	1f18      	subs	r0, r3, #4
 800353e:	2b00      	cmp	r3, #0
 8003540:	bfbc      	itt	lt
 8003542:	580b      	ldrlt	r3, [r1, r0]
 8003544:	18c0      	addlt	r0, r0, r3
 8003546:	4770      	bx	lr

08003548 <__retarget_lock_acquire_recursive>:
 8003548:	4770      	bx	lr

0800354a <__retarget_lock_release_recursive>:
 800354a:	4770      	bx	lr

0800354c <_init>:
 800354c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354e:	bf00      	nop
 8003550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003552:	bc08      	pop	{r3}
 8003554:	469e      	mov	lr, r3
 8003556:	4770      	bx	lr

08003558 <_fini>:
 8003558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800355a:	bf00      	nop
 800355c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800355e:	bc08      	pop	{r3}
 8003560:	469e      	mov	lr, r3
 8003562:	4770      	bx	lr
