
STM32_27_WIFI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000297c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08002ab8  08002ab8  00012ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c30  08002c30  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002c30  08002c30  00012c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c38  08002c38  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c38  08002c38  00012c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c3c  08002c3c  00012c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08002c4c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08002c4c  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007fea  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019d0  00000000  00000000  0002801f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c8  00000000  00000000  000299f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005f0  00000000  00000000  0002a0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015b36  00000000  00000000  0002a6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000086bb  00000000  00000000  000401de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008420a  00000000  00000000  00048899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ccaa3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019c8  00000000  00000000  000ccaf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08002aa0 	.word	0x08002aa0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08002aa0 	.word	0x08002aa0

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b96e 	b.w	8000480 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	468e      	mov	lr, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	f040 8083 	bne.w	80002d4 <__udivmoddi4+0x118>
 80001ce:	428a      	cmp	r2, r1
 80001d0:	4617      	mov	r7, r2
 80001d2:	d947      	bls.n	8000264 <__udivmoddi4+0xa8>
 80001d4:	fab2 f382 	clz	r3, r2
 80001d8:	b14b      	cbz	r3, 80001ee <__udivmoddi4+0x32>
 80001da:	f1c3 0120 	rsb	r1, r3, #32
 80001de:	fa05 fe03 	lsl.w	lr, r5, r3
 80001e2:	fa20 f101 	lsr.w	r1, r0, r1
 80001e6:	409f      	lsls	r7, r3
 80001e8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001ec:	409c      	lsls	r4, r3
 80001ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001f2:	fbbe fcf8 	udiv	ip, lr, r8
 80001f6:	fa1f f987 	uxth.w	r9, r7
 80001fa:	fb08 e21c 	mls	r2, r8, ip, lr
 80001fe:	fb0c f009 	mul.w	r0, ip, r9
 8000202:	0c21      	lsrs	r1, r4, #16
 8000204:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000208:	4290      	cmp	r0, r2
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	18ba      	adds	r2, r7, r2
 800020e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000212:	f080 8118 	bcs.w	8000446 <__udivmoddi4+0x28a>
 8000216:	4290      	cmp	r0, r2
 8000218:	f240 8115 	bls.w	8000446 <__udivmoddi4+0x28a>
 800021c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000220:	443a      	add	r2, r7
 8000222:	1a12      	subs	r2, r2, r0
 8000224:	fbb2 f0f8 	udiv	r0, r2, r8
 8000228:	fb08 2210 	mls	r2, r8, r0, r2
 800022c:	fb00 f109 	mul.w	r1, r0, r9
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000236:	42a1      	cmp	r1, r4
 8000238:	d909      	bls.n	800024e <__udivmoddi4+0x92>
 800023a:	193c      	adds	r4, r7, r4
 800023c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000240:	f080 8103 	bcs.w	800044a <__udivmoddi4+0x28e>
 8000244:	42a1      	cmp	r1, r4
 8000246:	f240 8100 	bls.w	800044a <__udivmoddi4+0x28e>
 800024a:	3802      	subs	r0, #2
 800024c:	443c      	add	r4, r7
 800024e:	1a64      	subs	r4, r4, r1
 8000250:	2100      	movs	r1, #0
 8000252:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000256:	b11e      	cbz	r6, 8000260 <__udivmoddi4+0xa4>
 8000258:	2200      	movs	r2, #0
 800025a:	40dc      	lsrs	r4, r3
 800025c:	e9c6 4200 	strd	r4, r2, [r6]
 8000260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000264:	b902      	cbnz	r2, 8000268 <__udivmoddi4+0xac>
 8000266:	deff      	udf	#255	; 0xff
 8000268:	fab2 f382 	clz	r3, r2
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14f      	bne.n	8000310 <__udivmoddi4+0x154>
 8000270:	1a8d      	subs	r5, r1, r2
 8000272:	2101      	movs	r1, #1
 8000274:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000278:	fa1f f882 	uxth.w	r8, r2
 800027c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000280:	fb0e 551c 	mls	r5, lr, ip, r5
 8000284:	fb08 f00c 	mul.w	r0, r8, ip
 8000288:	0c22      	lsrs	r2, r4, #16
 800028a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800028e:	42a8      	cmp	r0, r5
 8000290:	d907      	bls.n	80002a2 <__udivmoddi4+0xe6>
 8000292:	197d      	adds	r5, r7, r5
 8000294:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000298:	d202      	bcs.n	80002a0 <__udivmoddi4+0xe4>
 800029a:	42a8      	cmp	r0, r5
 800029c:	f200 80e9 	bhi.w	8000472 <__udivmoddi4+0x2b6>
 80002a0:	4694      	mov	ip, r2
 80002a2:	1a2d      	subs	r5, r5, r0
 80002a4:	fbb5 f0fe 	udiv	r0, r5, lr
 80002a8:	fb0e 5510 	mls	r5, lr, r0, r5
 80002ac:	fb08 f800 	mul.w	r8, r8, r0
 80002b0:	b2a4      	uxth	r4, r4
 80002b2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b6:	45a0      	cmp	r8, r4
 80002b8:	d907      	bls.n	80002ca <__udivmoddi4+0x10e>
 80002ba:	193c      	adds	r4, r7, r4
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c0:	d202      	bcs.n	80002c8 <__udivmoddi4+0x10c>
 80002c2:	45a0      	cmp	r8, r4
 80002c4:	f200 80d9 	bhi.w	800047a <__udivmoddi4+0x2be>
 80002c8:	4610      	mov	r0, r2
 80002ca:	eba4 0408 	sub.w	r4, r4, r8
 80002ce:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002d2:	e7c0      	b.n	8000256 <__udivmoddi4+0x9a>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d908      	bls.n	80002ea <__udivmoddi4+0x12e>
 80002d8:	2e00      	cmp	r6, #0
 80002da:	f000 80b1 	beq.w	8000440 <__udivmoddi4+0x284>
 80002de:	2100      	movs	r1, #0
 80002e0:	e9c6 0500 	strd	r0, r5, [r6]
 80002e4:	4608      	mov	r0, r1
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d14b      	bne.n	800038a <__udivmoddi4+0x1ce>
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0x140>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80b9 	bhi.w	800046e <__udivmoddi4+0x2b2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb65 0303 	sbc.w	r3, r5, r3
 8000302:	2001      	movs	r0, #1
 8000304:	469e      	mov	lr, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d0aa      	beq.n	8000260 <__udivmoddi4+0xa4>
 800030a:	e9c6 4e00 	strd	r4, lr, [r6]
 800030e:	e7a7      	b.n	8000260 <__udivmoddi4+0xa4>
 8000310:	409f      	lsls	r7, r3
 8000312:	f1c3 0220 	rsb	r2, r3, #32
 8000316:	40d1      	lsrs	r1, r2
 8000318:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	fa24 f202 	lsr.w	r2, r4, r2
 800032c:	409d      	lsls	r5, r3
 800032e:	fb00 fc08 	mul.w	ip, r0, r8
 8000332:	432a      	orrs	r2, r5
 8000334:	0c15      	lsrs	r5, r2, #16
 8000336:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800033a:	45ac      	cmp	ip, r5
 800033c:	fa04 f403 	lsl.w	r4, r4, r3
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0x19a>
 8000342:	197d      	adds	r5, r7, r5
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	f080 808f 	bcs.w	800046a <__udivmoddi4+0x2ae>
 800034c:	45ac      	cmp	ip, r5
 800034e:	f240 808c 	bls.w	800046a <__udivmoddi4+0x2ae>
 8000352:	3802      	subs	r0, #2
 8000354:	443d      	add	r5, r7
 8000356:	eba5 050c 	sub.w	r5, r5, ip
 800035a:	fbb5 f1fe 	udiv	r1, r5, lr
 800035e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000362:	fb01 f908 	mul.w	r9, r1, r8
 8000366:	b295      	uxth	r5, r2
 8000368:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800036c:	45a9      	cmp	r9, r5
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x1c4>
 8000370:	197d      	adds	r5, r7, r5
 8000372:	f101 32ff 	add.w	r2, r1, #4294967295
 8000376:	d274      	bcs.n	8000462 <__udivmoddi4+0x2a6>
 8000378:	45a9      	cmp	r9, r5
 800037a:	d972      	bls.n	8000462 <__udivmoddi4+0x2a6>
 800037c:	3902      	subs	r1, #2
 800037e:	443d      	add	r5, r7
 8000380:	eba5 0509 	sub.w	r5, r5, r9
 8000384:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000388:	e778      	b.n	800027c <__udivmoddi4+0xc0>
 800038a:	f1c1 0720 	rsb	r7, r1, #32
 800038e:	408b      	lsls	r3, r1
 8000390:	fa22 fc07 	lsr.w	ip, r2, r7
 8000394:	ea4c 0c03 	orr.w	ip, ip, r3
 8000398:	fa25 f407 	lsr.w	r4, r5, r7
 800039c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a0:	fbb4 f9fe 	udiv	r9, r4, lr
 80003a4:	fa1f f88c 	uxth.w	r8, ip
 80003a8:	fb0e 4419 	mls	r4, lr, r9, r4
 80003ac:	fa20 f307 	lsr.w	r3, r0, r7
 80003b0:	fb09 fa08 	mul.w	sl, r9, r8
 80003b4:	408d      	lsls	r5, r1
 80003b6:	431d      	orrs	r5, r3
 80003b8:	0c2b      	lsrs	r3, r5, #16
 80003ba:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003be:	45a2      	cmp	sl, r4
 80003c0:	fa02 f201 	lsl.w	r2, r2, r1
 80003c4:	fa00 f301 	lsl.w	r3, r0, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x222>
 80003ca:	eb1c 0404 	adds.w	r4, ip, r4
 80003ce:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d2:	d248      	bcs.n	8000466 <__udivmoddi4+0x2aa>
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d946      	bls.n	8000466 <__udivmoddi4+0x2aa>
 80003d8:	f1a9 0902 	sub.w	r9, r9, #2
 80003dc:	4464      	add	r4, ip
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003e6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003ea:	fb00 fa08 	mul.w	sl, r0, r8
 80003ee:	b2ad      	uxth	r5, r5
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	45a2      	cmp	sl, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x24e>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 35ff 	add.w	r5, r0, #4294967295
 8000400:	d22d      	bcs.n	800045e <__udivmoddi4+0x2a2>
 8000402:	45a2      	cmp	sl, r4
 8000404:	d92b      	bls.n	800045e <__udivmoddi4+0x2a2>
 8000406:	3802      	subs	r0, #2
 8000408:	4464      	add	r4, ip
 800040a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040e:	fba0 8902 	umull	r8, r9, r0, r2
 8000412:	eba4 040a 	sub.w	r4, r4, sl
 8000416:	454c      	cmp	r4, r9
 8000418:	46c6      	mov	lr, r8
 800041a:	464d      	mov	r5, r9
 800041c:	d319      	bcc.n	8000452 <__udivmoddi4+0x296>
 800041e:	d016      	beq.n	800044e <__udivmoddi4+0x292>
 8000420:	b15e      	cbz	r6, 800043a <__udivmoddi4+0x27e>
 8000422:	ebb3 020e 	subs.w	r2, r3, lr
 8000426:	eb64 0405 	sbc.w	r4, r4, r5
 800042a:	fa04 f707 	lsl.w	r7, r4, r7
 800042e:	fa22 f301 	lsr.w	r3, r2, r1
 8000432:	431f      	orrs	r7, r3
 8000434:	40cc      	lsrs	r4, r1
 8000436:	e9c6 7400 	strd	r7, r4, [r6]
 800043a:	2100      	movs	r1, #0
 800043c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000440:	4631      	mov	r1, r6
 8000442:	4630      	mov	r0, r6
 8000444:	e70c      	b.n	8000260 <__udivmoddi4+0xa4>
 8000446:	468c      	mov	ip, r1
 8000448:	e6eb      	b.n	8000222 <__udivmoddi4+0x66>
 800044a:	4610      	mov	r0, r2
 800044c:	e6ff      	b.n	800024e <__udivmoddi4+0x92>
 800044e:	4543      	cmp	r3, r8
 8000450:	d2e6      	bcs.n	8000420 <__udivmoddi4+0x264>
 8000452:	ebb8 0e02 	subs.w	lr, r8, r2
 8000456:	eb69 050c 	sbc.w	r5, r9, ip
 800045a:	3801      	subs	r0, #1
 800045c:	e7e0      	b.n	8000420 <__udivmoddi4+0x264>
 800045e:	4628      	mov	r0, r5
 8000460:	e7d3      	b.n	800040a <__udivmoddi4+0x24e>
 8000462:	4611      	mov	r1, r2
 8000464:	e78c      	b.n	8000380 <__udivmoddi4+0x1c4>
 8000466:	4681      	mov	r9, r0
 8000468:	e7b9      	b.n	80003de <__udivmoddi4+0x222>
 800046a:	4608      	mov	r0, r1
 800046c:	e773      	b.n	8000356 <__udivmoddi4+0x19a>
 800046e:	4608      	mov	r0, r1
 8000470:	e749      	b.n	8000306 <__udivmoddi4+0x14a>
 8000472:	f1ac 0c02 	sub.w	ip, ip, #2
 8000476:	443d      	add	r5, r7
 8000478:	e713      	b.n	80002a2 <__udivmoddi4+0xe6>
 800047a:	3802      	subs	r0, #2
 800047c:	443c      	add	r4, r7
 800047e:	e724      	b.n	80002ca <__udivmoddi4+0x10e>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b08a      	sub	sp, #40	; 0x28
 8000488:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048a:	f107 0314 	add.w	r3, r7, #20
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
 8000496:	60da      	str	r2, [r3, #12]
 8000498:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800049a:	4b2a      	ldr	r3, [pc, #168]	; (8000544 <MX_GPIO_Init+0xc0>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	4a29      	ldr	r2, [pc, #164]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004a0:	f043 0304 	orr.w	r3, r3, #4
 80004a4:	61d3      	str	r3, [r2, #28]
 80004a6:	4b27      	ldr	r3, [pc, #156]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	f003 0304 	and.w	r3, r3, #4
 80004ae:	613b      	str	r3, [r7, #16]
 80004b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004b2:	4b24      	ldr	r3, [pc, #144]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	4a23      	ldr	r2, [pc, #140]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004b8:	f043 0320 	orr.w	r3, r3, #32
 80004bc:	61d3      	str	r3, [r2, #28]
 80004be:	4b21      	ldr	r3, [pc, #132]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004c0:	69db      	ldr	r3, [r3, #28]
 80004c2:	f003 0320 	and.w	r3, r3, #32
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ca:	4b1e      	ldr	r3, [pc, #120]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004cc:	69db      	ldr	r3, [r3, #28]
 80004ce:	4a1d      	ldr	r2, [pc, #116]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	61d3      	str	r3, [r2, #28]
 80004d6:	4b1b      	ldr	r3, [pc, #108]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	60bb      	str	r3, [r7, #8]
 80004e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e2:	4b18      	ldr	r3, [pc, #96]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	4a17      	ldr	r2, [pc, #92]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004e8:	f043 0302 	orr.w	r3, r3, #2
 80004ec:	61d3      	str	r3, [r2, #28]
 80004ee:	4b15      	ldr	r3, [pc, #84]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004f0:	69db      	ldr	r3, [r3, #28]
 80004f2:	f003 0302 	and.w	r3, r3, #2
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2120      	movs	r1, #32
 80004fe:	4812      	ldr	r0, [pc, #72]	; (8000548 <MX_GPIO_Init+0xc4>)
 8000500:	f000 ff08 	bl	8001314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000504:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800050a:	4b10      	ldr	r3, [pc, #64]	; (800054c <MX_GPIO_Init+0xc8>)
 800050c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050e:	2300      	movs	r3, #0
 8000510:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000512:	f107 0314 	add.w	r3, r7, #20
 8000516:	4619      	mov	r1, r3
 8000518:	480d      	ldr	r0, [pc, #52]	; (8000550 <MX_GPIO_Init+0xcc>)
 800051a:	f000 fd6b 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800051e:	2320      	movs	r3, #32
 8000520:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000522:	2301      	movs	r3, #1
 8000524:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000526:	2300      	movs	r3, #0
 8000528:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052a:	2300      	movs	r3, #0
 800052c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800052e:	f107 0314 	add.w	r3, r7, #20
 8000532:	4619      	mov	r1, r3
 8000534:	4804      	ldr	r0, [pc, #16]	; (8000548 <MX_GPIO_Init+0xc4>)
 8000536:	f000 fd5d 	bl	8000ff4 <HAL_GPIO_Init>

}
 800053a:	bf00      	nop
 800053c:	3728      	adds	r7, #40	; 0x28
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40023800 	.word	0x40023800
 8000548:	40020000 	.word	0x40020000
 800054c:	10110000 	.word	0x10110000
 8000550:	40020800 	.word	0x40020800

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	f5ad 4d1c 	sub.w	sp, sp, #39936	; 0x9c00
 800055a:	b090      	sub	sp, #64	; 0x40
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055e:	f000 fb6a 	bl	8000c36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000562:	f000 f8b5 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000566:	f7ff ff8d 	bl	8000484 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800056a:	f000 f989 	bl	8000880 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800056e:	f000 f9b1 	bl	80008d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */



  int ok[MAX_RCP_LEN ] = {0};
 8000572:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000576:	3b40      	subs	r3, #64	; 0x40
 8000578:	4618      	mov	r0, r3
 800057a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800057e:	461a      	mov	r2, r3
 8000580:	2100      	movs	r1, #0
 8000582:	f002 fa6d 	bl	8002a60 <memset>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  commandMode();
 8000586:	f000 fa53 	bl	8000a30 <commandMode>
  //sendCommand("factory R\r", "Defaults",ok);

  //sendCommand("get wlan", "AOK",ok);


  sendCommand("set wlan ssid " SSID "\r", "OK",ok);
 800058a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800058e:	3b40      	subs	r3, #64	; 0x40
 8000590:	461a      	mov	r2, r3
 8000592:	493b      	ldr	r1, [pc, #236]	; (8000680 <main+0x12c>)
 8000594:	483b      	ldr	r0, [pc, #236]	; (8000684 <main+0x130>)
 8000596:	f000 fa8b 	bl	8000ab0 <sendCommand>
  if (strcmp(AUTH , WIFLY_AUTH_OPEN) > 0 || strcmp(AUTH , WIFLY_AUTH_OPEN) < 0 )
    {
	  sendCommand("set wlan auth " AUTH "\r","OK", ok);
 800059a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800059e:	3b40      	subs	r3, #64	; 0x40
 80005a0:	461a      	mov	r2, r3
 80005a2:	4937      	ldr	r1, [pc, #220]	; (8000680 <main+0x12c>)
 80005a4:	4838      	ldr	r0, [pc, #224]	; (8000688 <main+0x134>)
 80005a6:	f000 fa83 	bl	8000ab0 <sendCommand>
  	  if (strcmp(AUTH , WIFLY_AUTH_WEP)==0)
  	  {
  		  sendCommand("set wlan key " KEY "\r", "OK",ok); // Key must be EXACTLY 13 bytes (26 ASCII chars)
  	  }
  	  else{
  		  sendCommand("set wlan phrase " KEY "\r", "OK",ok);
 80005aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005ae:	3b40      	subs	r3, #64	; 0x40
 80005b0:	461a      	mov	r2, r3
 80005b2:	4933      	ldr	r1, [pc, #204]	; (8000680 <main+0x12c>)
 80005b4:	4835      	ldr	r0, [pc, #212]	; (800068c <main+0x138>)
 80005b6:	f000 fa7b 	bl	8000ab0 <sendCommand>
  	  }
    }

  //sendCommand("get wlan\r", SSID,ok);
  sendCommand("join " SSID "\r", "Associated!",ok);
 80005ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005be:	3b40      	subs	r3, #64	; 0x40
 80005c0:	461a      	mov	r2, r3
 80005c2:	4933      	ldr	r1, [pc, #204]	; (8000690 <main+0x13c>)
 80005c4:	4833      	ldr	r0, [pc, #204]	; (8000694 <main+0x140>)
 80005c6:	f000 fa73 	bl	8000ab0 <sendCommand>

  sendCommand("save\r", "Storing in config",ok);
 80005ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005ce:	3b40      	subs	r3, #64	; 0x40
 80005d0:	461a      	mov	r2, r3
 80005d2:	4931      	ldr	r1, [pc, #196]	; (8000698 <main+0x144>)
 80005d4:	4831      	ldr	r0, [pc, #196]	; (800069c <main+0x148>)
 80005d6:	f000 fa6b 	bl	8000ab0 <sendCommand>
  sendCommand("reboot\r", "*READY*", ok);
 80005da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005de:	3b40      	subs	r3, #64	; 0x40
 80005e0:	461a      	mov	r2, r3
 80005e2:	492f      	ldr	r1, [pc, #188]	; (80006a0 <main+0x14c>)
 80005e4:	482f      	ldr	r0, [pc, #188]	; (80006a4 <main+0x150>)
 80005e6:	f000 fa63 	bl	8000ab0 <sendCommand>
  //sendCommand("exit\r", "EXIT", ok);
  HAL_Delay(500);
 80005ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ee:	f000 fb91 	bl	8000d14 <HAL_Delay>
  commandMode();
 80005f2:	f000 fa1d 	bl	8000a30 <commandMode>


  sendCommand("join\r","Associated!",ok);
 80005f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005fa:	3b40      	subs	r3, #64	; 0x40
 80005fc:	461a      	mov	r2, r3
 80005fe:	4924      	ldr	r1, [pc, #144]	; (8000690 <main+0x13c>)
 8000600:	4829      	ldr	r0, [pc, #164]	; (80006a8 <main+0x154>)
 8000602:	f000 fa55 	bl	8000ab0 <sendCommand>


  //sendCommand("get everything", "AOK",ok);
  //sendCommand("set wlan join 1","OK",ok);

  sendCommand("set ip protocol 18\r","OK",ok); //enable html client
 8000606:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800060a:	3b40      	subs	r3, #64	; 0x40
 800060c:	461a      	mov	r2, r3
 800060e:	491c      	ldr	r1, [pc, #112]	; (8000680 <main+0x12c>)
 8000610:	4826      	ldr	r0, [pc, #152]	; (80006ac <main+0x158>)
 8000612:	f000 fa4d 	bl	8000ab0 <sendCommand>
  //sendCommand("set ip host " HOST_IP"\r","OK",ok); //set remote IP to connect to
  sendCommand("set ip address 0\r","OK",ok);// so WiFly will use DNS
 8000616:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800061a:	3b40      	subs	r3, #64	; 0x40
 800061c:	461a      	mov	r2, r3
 800061e:	4918      	ldr	r1, [pc, #96]	; (8000680 <main+0x12c>)
 8000620:	4823      	ldr	r0, [pc, #140]	; (80006b0 <main+0x15c>)
 8000622:	f000 fa45 	bl	8000ab0 <sendCommand>
  sendCommand("set ip remote "STD_PORT"\r","OK",ok); //set remote Port to connect to
 8000626:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800062a:	3b40      	subs	r3, #64	; 0x40
 800062c:	461a      	mov	r2, r3
 800062e:	4914      	ldr	r1, [pc, #80]	; (8000680 <main+0x12c>)
 8000630:	4820      	ldr	r0, [pc, #128]	; (80006b4 <main+0x160>)
 8000632:	f000 fa3d 	bl	8000ab0 <sendCommand>
  sendCommand("set dns name " URL"\r", "AOK", ok);
 8000636:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800063a:	3b40      	subs	r3, #64	; 0x40
 800063c:	461a      	mov	r2, r3
 800063e:	491e      	ldr	r1, [pc, #120]	; (80006b8 <main+0x164>)
 8000640:	481e      	ldr	r0, [pc, #120]	; (80006bc <main+0x168>)
 8000642:	f000 fa35 	bl	8000ab0 <sendCommand>

  sendCommand("set com remote 0\r","OK",ok); // turn off the REMOTE string so it does not interfere with the post
 8000646:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800064a:	3b40      	subs	r3, #64	; 0x40
 800064c:	461a      	mov	r2, r3
 800064e:	490c      	ldr	r1, [pc, #48]	; (8000680 <main+0x12c>)
 8000650:	481b      	ldr	r0, [pc, #108]	; (80006c0 <main+0x16c>)
 8000652:	f000 fa2d 	bl	8000ab0 <sendCommand>
  //sendCommand("set comm open *OPEN*\r","OK",ok); // set the string that the wifi shield will output when a connection is opened

  //sendCommand("open " HOST_IP " " HOST_PORT"\r","*OPEN*",ok);
  sendCommand("open\r","*OPEN*",ok);
 8000656:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800065a:	3b40      	subs	r3, #64	; 0x40
 800065c:	461a      	mov	r2, r3
 800065e:	4919      	ldr	r1, [pc, #100]	; (80006c4 <main+0x170>)
 8000660:	4819      	ldr	r0, [pc, #100]	; (80006c8 <main+0x174>)
 8000662:	f000 fa25 	bl	8000ab0 <sendCommand>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  sendData("GET /get \n\n","AOK", ok);
 8000666:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800066a:	3b40      	subs	r3, #64	; 0x40
 800066c:	461a      	mov	r2, r3
 800066e:	4912      	ldr	r1, [pc, #72]	; (80006b8 <main+0x164>)
 8000670:	4816      	ldr	r0, [pc, #88]	; (80006cc <main+0x178>)
 8000672:	f000 fa75 	bl	8000b60 <sendData>

	  //sendData("GET /ShowData?id=555 \n\n","AOK", ok);
	  //sendData("GET /data/2.5/weather?q=San%20Francisco,US \n\n","AOK", ok);
	  HAL_Delay(5000);
 8000676:	f241 3088 	movw	r0, #5000	; 0x1388
 800067a:	f000 fb4b 	bl	8000d14 <HAL_Delay>
  {
 800067e:	e7f2      	b.n	8000666 <main+0x112>
 8000680:	08002ab8 	.word	0x08002ab8
 8000684:	08002abc 	.word	0x08002abc
 8000688:	08002ad8 	.word	0x08002ad8
 800068c:	08002aec 	.word	0x08002aec
 8000690:	08002b08 	.word	0x08002b08
 8000694:	08002b14 	.word	0x08002b14
 8000698:	08002b24 	.word	0x08002b24
 800069c:	08002b38 	.word	0x08002b38
 80006a0:	08002b40 	.word	0x08002b40
 80006a4:	08002b48 	.word	0x08002b48
 80006a8:	08002b50 	.word	0x08002b50
 80006ac:	08002b58 	.word	0x08002b58
 80006b0:	08002b6c 	.word	0x08002b6c
 80006b4:	08002b80 	.word	0x08002b80
 80006b8:	08002b94 	.word	0x08002b94
 80006bc:	08002b98 	.word	0x08002b98
 80006c0:	08002bb4 	.word	0x08002bb4
 80006c4:	08002bc8 	.word	0x08002bc8
 80006c8:	08002bd0 	.word	0x08002bd0
 80006cc:	08002bd8 	.word	0x08002bd8

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b092      	sub	sp, #72	; 0x48
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	2234      	movs	r2, #52	; 0x34
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f002 f9be 	bl	8002a60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	463b      	mov	r3, r7
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f2:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <SystemClock_Config+0x98>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80006fa:	4a1b      	ldr	r2, [pc, #108]	; (8000768 <SystemClock_Config+0x98>)
 80006fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000700:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000702:	2302      	movs	r3, #2
 8000704:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000706:	2301      	movs	r3, #1
 8000708:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800070a:	2310      	movs	r3, #16
 800070c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070e:	2302      	movs	r3, #2
 8000710:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000712:	2300      	movs	r3, #0
 8000714:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000716:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800071a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800071c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000720:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	4618      	mov	r0, r3
 8000728:	f000 fe26 	bl	8001378 <HAL_RCC_OscConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000732:	f000 f81b 	bl	800076c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000736:	230f      	movs	r3, #15
 8000738:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073a:	2303      	movs	r3, #3
 800073c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	2101      	movs	r1, #1
 800074e:	4618      	mov	r0, r3
 8000750:	f001 f942 	bl	80019d8 <HAL_RCC_ClockConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800075a:	f000 f807 	bl	800076c <Error_Handler>
  }
}
 800075e:	bf00      	nop
 8000760:	3748      	adds	r7, #72	; 0x48
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40007000 	.word	0x40007000

0800076c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000770:	b672      	cpsid	i
}
 8000772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000774:	e7fe      	b.n	8000774 <Error_Handler+0x8>
	...

08000778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <HAL_MspInit+0x5c>)
 8000780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000782:	4a14      	ldr	r2, [pc, #80]	; (80007d4 <HAL_MspInit+0x5c>)
 8000784:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000788:	6253      	str	r3, [r2, #36]	; 0x24
 800078a:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <HAL_MspInit+0x5c>)
 800078c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800078e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <HAL_MspInit+0x5c>)
 8000798:	6a1b      	ldr	r3, [r3, #32]
 800079a:	4a0e      	ldr	r2, [pc, #56]	; (80007d4 <HAL_MspInit+0x5c>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6213      	str	r3, [r2, #32]
 80007a2:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <HAL_MspInit+0x5c>)
 80007a4:	6a1b      	ldr	r3, [r3, #32]
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <HAL_MspInit+0x5c>)
 80007b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007b2:	4a08      	ldr	r2, [pc, #32]	; (80007d4 <HAL_MspInit+0x5c>)
 80007b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b8:	6253      	str	r3, [r2, #36]	; 0x24
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <HAL_MspInit+0x5c>)
 80007bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007c6:	2007      	movs	r0, #7
 80007c8:	f000 fb92 	bl	8000ef0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007cc:	bf00      	nop
 80007ce:	3710      	adds	r7, #16
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40023800 	.word	0x40023800

080007d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <NMI_Handler+0x4>

080007de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e2:	e7fe      	b.n	80007e2 <HardFault_Handler+0x4>

080007e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <MemManage_Handler+0x4>

080007ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ee:	e7fe      	b.n	80007ee <BusFault_Handler+0x4>

080007f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <UsageFault_Handler+0x4>

080007f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr

08000802 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr

0800080e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	46bd      	mov	sp, r7
 8000816:	bc80      	pop	{r7}
 8000818:	4770      	bx	lr

0800081a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800081e:	f000 fa5d 	bl	8000cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800082c:	4802      	ldr	r0, [pc, #8]	; (8000838 <USART1_IRQHandler+0x10>)
 800082e:	f001 fd8b 	bl	8002348 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000034 	.word	0x20000034

0800083c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	static uint8_t data[10] = {0};
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000840:	2120      	movs	r1, #32
 8000842:	4806      	ldr	r0, [pc, #24]	; (800085c <USART2_IRQHandler+0x20>)
 8000844:	f000 fd7e 	bl	8001344 <HAL_GPIO_TogglePin>
	HAL_UART_Receive_IT(&huart2, data, sizeof(data));
 8000848:	220a      	movs	r2, #10
 800084a:	4905      	ldr	r1, [pc, #20]	; (8000860 <USART2_IRQHandler+0x24>)
 800084c:	4805      	ldr	r0, [pc, #20]	; (8000864 <USART2_IRQHandler+0x28>)
 800084e:	f001 fd27 	bl	80022a0 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000852:	4804      	ldr	r0, [pc, #16]	; (8000864 <USART2_IRQHandler+0x28>)
 8000854:	f001 fd78 	bl	8002348 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40020000 	.word	0x40020000
 8000860:	20000028 	.word	0x20000028
 8000864:	20000074 	.word	0x20000074

08000868 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800086c:	4b03      	ldr	r3, [pc, #12]	; (800087c <SystemInit+0x14>)
 800086e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000872:	609a      	str	r2, [r3, #8]
#endif
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 8000886:	4a12      	ldr	r2, [pc, #72]	; (80008d0 <MX_USART1_UART_Init+0x50>)
 8000888:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 800088c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000890:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a4:	4b09      	ldr	r3, [pc, #36]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 80008a6:	220c      	movs	r2, #12
 80008a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 80008b8:	f001 fb22 	bl	8001f00 <HAL_UART_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008c2:	f7ff ff53 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000034 	.word	0x20000034
 80008d0:	40013800 	.word	0x40013800

080008d4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008da:	4a12      	ldr	r2, [pc, #72]	; (8000924 <MX_USART2_UART_Init+0x50>)
 80008dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008fa:	220c      	movs	r2, #12
 80008fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 800090c:	f001 faf8 	bl	8001f00 <HAL_UART_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000916:	f7ff ff29 	bl	800076c <Error_Handler>
  /* USER CODE BEGIN USART2_Init 2 */


  /* USER CODE END USART2_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000074 	.word	0x20000074
 8000924:	40004400 	.word	0x40004400

08000928 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08c      	sub	sp, #48	; 0x30
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a36      	ldr	r2, [pc, #216]	; (8000a20 <HAL_UART_MspInit+0xf8>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d131      	bne.n	80009ae <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800094a:	4b36      	ldr	r3, [pc, #216]	; (8000a24 <HAL_UART_MspInit+0xfc>)
 800094c:	6a1b      	ldr	r3, [r3, #32]
 800094e:	4a35      	ldr	r2, [pc, #212]	; (8000a24 <HAL_UART_MspInit+0xfc>)
 8000950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000954:	6213      	str	r3, [r2, #32]
 8000956:	4b33      	ldr	r3, [pc, #204]	; (8000a24 <HAL_UART_MspInit+0xfc>)
 8000958:	6a1b      	ldr	r3, [r3, #32]
 800095a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095e:	61bb      	str	r3, [r7, #24]
 8000960:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	4b30      	ldr	r3, [pc, #192]	; (8000a24 <HAL_UART_MspInit+0xfc>)
 8000964:	69db      	ldr	r3, [r3, #28]
 8000966:	4a2f      	ldr	r2, [pc, #188]	; (8000a24 <HAL_UART_MspInit+0xfc>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	61d3      	str	r3, [r2, #28]
 800096e:	4b2d      	ldr	r3, [pc, #180]	; (8000a24 <HAL_UART_MspInit+0xfc>)
 8000970:	69db      	ldr	r3, [r3, #28]
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	617b      	str	r3, [r7, #20]
 8000978:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800097a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800097e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000988:	2303      	movs	r3, #3
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800098c:	2307      	movs	r3, #7
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4824      	ldr	r0, [pc, #144]	; (8000a28 <HAL_UART_MspInit+0x100>)
 8000998:	f000 fb2c 	bl	8000ff4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800099c:	2200      	movs	r2, #0
 800099e:	2100      	movs	r1, #0
 80009a0:	2025      	movs	r0, #37	; 0x25
 80009a2:	f000 fab0 	bl	8000f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009a6:	2025      	movs	r0, #37	; 0x25
 80009a8:	f000 fac9 	bl	8000f3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009ac:	e034      	b.n	8000a18 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a1e      	ldr	r2, [pc, #120]	; (8000a2c <HAL_UART_MspInit+0x104>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d12f      	bne.n	8000a18 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009b8:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <HAL_UART_MspInit+0xfc>)
 80009ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009bc:	4a19      	ldr	r2, [pc, #100]	; (8000a24 <HAL_UART_MspInit+0xfc>)
 80009be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c2:	6253      	str	r3, [r2, #36]	; 0x24
 80009c4:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <HAL_UART_MspInit+0xfc>)
 80009c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <HAL_UART_MspInit+0xfc>)
 80009d2:	69db      	ldr	r3, [r3, #28]
 80009d4:	4a13      	ldr	r2, [pc, #76]	; (8000a24 <HAL_UART_MspInit+0xfc>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	61d3      	str	r3, [r2, #28]
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <HAL_UART_MspInit+0xfc>)
 80009de:	69db      	ldr	r3, [r3, #28]
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009e8:	230c      	movs	r3, #12
 80009ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f4:	2303      	movs	r3, #3
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009f8:	2307      	movs	r3, #7
 80009fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	4809      	ldr	r0, [pc, #36]	; (8000a28 <HAL_UART_MspInit+0x100>)
 8000a04:	f000 faf6 	bl	8000ff4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	2026      	movs	r0, #38	; 0x26
 8000a0e:	f000 fa7a 	bl	8000f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a12:	2026      	movs	r0, #38	; 0x26
 8000a14:	f000 fa93 	bl	8000f3e <HAL_NVIC_EnableIRQ>
}
 8000a18:	bf00      	nop
 8000a1a:	3730      	adds	r7, #48	; 0x30
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40013800 	.word	0x40013800
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020000 	.word	0x40020000
 8000a2c:	40004400 	.word	0x40004400

08000a30 <commandMode>:
#include "usart.h"



void commandMode()
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&huart2, (uint8_t *)"\nPasser en mode Commande\n\n", 27);
 8000a36:	221b      	movs	r2, #27
 8000a38:	4918      	ldr	r1, [pc, #96]	; (8000a9c <commandMode+0x6c>)
 8000a3a:	4819      	ldr	r0, [pc, #100]	; (8000aa0 <commandMode+0x70>)
 8000a3c:	f001 fbec 	bl	8002218 <HAL_UART_Transmit_IT>

	//Go into Command mode
		char CMD_MODE[4] = {'$','$','$'};
 8000a40:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <commandMode+0x74>)
 8000a42:	60fb      	str	r3, [r7, #12]
		uint8_t ok[5] = {0};
 8000a44:	2300      	movs	r3, #0
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	2300      	movs	r3, #0
 8000a4a:	723b      	strb	r3, [r7, #8]

		HAL_Delay(250);
 8000a4c:	20fa      	movs	r0, #250	; 0xfa
 8000a4e:	f000 f961 	bl	8000d14 <HAL_Delay>

		do{
			HAL_UART_Transmit(&huart1, (uint8_t *)CMD_MODE, strlen(CMD_MODE), 5000);
 8000a52:	f107 030c 	add.w	r3, r7, #12
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff fb90 	bl	800017c <strlen>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	b29a      	uxth	r2, r3
 8000a60:	f107 010c 	add.w	r1, r7, #12
 8000a64:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a68:	480f      	ldr	r0, [pc, #60]	; (8000aa8 <commandMode+0x78>)
 8000a6a:	f001 fa96 	bl	8001f9a <HAL_UART_Transmit>
		 	HAL_UART_Receive(&huart1, (uint8_t *)ok, MAX_RCP_LEN, DEFAULT_WAIT_RESPONSE_TIME);
 8000a6e:	1d39      	adds	r1, r7, #4
 8000a70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a74:	f242 7210 	movw	r2, #10000	; 0x2710
 8000a78:	480b      	ldr	r0, [pc, #44]	; (8000aa8 <commandMode+0x78>)
 8000a7a:	f001 fb27 	bl	80020cc <HAL_UART_Receive>
		  }while (strstr((char *) ok, "CMD")==NULL);
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	490a      	ldr	r1, [pc, #40]	; (8000aac <commandMode+0x7c>)
 8000a82:	4618      	mov	r0, r3
 8000a84:	f001 fff4 	bl	8002a70 <strstr>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d0e1      	beq.n	8000a52 <commandMode+0x22>
		HAL_Delay(250);
 8000a8e:	20fa      	movs	r0, #250	; 0xfa
 8000a90:	f000 f940 	bl	8000d14 <HAL_Delay>
}
 8000a94:	bf00      	nop
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	08002be4 	.word	0x08002be4
 8000aa0:	20000074 	.word	0x20000074
 8000aa4:	00242424 	.word	0x00242424
 8000aa8:	20000034 	.word	0x20000034
 8000aac:	08002c00 	.word	0x08002c00

08000ab0 <sendCommand>:


//void sendCommand(char * CMD, char * ACK,uint8_t timeout , uint8_t * ANS)
void sendCommand(char * CMD, char * ACK, uint8_t * ANS)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
	int i =0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
	int k = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	613b      	str	r3, [r7, #16]
	//uint8_t TIME_Delay;

	if(strstr(CMD, "scan")==NULL)
 8000ac4:	4923      	ldr	r1, [pc, #140]	; (8000b54 <sendCommand+0xa4>)
 8000ac6:	68f8      	ldr	r0, [r7, #12]
 8000ac8:	f001 ffd2 	bl	8002a70 <strstr>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d102      	bne.n	8000ad8 <sendCommand+0x28>
		k = 1;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	e001      	b.n	8000adc <sendCommand+0x2c>
	else
		k = 10;
 8000ad8:	230a      	movs	r3, #10
 8000ada:	613b      	str	r3, [r7, #16]

	memset(ANS,0,MAX_RCP_LEN);
 8000adc:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f001 ffbc 	bl	8002a60 <memset>
		//commandMode();

	//Pass the command to the module

	 	 do{
	 		 i++;
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	3301      	adds	r3, #1
 8000aec:	617b      	str	r3, [r7, #20]
	 		 HAL_Delay(200);
 8000aee:	20c8      	movs	r0, #200	; 0xc8
 8000af0:	f000 f910 	bl	8000d14 <HAL_Delay>

	 		 HAL_UART_Transmit_IT(&huart1,  (uint8_t *)CMD, strlen(CMD));
 8000af4:	68f8      	ldr	r0, [r7, #12]
 8000af6:	f7ff fb41 	bl	800017c <strlen>
 8000afa:	4603      	mov	r3, r0
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	461a      	mov	r2, r3
 8000b00:	68f9      	ldr	r1, [r7, #12]
 8000b02:	4815      	ldr	r0, [pc, #84]	; (8000b58 <sendCommand+0xa8>)
 8000b04:	f001 fb88 	bl	8002218 <HAL_UART_Transmit_IT>
	 		 HAL_UART_Receive(&huart1,  ANS, MAX_RCP_LEN, DEFAULT_WAIT_RESPONSE_TIME*k);
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b0e:	fb02 f303 	mul.w	r3, r2, r3
 8000b12:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	480f      	ldr	r0, [pc, #60]	; (8000b58 <sendCommand+0xa8>)
 8000b1a:	f001 fad7 	bl	80020cc <HAL_UART_Receive>

	 		 HAL_UART_Transmit_IT(&huart2,  (uint8_t *)CMD, strlen(CMD)+1);
 8000b1e:	68f8      	ldr	r0, [r7, #12]
 8000b20:	f7ff fb2c 	bl	800017c <strlen>
 8000b24:	4603      	mov	r3, r0
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	3301      	adds	r3, #1
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	68f9      	ldr	r1, [r7, #12]
 8000b30:	480a      	ldr	r0, [pc, #40]	; (8000b5c <sendCommand+0xac>)
 8000b32:	f001 fb71 	bl	8002218 <HAL_UART_Transmit_IT>

	 	 }while (strstr(( char *)ANS, ACK)==NULL && i <5);
 8000b36:	68b9      	ldr	r1, [r7, #8]
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f001 ff99 	bl	8002a70 <strstr>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d102      	bne.n	8000b4a <sendCommand+0x9a>
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	2b04      	cmp	r3, #4
 8000b48:	ddce      	ble.n	8000ae8 <sendCommand+0x38>

 }
 8000b4a:	bf00      	nop
 8000b4c:	3718      	adds	r7, #24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	08002c04 	.word	0x08002c04
 8000b58:	20000034 	.word	0x20000034
 8000b5c:	20000074 	.word	0x20000074

08000b60 <sendData>:

void sendData(char * DATA, char * ACK, uint8_t * ANS)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
	int i =0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]

	memset(ANS,0,MAX_RCP_LEN);
 8000b70:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b74:	2100      	movs	r1, #0
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f001 ff72 	bl	8002a60 <memset>
		//commandMode();

	//Pass the command to the module

	 	 do{
	 		i++;
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	617b      	str	r3, [r7, #20]
	 		HAL_Delay(200);
 8000b82:	20c8      	movs	r0, #200	; 0xc8
 8000b84:	f000 f8c6 	bl	8000d14 <HAL_Delay>

	 		 HAL_UART_Transmit_IT(&huart1,  (uint8_t *)DATA, strlen(DATA)+1);
 8000b88:	68f8      	ldr	r0, [r7, #12]
 8000b8a:	f7ff faf7 	bl	800017c <strlen>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	3301      	adds	r3, #1
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	461a      	mov	r2, r3
 8000b98:	68f9      	ldr	r1, [r7, #12]
 8000b9a:	4812      	ldr	r0, [pc, #72]	; (8000be4 <sendData+0x84>)
 8000b9c:	f001 fb3c 	bl	8002218 <HAL_UART_Transmit_IT>
	 		 HAL_UART_Receive(&huart1,  ANS, MAX_RCP_LEN, DEFAULT_WAIT_RESPONSE_TIME*3);
 8000ba0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000ba4:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ba8:	6879      	ldr	r1, [r7, #4]
 8000baa:	480e      	ldr	r0, [pc, #56]	; (8000be4 <sendData+0x84>)
 8000bac:	f001 fa8e 	bl	80020cc <HAL_UART_Receive>

	 		 HAL_UART_Transmit_IT(&huart2,  (uint8_t *)DATA, strlen(DATA)+1);
 8000bb0:	68f8      	ldr	r0, [r7, #12]
 8000bb2:	f7ff fae3 	bl	800017c <strlen>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	3301      	adds	r3, #1
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	68f9      	ldr	r1, [r7, #12]
 8000bc2:	4809      	ldr	r0, [pc, #36]	; (8000be8 <sendData+0x88>)
 8000bc4:	f001 fb28 	bl	8002218 <HAL_UART_Transmit_IT>

	 	 }while (strstr(( char *)ANS, ACK)==NULL && i <5);
 8000bc8:	68b9      	ldr	r1, [r7, #8]
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f001 ff50 	bl	8002a70 <strstr>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d102      	bne.n	8000bdc <sendData+0x7c>
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	2b04      	cmp	r3, #4
 8000bda:	ddcf      	ble.n	8000b7c <sendData+0x1c>

 }
 8000bdc:	bf00      	nop
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000034 	.word	0x20000034
 8000be8:	20000074 	.word	0x20000074

08000bec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000bec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000bee:	e003      	b.n	8000bf8 <LoopCopyDataInit>

08000bf0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000bf0:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000bf2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000bf4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000bf6:	3104      	adds	r1, #4

08000bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000bf8:	480a      	ldr	r0, [pc, #40]	; (8000c24 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000bfc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000bfe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000c00:	d3f6      	bcc.n	8000bf0 <CopyDataInit>
  ldr r2, =_sbss
 8000c02:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000c04:	e002      	b.n	8000c0c <LoopFillZerobss>

08000c06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000c08:	f842 3b04 	str.w	r3, [r2], #4

08000c0c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000c0e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c10:	d3f9      	bcc.n	8000c06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c12:	f7ff fe29 	bl	8000868 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c16:	f001 feff 	bl	8002a18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c1a:	f7ff fc9b 	bl	8000554 <main>
  bx lr
 8000c1e:	4770      	bx	lr
  ldr r3, =_sidata
 8000c20:	08002c40 	.word	0x08002c40
  ldr r0, =_sdata
 8000c24:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c28:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000c2c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000c30:	200000b8 	.word	0x200000b8

08000c34 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c34:	e7fe      	b.n	8000c34 <ADC1_IRQHandler>

08000c36 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c40:	2003      	movs	r0, #3
 8000c42:	f000 f955 	bl	8000ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c46:	2000      	movs	r0, #0
 8000c48:	f000 f80e 	bl	8000c68 <HAL_InitTick>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d002      	beq.n	8000c58 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	71fb      	strb	r3, [r7, #7]
 8000c56:	e001      	b.n	8000c5c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c58:	f7ff fd8e 	bl	8000778 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c70:	2300      	movs	r3, #0
 8000c72:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c74:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <HAL_InitTick+0x68>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d022      	beq.n	8000cc2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c7c:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <HAL_InitTick+0x6c>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <HAL_InitTick+0x68>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c88:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c90:	4618      	mov	r0, r3
 8000c92:	f000 f962 	bl	8000f5a <HAL_SYSTICK_Config>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d10f      	bne.n	8000cbc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b0f      	cmp	r3, #15
 8000ca0:	d809      	bhi.n	8000cb6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	6879      	ldr	r1, [r7, #4]
 8000ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8000caa:	f000 f92c 	bl	8000f06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cae:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <HAL_InitTick+0x70>)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6013      	str	r3, [r2, #0]
 8000cb4:	e007      	b.n	8000cc6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	73fb      	strb	r3, [r7, #15]
 8000cba:	e004      	b.n	8000cc6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	73fb      	strb	r3, [r7, #15]
 8000cc0:	e001      	b.n	8000cc6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000008 	.word	0x20000008
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	20000004 	.word	0x20000004

08000cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <HAL_IncTick+0x1c>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <HAL_IncTick+0x20>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4413      	add	r3, r2
 8000cea:	4a03      	ldr	r2, [pc, #12]	; (8000cf8 <HAL_IncTick+0x1c>)
 8000cec:	6013      	str	r3, [r2, #0]
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	200000b4 	.word	0x200000b4
 8000cfc:	20000008 	.word	0x20000008

08000d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return uwTick;
 8000d04:	4b02      	ldr	r3, [pc, #8]	; (8000d10 <HAL_GetTick+0x10>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr
 8000d10:	200000b4 	.word	0x200000b4

08000d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d1c:	f7ff fff0 	bl	8000d00 <HAL_GetTick>
 8000d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d2c:	d004      	beq.n	8000d38 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <HAL_Delay+0x40>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	4413      	add	r3, r2
 8000d36:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d38:	bf00      	nop
 8000d3a:	f7ff ffe1 	bl	8000d00 <HAL_GetTick>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	68fa      	ldr	r2, [r7, #12]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d8f7      	bhi.n	8000d3a <HAL_Delay+0x26>
  {
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	bf00      	nop
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000008 	.word	0x20000008

08000d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d74:	4013      	ands	r3, r2
 8000d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8a:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	60d3      	str	r3, [r2, #12]
}
 8000d90:	bf00      	nop
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da4:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <__NVIC_GetPriorityGrouping+0x18>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	0a1b      	lsrs	r3, r3, #8
 8000daa:	f003 0307 	and.w	r3, r3, #7
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	db0b      	blt.n	8000de6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	f003 021f 	and.w	r2, r3, #31
 8000dd4:	4906      	ldr	r1, [pc, #24]	; (8000df0 <__NVIC_EnableIRQ+0x34>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	095b      	lsrs	r3, r3, #5
 8000ddc:	2001      	movs	r0, #1
 8000dde:	fa00 f202 	lsl.w	r2, r0, r2
 8000de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr
 8000df0:	e000e100 	.word	0xe000e100

08000df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	6039      	str	r1, [r7, #0]
 8000dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	db0a      	blt.n	8000e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	490c      	ldr	r1, [pc, #48]	; (8000e40 <__NVIC_SetPriority+0x4c>)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	0112      	lsls	r2, r2, #4
 8000e14:	b2d2      	uxtb	r2, r2
 8000e16:	440b      	add	r3, r1
 8000e18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e1c:	e00a      	b.n	8000e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4908      	ldr	r1, [pc, #32]	; (8000e44 <__NVIC_SetPriority+0x50>)
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	f003 030f 	and.w	r3, r3, #15
 8000e2a:	3b04      	subs	r3, #4
 8000e2c:	0112      	lsls	r2, r2, #4
 8000e2e:	b2d2      	uxtb	r2, r2
 8000e30:	440b      	add	r3, r1
 8000e32:	761a      	strb	r2, [r3, #24]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000e100 	.word	0xe000e100
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b089      	sub	sp, #36	; 0x24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	f1c3 0307 	rsb	r3, r3, #7
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	bf28      	it	cs
 8000e66:	2304      	movcs	r3, #4
 8000e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	2b06      	cmp	r3, #6
 8000e70:	d902      	bls.n	8000e78 <NVIC_EncodePriority+0x30>
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3b03      	subs	r3, #3
 8000e76:	e000      	b.n	8000e7a <NVIC_EncodePriority+0x32>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43da      	mvns	r2, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e90:	f04f 31ff 	mov.w	r1, #4294967295
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9a:	43d9      	mvns	r1, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	4313      	orrs	r3, r2
         );
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3724      	adds	r7, #36	; 0x24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr

08000eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ebc:	d301      	bcc.n	8000ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00f      	b.n	8000ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <SysTick_Config+0x40>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eca:	210f      	movs	r1, #15
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed0:	f7ff ff90 	bl	8000df4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <SysTick_Config+0x40>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eda:	4b04      	ldr	r3, [pc, #16]	; (8000eec <SysTick_Config+0x40>)
 8000edc:	2207      	movs	r2, #7
 8000ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	e000e010 	.word	0xe000e010

08000ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff ff2d 	bl	8000d58 <__NVIC_SetPriorityGrouping>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b086      	sub	sp, #24
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	607a      	str	r2, [r7, #4]
 8000f12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f18:	f7ff ff42 	bl	8000da0 <__NVIC_GetPriorityGrouping>
 8000f1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	68b9      	ldr	r1, [r7, #8]
 8000f22:	6978      	ldr	r0, [r7, #20]
 8000f24:	f7ff ff90 	bl	8000e48 <NVIC_EncodePriority>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff ff5f 	bl	8000df4 <__NVIC_SetPriority>
}
 8000f36:	bf00      	nop
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	4603      	mov	r3, r0
 8000f46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff35 	bl	8000dbc <__NVIC_EnableIRQ>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff ffa2 	bl	8000eac <SysTick_Config>
 8000f68:	4603      	mov	r3, r0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b084      	sub	sp, #16
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d005      	beq.n	8000f96 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2204      	movs	r2, #4
 8000f8e:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	73fb      	strb	r3, [r7, #15]
 8000f94:	e029      	b.n	8000fea <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f022 020e 	bic.w	r2, r2, #14
 8000fa4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f022 0201 	bic.w	r2, r2, #1
 8000fb4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	f003 021c 	and.w	r2, r3, #28
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	4798      	blx	r3
    }
  }
  return status;
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b087      	sub	sp, #28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800100a:	e160      	b.n	80012ce <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	2101      	movs	r1, #1
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	fa01 f303 	lsl.w	r3, r1, r3
 8001018:	4013      	ands	r3, r2
 800101a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2b00      	cmp	r3, #0
 8001020:	f000 8152 	beq.w	80012c8 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d00b      	beq.n	8001044 <HAL_GPIO_Init+0x50>
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	2b02      	cmp	r3, #2
 8001032:	d007      	beq.n	8001044 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001038:	2b11      	cmp	r3, #17
 800103a:	d003      	beq.n	8001044 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	2b12      	cmp	r3, #18
 8001042:	d130      	bne.n	80010a6 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	2203      	movs	r2, #3
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	68da      	ldr	r2, [r3, #12]
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800107a:	2201      	movs	r2, #1
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	091b      	lsrs	r3, r3, #4
 8001090:	f003 0201 	and.w	r2, r3, #1
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	2203      	movs	r2, #3
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4013      	ands	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	689a      	ldr	r2, [r3, #8]
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_Init+0xf2>
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2b12      	cmp	r3, #18
 80010e4:	d123      	bne.n	800112e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	08da      	lsrs	r2, r3, #3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3208      	adds	r2, #8
 80010ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010f2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	220f      	movs	r2, #15
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	691a      	ldr	r2, [r3, #16]
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	f003 0307 	and.w	r3, r3, #7
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	08da      	lsrs	r2, r3, #3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3208      	adds	r2, #8
 8001128:	6939      	ldr	r1, [r7, #16]
 800112a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	2203      	movs	r2, #3
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	4013      	ands	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f003 0203 	and.w	r2, r3, #3
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116a:	2b00      	cmp	r3, #0
 800116c:	f000 80ac 	beq.w	80012c8 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001170:	4b5e      	ldr	r3, [pc, #376]	; (80012ec <HAL_GPIO_Init+0x2f8>)
 8001172:	6a1b      	ldr	r3, [r3, #32]
 8001174:	4a5d      	ldr	r2, [pc, #372]	; (80012ec <HAL_GPIO_Init+0x2f8>)
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	6213      	str	r3, [r2, #32]
 800117c:	4b5b      	ldr	r3, [pc, #364]	; (80012ec <HAL_GPIO_Init+0x2f8>)
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001188:	4a59      	ldr	r2, [pc, #356]	; (80012f0 <HAL_GPIO_Init+0x2fc>)
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	089b      	lsrs	r3, r3, #2
 800118e:	3302      	adds	r3, #2
 8001190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001194:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	f003 0303 	and.w	r3, r3, #3
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	220f      	movs	r2, #15
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4013      	ands	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a51      	ldr	r2, [pc, #324]	; (80012f4 <HAL_GPIO_Init+0x300>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d025      	beq.n	8001200 <HAL_GPIO_Init+0x20c>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a50      	ldr	r2, [pc, #320]	; (80012f8 <HAL_GPIO_Init+0x304>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d01f      	beq.n	80011fc <HAL_GPIO_Init+0x208>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a4f      	ldr	r2, [pc, #316]	; (80012fc <HAL_GPIO_Init+0x308>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d019      	beq.n	80011f8 <HAL_GPIO_Init+0x204>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a4e      	ldr	r2, [pc, #312]	; (8001300 <HAL_GPIO_Init+0x30c>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d013      	beq.n	80011f4 <HAL_GPIO_Init+0x200>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a4d      	ldr	r2, [pc, #308]	; (8001304 <HAL_GPIO_Init+0x310>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d00d      	beq.n	80011f0 <HAL_GPIO_Init+0x1fc>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a4c      	ldr	r2, [pc, #304]	; (8001308 <HAL_GPIO_Init+0x314>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d007      	beq.n	80011ec <HAL_GPIO_Init+0x1f8>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a4b      	ldr	r2, [pc, #300]	; (800130c <HAL_GPIO_Init+0x318>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d101      	bne.n	80011e8 <HAL_GPIO_Init+0x1f4>
 80011e4:	2306      	movs	r3, #6
 80011e6:	e00c      	b.n	8001202 <HAL_GPIO_Init+0x20e>
 80011e8:	2307      	movs	r3, #7
 80011ea:	e00a      	b.n	8001202 <HAL_GPIO_Init+0x20e>
 80011ec:	2305      	movs	r3, #5
 80011ee:	e008      	b.n	8001202 <HAL_GPIO_Init+0x20e>
 80011f0:	2304      	movs	r3, #4
 80011f2:	e006      	b.n	8001202 <HAL_GPIO_Init+0x20e>
 80011f4:	2303      	movs	r3, #3
 80011f6:	e004      	b.n	8001202 <HAL_GPIO_Init+0x20e>
 80011f8:	2302      	movs	r3, #2
 80011fa:	e002      	b.n	8001202 <HAL_GPIO_Init+0x20e>
 80011fc:	2301      	movs	r3, #1
 80011fe:	e000      	b.n	8001202 <HAL_GPIO_Init+0x20e>
 8001200:	2300      	movs	r3, #0
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	f002 0203 	and.w	r2, r2, #3
 8001208:	0092      	lsls	r2, r2, #2
 800120a:	4093      	lsls	r3, r2
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	4313      	orrs	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001212:	4937      	ldr	r1, [pc, #220]	; (80012f0 <HAL_GPIO_Init+0x2fc>)
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	089b      	lsrs	r3, r3, #2
 8001218:	3302      	adds	r3, #2
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001220:	4b3b      	ldr	r3, [pc, #236]	; (8001310 <HAL_GPIO_Init+0x31c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	43db      	mvns	r3, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4313      	orrs	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001244:	4a32      	ldr	r2, [pc, #200]	; (8001310 <HAL_GPIO_Init+0x31c>)
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800124a:	4b31      	ldr	r3, [pc, #196]	; (8001310 <HAL_GPIO_Init+0x31c>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	43db      	mvns	r3, r3
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	4013      	ands	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4313      	orrs	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800126e:	4a28      	ldr	r2, [pc, #160]	; (8001310 <HAL_GPIO_Init+0x31c>)
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001274:	4b26      	ldr	r3, [pc, #152]	; (8001310 <HAL_GPIO_Init+0x31c>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	43db      	mvns	r3, r3
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4013      	ands	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	4313      	orrs	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001298:	4a1d      	ldr	r2, [pc, #116]	; (8001310 <HAL_GPIO_Init+0x31c>)
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800129e:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <HAL_GPIO_Init+0x31c>)
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	43db      	mvns	r3, r3
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4313      	orrs	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012c2:	4a13      	ldr	r2, [pc, #76]	; (8001310 <HAL_GPIO_Init+0x31c>)
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	3301      	adds	r3, #1
 80012cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	fa22 f303 	lsr.w	r3, r2, r3
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f47f ae97 	bne.w	800100c <HAL_GPIO_Init+0x18>
  }
}
 80012de:	bf00      	nop
 80012e0:	bf00      	nop
 80012e2:	371c      	adds	r7, #28
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40010000 	.word	0x40010000
 80012f4:	40020000 	.word	0x40020000
 80012f8:	40020400 	.word	0x40020400
 80012fc:	40020800 	.word	0x40020800
 8001300:	40020c00 	.word	0x40020c00
 8001304:	40021000 	.word	0x40021000
 8001308:	40021400 	.word	0x40021400
 800130c:	40021800 	.word	0x40021800
 8001310:	40010400 	.word	0x40010400

08001314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	807b      	strh	r3, [r7, #2]
 8001320:	4613      	mov	r3, r2
 8001322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001324:	787b      	ldrb	r3, [r7, #1]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800132a:	887a      	ldrh	r2, [r7, #2]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001330:	e003      	b.n	800133a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001332:	887b      	ldrh	r3, [r7, #2]
 8001334:	041a      	lsls	r2, r3, #16
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	619a      	str	r2, [r3, #24]
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr

08001344 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	460b      	mov	r3, r1
 800134e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001356:	887a      	ldrh	r2, [r7, #2]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	4013      	ands	r3, r2
 800135c:	041a      	lsls	r2, r3, #16
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	43d9      	mvns	r1, r3
 8001362:	887b      	ldrh	r3, [r7, #2]
 8001364:	400b      	ands	r3, r1
 8001366:	431a      	orrs	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	619a      	str	r2, [r3, #24]
}
 800136c:	bf00      	nop
 800136e:	3714      	adds	r7, #20
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr
	...

08001378 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e31d      	b.n	80019c6 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800138a:	4b94      	ldr	r3, [pc, #592]	; (80015dc <HAL_RCC_OscConfig+0x264>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001394:	4b91      	ldr	r3, [pc, #580]	; (80015dc <HAL_RCC_OscConfig+0x264>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800139c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d07b      	beq.n	80014a2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	2b08      	cmp	r3, #8
 80013ae:	d006      	beq.n	80013be <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	2b0c      	cmp	r3, #12
 80013b4:	d10f      	bne.n	80013d6 <HAL_RCC_OscConfig+0x5e>
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013bc:	d10b      	bne.n	80013d6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013be:	4b87      	ldr	r3, [pc, #540]	; (80015dc <HAL_RCC_OscConfig+0x264>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d06a      	beq.n	80014a0 <HAL_RCC_OscConfig+0x128>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d166      	bne.n	80014a0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e2f7      	b.n	80019c6 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d106      	bne.n	80013ec <HAL_RCC_OscConfig+0x74>
 80013de:	4b7f      	ldr	r3, [pc, #508]	; (80015dc <HAL_RCC_OscConfig+0x264>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a7e      	ldr	r2, [pc, #504]	; (80015dc <HAL_RCC_OscConfig+0x264>)
 80013e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	e02d      	b.n	8001448 <HAL_RCC_OscConfig+0xd0>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d10c      	bne.n	800140e <HAL_RCC_OscConfig+0x96>
 80013f4:	4b79      	ldr	r3, [pc, #484]	; (80015dc <HAL_RCC_OscConfig+0x264>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a78      	ldr	r2, [pc, #480]	; (80015dc <HAL_RCC_OscConfig+0x264>)
 80013fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	4b76      	ldr	r3, [pc, #472]	; (80015dc <HAL_RCC_OscConfig+0x264>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a75      	ldr	r2, [pc, #468]	; (80015dc <HAL_RCC_OscConfig+0x264>)
 8001406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	e01c      	b.n	8001448 <HAL_RCC_OscConfig+0xd0>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b05      	cmp	r3, #5
 8001414:	d10c      	bne.n	8001430 <HAL_RCC_OscConfig+0xb8>
 8001416:	4b71      	ldr	r3, [pc, #452]	; (80015dc <HAL_RCC_OscConfig+0x264>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a70      	ldr	r2, [pc, #448]	; (80015dc <HAL_RCC_OscConfig+0x264>)
 800141c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	4b6e      	ldr	r3, [pc, #440]	; (80015dc <HAL_RCC_OscConfig+0x264>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a6d      	ldr	r2, [pc, #436]	; (80015dc <HAL_RCC_OscConfig+0x264>)
 8001428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	e00b      	b.n	8001448 <HAL_RCC_OscConfig+0xd0>
 8001430:	4b6a      	ldr	r3, [pc, #424]	; (80015dc <HAL_RCC_OscConfig+0x264>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a69      	ldr	r2, [pc, #420]	; (80015dc <HAL_RCC_OscConfig+0x264>)
 8001436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4b67      	ldr	r3, [pc, #412]	; (80015dc <HAL_RCC_OscConfig+0x264>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a66      	ldr	r2, [pc, #408]	; (80015dc <HAL_RCC_OscConfig+0x264>)
 8001442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d013      	beq.n	8001478 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001450:	f7ff fc56 	bl	8000d00 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001458:	f7ff fc52 	bl	8000d00 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b64      	cmp	r3, #100	; 0x64
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e2ad      	b.n	80019c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800146a:	4b5c      	ldr	r3, [pc, #368]	; (80015dc <HAL_RCC_OscConfig+0x264>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f0      	beq.n	8001458 <HAL_RCC_OscConfig+0xe0>
 8001476:	e014      	b.n	80014a2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001478:	f7ff fc42 	bl	8000d00 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001480:	f7ff fc3e 	bl	8000d00 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b64      	cmp	r3, #100	; 0x64
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e299      	b.n	80019c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001492:	4b52      	ldr	r3, [pc, #328]	; (80015dc <HAL_RCC_OscConfig+0x264>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f0      	bne.n	8001480 <HAL_RCC_OscConfig+0x108>
 800149e:	e000      	b.n	80014a2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d05a      	beq.n	8001564 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	2b04      	cmp	r3, #4
 80014b2:	d005      	beq.n	80014c0 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	2b0c      	cmp	r3, #12
 80014b8:	d119      	bne.n	80014ee <HAL_RCC_OscConfig+0x176>
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d116      	bne.n	80014ee <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c0:	4b46      	ldr	r3, [pc, #280]	; (80015dc <HAL_RCC_OscConfig+0x264>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d005      	beq.n	80014d8 <HAL_RCC_OscConfig+0x160>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d001      	beq.n	80014d8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e276      	b.n	80019c6 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d8:	4b40      	ldr	r3, [pc, #256]	; (80015dc <HAL_RCC_OscConfig+0x264>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	021b      	lsls	r3, r3, #8
 80014e6:	493d      	ldr	r1, [pc, #244]	; (80015dc <HAL_RCC_OscConfig+0x264>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ec:	e03a      	b.n	8001564 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d020      	beq.n	8001538 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014f6:	4b3a      	ldr	r3, [pc, #232]	; (80015e0 <HAL_RCC_OscConfig+0x268>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff fc00 	bl	8000d00 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001504:	f7ff fbfc 	bl	8000d00 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e257      	b.n	80019c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001516:	4b31      	ldr	r3, [pc, #196]	; (80015dc <HAL_RCC_OscConfig+0x264>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0f0      	beq.n	8001504 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001522:	4b2e      	ldr	r3, [pc, #184]	; (80015dc <HAL_RCC_OscConfig+0x264>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	021b      	lsls	r3, r3, #8
 8001530:	492a      	ldr	r1, [pc, #168]	; (80015dc <HAL_RCC_OscConfig+0x264>)
 8001532:	4313      	orrs	r3, r2
 8001534:	604b      	str	r3, [r1, #4]
 8001536:	e015      	b.n	8001564 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001538:	4b29      	ldr	r3, [pc, #164]	; (80015e0 <HAL_RCC_OscConfig+0x268>)
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153e:	f7ff fbdf 	bl	8000d00 <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001546:	f7ff fbdb 	bl	8000d00 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e236      	b.n	80019c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001558:	4b20      	ldr	r3, [pc, #128]	; (80015dc <HAL_RCC_OscConfig+0x264>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1f0      	bne.n	8001546 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0310 	and.w	r3, r3, #16
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 80b8 	beq.w	80016e2 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d170      	bne.n	800165a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001578:	4b18      	ldr	r3, [pc, #96]	; (80015dc <HAL_RCC_OscConfig+0x264>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001580:	2b00      	cmp	r3, #0
 8001582:	d005      	beq.n	8001590 <HAL_RCC_OscConfig+0x218>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e21a      	b.n	80019c6 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a1a      	ldr	r2, [r3, #32]
 8001594:	4b11      	ldr	r3, [pc, #68]	; (80015dc <HAL_RCC_OscConfig+0x264>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800159c:	429a      	cmp	r2, r3
 800159e:	d921      	bls.n	80015e4 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a1b      	ldr	r3, [r3, #32]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f000 fc4b 	bl	8001e40 <RCC_SetFlashLatencyFromMSIRange>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e208      	b.n	80019c6 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015b4:	4b09      	ldr	r3, [pc, #36]	; (80015dc <HAL_RCC_OscConfig+0x264>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a1b      	ldr	r3, [r3, #32]
 80015c0:	4906      	ldr	r1, [pc, #24]	; (80015dc <HAL_RCC_OscConfig+0x264>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015c6:	4b05      	ldr	r3, [pc, #20]	; (80015dc <HAL_RCC_OscConfig+0x264>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	061b      	lsls	r3, r3, #24
 80015d4:	4901      	ldr	r1, [pc, #4]	; (80015dc <HAL_RCC_OscConfig+0x264>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	604b      	str	r3, [r1, #4]
 80015da:	e020      	b.n	800161e <HAL_RCC_OscConfig+0x2a6>
 80015dc:	40023800 	.word	0x40023800
 80015e0:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015e4:	4ba4      	ldr	r3, [pc, #656]	; (8001878 <HAL_RCC_OscConfig+0x500>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	49a1      	ldr	r1, [pc, #644]	; (8001878 <HAL_RCC_OscConfig+0x500>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015f6:	4ba0      	ldr	r3, [pc, #640]	; (8001878 <HAL_RCC_OscConfig+0x500>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	061b      	lsls	r3, r3, #24
 8001604:	499c      	ldr	r1, [pc, #624]	; (8001878 <HAL_RCC_OscConfig+0x500>)
 8001606:	4313      	orrs	r3, r2
 8001608:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a1b      	ldr	r3, [r3, #32]
 800160e:	4618      	mov	r0, r3
 8001610:	f000 fc16 	bl	8001e40 <RCC_SetFlashLatencyFromMSIRange>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e1d3      	b.n	80019c6 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	0b5b      	lsrs	r3, r3, #13
 8001624:	3301      	adds	r3, #1
 8001626:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800162e:	4a92      	ldr	r2, [pc, #584]	; (8001878 <HAL_RCC_OscConfig+0x500>)
 8001630:	6892      	ldr	r2, [r2, #8]
 8001632:	0912      	lsrs	r2, r2, #4
 8001634:	f002 020f 	and.w	r2, r2, #15
 8001638:	4990      	ldr	r1, [pc, #576]	; (800187c <HAL_RCC_OscConfig+0x504>)
 800163a:	5c8a      	ldrb	r2, [r1, r2]
 800163c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800163e:	4a90      	ldr	r2, [pc, #576]	; (8001880 <HAL_RCC_OscConfig+0x508>)
 8001640:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001642:	4b90      	ldr	r3, [pc, #576]	; (8001884 <HAL_RCC_OscConfig+0x50c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fb0e 	bl	8000c68 <HAL_InitTick>
 800164c:	4603      	mov	r3, r0
 800164e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d045      	beq.n	80016e2 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001656:	7bfb      	ldrb	r3, [r7, #15]
 8001658:	e1b5      	b.n	80019c6 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d029      	beq.n	80016b6 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001662:	4b89      	ldr	r3, [pc, #548]	; (8001888 <HAL_RCC_OscConfig+0x510>)
 8001664:	2201      	movs	r2, #1
 8001666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001668:	f7ff fb4a 	bl	8000d00 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001670:	f7ff fb46 	bl	8000d00 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e1a1      	b.n	80019c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001682:	4b7d      	ldr	r3, [pc, #500]	; (8001878 <HAL_RCC_OscConfig+0x500>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800168e:	4b7a      	ldr	r3, [pc, #488]	; (8001878 <HAL_RCC_OscConfig+0x500>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	4977      	ldr	r1, [pc, #476]	; (8001878 <HAL_RCC_OscConfig+0x500>)
 800169c:	4313      	orrs	r3, r2
 800169e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016a0:	4b75      	ldr	r3, [pc, #468]	; (8001878 <HAL_RCC_OscConfig+0x500>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69db      	ldr	r3, [r3, #28]
 80016ac:	061b      	lsls	r3, r3, #24
 80016ae:	4972      	ldr	r1, [pc, #456]	; (8001878 <HAL_RCC_OscConfig+0x500>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	604b      	str	r3, [r1, #4]
 80016b4:	e015      	b.n	80016e2 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016b6:	4b74      	ldr	r3, [pc, #464]	; (8001888 <HAL_RCC_OscConfig+0x510>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016bc:	f7ff fb20 	bl	8000d00 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016c4:	f7ff fb1c 	bl	8000d00 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e177      	b.n	80019c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80016d6:	4b68      	ldr	r3, [pc, #416]	; (8001878 <HAL_RCC_OscConfig+0x500>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f0      	bne.n	80016c4 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0308 	and.w	r3, r3, #8
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d030      	beq.n	8001750 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d016      	beq.n	8001724 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016f6:	4b65      	ldr	r3, [pc, #404]	; (800188c <HAL_RCC_OscConfig+0x514>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fc:	f7ff fb00 	bl	8000d00 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001704:	f7ff fafc 	bl	8000d00 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e157      	b.n	80019c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001716:	4b58      	ldr	r3, [pc, #352]	; (8001878 <HAL_RCC_OscConfig+0x500>)
 8001718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0f0      	beq.n	8001704 <HAL_RCC_OscConfig+0x38c>
 8001722:	e015      	b.n	8001750 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001724:	4b59      	ldr	r3, [pc, #356]	; (800188c <HAL_RCC_OscConfig+0x514>)
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800172a:	f7ff fae9 	bl	8000d00 <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001732:	f7ff fae5 	bl	8000d00 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e140      	b.n	80019c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001744:	4b4c      	ldr	r3, [pc, #304]	; (8001878 <HAL_RCC_OscConfig+0x500>)
 8001746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1f0      	bne.n	8001732 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b00      	cmp	r3, #0
 800175a:	f000 80b5 	beq.w	80018c8 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800175e:	2300      	movs	r3, #0
 8001760:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001762:	4b45      	ldr	r3, [pc, #276]	; (8001878 <HAL_RCC_OscConfig+0x500>)
 8001764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d10d      	bne.n	800178a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800176e:	4b42      	ldr	r3, [pc, #264]	; (8001878 <HAL_RCC_OscConfig+0x500>)
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001772:	4a41      	ldr	r2, [pc, #260]	; (8001878 <HAL_RCC_OscConfig+0x500>)
 8001774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001778:	6253      	str	r3, [r2, #36]	; 0x24
 800177a:	4b3f      	ldr	r3, [pc, #252]	; (8001878 <HAL_RCC_OscConfig+0x500>)
 800177c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001786:	2301      	movs	r3, #1
 8001788:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800178a:	4b41      	ldr	r3, [pc, #260]	; (8001890 <HAL_RCC_OscConfig+0x518>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001792:	2b00      	cmp	r3, #0
 8001794:	d118      	bne.n	80017c8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001796:	4b3e      	ldr	r3, [pc, #248]	; (8001890 <HAL_RCC_OscConfig+0x518>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a3d      	ldr	r2, [pc, #244]	; (8001890 <HAL_RCC_OscConfig+0x518>)
 800179c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017a2:	f7ff faad 	bl	8000d00 <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a8:	e008      	b.n	80017bc <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017aa:	f7ff faa9 	bl	8000d00 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b64      	cmp	r3, #100	; 0x64
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e104      	b.n	80019c6 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017bc:	4b34      	ldr	r3, [pc, #208]	; (8001890 <HAL_RCC_OscConfig+0x518>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0f0      	beq.n	80017aa <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d106      	bne.n	80017de <HAL_RCC_OscConfig+0x466>
 80017d0:	4b29      	ldr	r3, [pc, #164]	; (8001878 <HAL_RCC_OscConfig+0x500>)
 80017d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d4:	4a28      	ldr	r2, [pc, #160]	; (8001878 <HAL_RCC_OscConfig+0x500>)
 80017d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017da:	6353      	str	r3, [r2, #52]	; 0x34
 80017dc:	e02d      	b.n	800183a <HAL_RCC_OscConfig+0x4c2>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10c      	bne.n	8001800 <HAL_RCC_OscConfig+0x488>
 80017e6:	4b24      	ldr	r3, [pc, #144]	; (8001878 <HAL_RCC_OscConfig+0x500>)
 80017e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ea:	4a23      	ldr	r2, [pc, #140]	; (8001878 <HAL_RCC_OscConfig+0x500>)
 80017ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017f0:	6353      	str	r3, [r2, #52]	; 0x34
 80017f2:	4b21      	ldr	r3, [pc, #132]	; (8001878 <HAL_RCC_OscConfig+0x500>)
 80017f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f6:	4a20      	ldr	r2, [pc, #128]	; (8001878 <HAL_RCC_OscConfig+0x500>)
 80017f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80017fc:	6353      	str	r3, [r2, #52]	; 0x34
 80017fe:	e01c      	b.n	800183a <HAL_RCC_OscConfig+0x4c2>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	2b05      	cmp	r3, #5
 8001806:	d10c      	bne.n	8001822 <HAL_RCC_OscConfig+0x4aa>
 8001808:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <HAL_RCC_OscConfig+0x500>)
 800180a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800180c:	4a1a      	ldr	r2, [pc, #104]	; (8001878 <HAL_RCC_OscConfig+0x500>)
 800180e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001812:	6353      	str	r3, [r2, #52]	; 0x34
 8001814:	4b18      	ldr	r3, [pc, #96]	; (8001878 <HAL_RCC_OscConfig+0x500>)
 8001816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001818:	4a17      	ldr	r2, [pc, #92]	; (8001878 <HAL_RCC_OscConfig+0x500>)
 800181a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800181e:	6353      	str	r3, [r2, #52]	; 0x34
 8001820:	e00b      	b.n	800183a <HAL_RCC_OscConfig+0x4c2>
 8001822:	4b15      	ldr	r3, [pc, #84]	; (8001878 <HAL_RCC_OscConfig+0x500>)
 8001824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001826:	4a14      	ldr	r2, [pc, #80]	; (8001878 <HAL_RCC_OscConfig+0x500>)
 8001828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800182c:	6353      	str	r3, [r2, #52]	; 0x34
 800182e:	4b12      	ldr	r3, [pc, #72]	; (8001878 <HAL_RCC_OscConfig+0x500>)
 8001830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001832:	4a11      	ldr	r2, [pc, #68]	; (8001878 <HAL_RCC_OscConfig+0x500>)
 8001834:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001838:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d015      	beq.n	800186e <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001842:	f7ff fa5d 	bl	8000d00 <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001848:	e00a      	b.n	8001860 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800184a:	f7ff fa59 	bl	8000d00 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	f241 3288 	movw	r2, #5000	; 0x1388
 8001858:	4293      	cmp	r3, r2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e0b2      	b.n	80019c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001860:	4b05      	ldr	r3, [pc, #20]	; (8001878 <HAL_RCC_OscConfig+0x500>)
 8001862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001864:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0ee      	beq.n	800184a <HAL_RCC_OscConfig+0x4d2>
 800186c:	e023      	b.n	80018b6 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800186e:	f7ff fa47 	bl	8000d00 <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001874:	e019      	b.n	80018aa <HAL_RCC_OscConfig+0x532>
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800
 800187c:	08002c18 	.word	0x08002c18
 8001880:	20000000 	.word	0x20000000
 8001884:	20000004 	.word	0x20000004
 8001888:	42470020 	.word	0x42470020
 800188c:	42470680 	.word	0x42470680
 8001890:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001894:	f7ff fa34 	bl	8000d00 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e08d      	b.n	80019c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018aa:	4b49      	ldr	r3, [pc, #292]	; (80019d0 <HAL_RCC_OscConfig+0x658>)
 80018ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1ee      	bne.n	8001894 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018b6:	7ffb      	ldrb	r3, [r7, #31]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d105      	bne.n	80018c8 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018bc:	4b44      	ldr	r3, [pc, #272]	; (80019d0 <HAL_RCC_OscConfig+0x658>)
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	4a43      	ldr	r2, [pc, #268]	; (80019d0 <HAL_RCC_OscConfig+0x658>)
 80018c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018c6:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d079      	beq.n	80019c4 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	2b0c      	cmp	r3, #12
 80018d4:	d056      	beq.n	8001984 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d13b      	bne.n	8001956 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018de:	4b3d      	ldr	r3, [pc, #244]	; (80019d4 <HAL_RCC_OscConfig+0x65c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e4:	f7ff fa0c 	bl	8000d00 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ec:	f7ff fa08 	bl	8000d00 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e063      	b.n	80019c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018fe:	4b34      	ldr	r3, [pc, #208]	; (80019d0 <HAL_RCC_OscConfig+0x658>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f0      	bne.n	80018ec <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800190a:	4b31      	ldr	r3, [pc, #196]	; (80019d0 <HAL_RCC_OscConfig+0x658>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191a:	4319      	orrs	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001920:	430b      	orrs	r3, r1
 8001922:	492b      	ldr	r1, [pc, #172]	; (80019d0 <HAL_RCC_OscConfig+0x658>)
 8001924:	4313      	orrs	r3, r2
 8001926:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001928:	4b2a      	ldr	r3, [pc, #168]	; (80019d4 <HAL_RCC_OscConfig+0x65c>)
 800192a:	2201      	movs	r2, #1
 800192c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192e:	f7ff f9e7 	bl	8000d00 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001936:	f7ff f9e3 	bl	8000d00 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e03e      	b.n	80019c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001948:	4b21      	ldr	r3, [pc, #132]	; (80019d0 <HAL_RCC_OscConfig+0x658>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0f0      	beq.n	8001936 <HAL_RCC_OscConfig+0x5be>
 8001954:	e036      	b.n	80019c4 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001956:	4b1f      	ldr	r3, [pc, #124]	; (80019d4 <HAL_RCC_OscConfig+0x65c>)
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195c:	f7ff f9d0 	bl	8000d00 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001964:	f7ff f9cc 	bl	8000d00 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e027      	b.n	80019c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001976:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <HAL_RCC_OscConfig+0x658>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f0      	bne.n	8001964 <HAL_RCC_OscConfig+0x5ec>
 8001982:	e01f      	b.n	80019c4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001988:	2b01      	cmp	r3, #1
 800198a:	d101      	bne.n	8001990 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e01a      	b.n	80019c6 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <HAL_RCC_OscConfig+0x658>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d10d      	bne.n	80019c0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d106      	bne.n	80019c0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80019bc:	429a      	cmp	r2, r3
 80019be:	d001      	beq.n	80019c4 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e000      	b.n	80019c6 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3720      	adds	r7, #32
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800
 80019d4:	42470060 	.word	0x42470060

080019d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e11a      	b.n	8001c22 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019ec:	4b8f      	ldr	r3, [pc, #572]	; (8001c2c <HAL_RCC_ClockConfig+0x254>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d919      	bls.n	8001a2e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d105      	bne.n	8001a0c <HAL_RCC_ClockConfig+0x34>
 8001a00:	4b8a      	ldr	r3, [pc, #552]	; (8001c2c <HAL_RCC_ClockConfig+0x254>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a89      	ldr	r2, [pc, #548]	; (8001c2c <HAL_RCC_ClockConfig+0x254>)
 8001a06:	f043 0304 	orr.w	r3, r3, #4
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	4b87      	ldr	r3, [pc, #540]	; (8001c2c <HAL_RCC_ClockConfig+0x254>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f023 0201 	bic.w	r2, r3, #1
 8001a14:	4985      	ldr	r1, [pc, #532]	; (8001c2c <HAL_RCC_ClockConfig+0x254>)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1c:	4b83      	ldr	r3, [pc, #524]	; (8001c2c <HAL_RCC_ClockConfig+0x254>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d001      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e0f9      	b.n	8001c22 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d008      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a3a:	4b7d      	ldr	r3, [pc, #500]	; (8001c30 <HAL_RCC_ClockConfig+0x258>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	497a      	ldr	r1, [pc, #488]	; (8001c30 <HAL_RCC_ClockConfig+0x258>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f000 808e 	beq.w	8001b76 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d107      	bne.n	8001a72 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a62:	4b73      	ldr	r3, [pc, #460]	; (8001c30 <HAL_RCC_ClockConfig+0x258>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d121      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e0d7      	b.n	8001c22 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b03      	cmp	r3, #3
 8001a78:	d107      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a7a:	4b6d      	ldr	r3, [pc, #436]	; (8001c30 <HAL_RCC_ClockConfig+0x258>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d115      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e0cb      	b.n	8001c22 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d107      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a92:	4b67      	ldr	r3, [pc, #412]	; (8001c30 <HAL_RCC_ClockConfig+0x258>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d109      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e0bf      	b.n	8001c22 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001aa2:	4b63      	ldr	r3, [pc, #396]	; (8001c30 <HAL_RCC_ClockConfig+0x258>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e0b7      	b.n	8001c22 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ab2:	4b5f      	ldr	r3, [pc, #380]	; (8001c30 <HAL_RCC_ClockConfig+0x258>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f023 0203 	bic.w	r2, r3, #3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	495c      	ldr	r1, [pc, #368]	; (8001c30 <HAL_RCC_ClockConfig+0x258>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ac4:	f7ff f91c 	bl	8000d00 <HAL_GetTick>
 8001ac8:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d112      	bne.n	8001af8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ad2:	e00a      	b.n	8001aea <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad4:	f7ff f914 	bl	8000d00 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e09b      	b.n	8001c22 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aea:	4b51      	ldr	r3, [pc, #324]	; (8001c30 <HAL_RCC_ClockConfig+0x258>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d1ee      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0xfc>
 8001af6:	e03e      	b.n	8001b76 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b03      	cmp	r3, #3
 8001afe:	d112      	bne.n	8001b26 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b00:	e00a      	b.n	8001b18 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b02:	f7ff f8fd 	bl	8000d00 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e084      	b.n	8001c22 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b18:	4b45      	ldr	r3, [pc, #276]	; (8001c30 <HAL_RCC_ClockConfig+0x258>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 030c 	and.w	r3, r3, #12
 8001b20:	2b0c      	cmp	r3, #12
 8001b22:	d1ee      	bne.n	8001b02 <HAL_RCC_ClockConfig+0x12a>
 8001b24:	e027      	b.n	8001b76 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d11d      	bne.n	8001b6a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b2e:	e00a      	b.n	8001b46 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b30:	f7ff f8e6 	bl	8000d00 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e06d      	b.n	8001c22 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b46:	4b3a      	ldr	r3, [pc, #232]	; (8001c30 <HAL_RCC_ClockConfig+0x258>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 030c 	and.w	r3, r3, #12
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	d1ee      	bne.n	8001b30 <HAL_RCC_ClockConfig+0x158>
 8001b52:	e010      	b.n	8001b76 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b54:	f7ff f8d4 	bl	8000d00 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e05b      	b.n	8001c22 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b6a:	4b31      	ldr	r3, [pc, #196]	; (8001c30 <HAL_RCC_ClockConfig+0x258>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f003 030c 	and.w	r3, r3, #12
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1ee      	bne.n	8001b54 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b76:	4b2d      	ldr	r3, [pc, #180]	; (8001c2c <HAL_RCC_ClockConfig+0x254>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d219      	bcs.n	8001bb8 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d105      	bne.n	8001b96 <HAL_RCC_ClockConfig+0x1be>
 8001b8a:	4b28      	ldr	r3, [pc, #160]	; (8001c2c <HAL_RCC_ClockConfig+0x254>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a27      	ldr	r2, [pc, #156]	; (8001c2c <HAL_RCC_ClockConfig+0x254>)
 8001b90:	f043 0304 	orr.w	r3, r3, #4
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	4b25      	ldr	r3, [pc, #148]	; (8001c2c <HAL_RCC_ClockConfig+0x254>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f023 0201 	bic.w	r2, r3, #1
 8001b9e:	4923      	ldr	r1, [pc, #140]	; (8001c2c <HAL_RCC_ClockConfig+0x254>)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba6:	4b21      	ldr	r3, [pc, #132]	; (8001c2c <HAL_RCC_ClockConfig+0x254>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d001      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e034      	b.n	8001c22 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d008      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bc4:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <HAL_RCC_ClockConfig+0x258>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	4917      	ldr	r1, [pc, #92]	; (8001c30 <HAL_RCC_ClockConfig+0x258>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0308 	and.w	r3, r3, #8
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d009      	beq.n	8001bf6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001be2:	4b13      	ldr	r3, [pc, #76]	; (8001c30 <HAL_RCC_ClockConfig+0x258>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	490f      	ldr	r1, [pc, #60]	; (8001c30 <HAL_RCC_ClockConfig+0x258>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bf6:	f000 f823 	bl	8001c40 <HAL_RCC_GetSysClockFreq>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <HAL_RCC_ClockConfig+0x258>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	091b      	lsrs	r3, r3, #4
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	490b      	ldr	r1, [pc, #44]	; (8001c34 <HAL_RCC_ClockConfig+0x25c>)
 8001c08:	5ccb      	ldrb	r3, [r1, r3]
 8001c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0e:	4a0a      	ldr	r2, [pc, #40]	; (8001c38 <HAL_RCC_ClockConfig+0x260>)
 8001c10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <HAL_RCC_ClockConfig+0x264>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff f826 	bl	8000c68 <HAL_InitTick>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c20:	7afb      	ldrb	r3, [r7, #11]
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40023c00 	.word	0x40023c00
 8001c30:	40023800 	.word	0x40023800
 8001c34:	08002c18 	.word	0x08002c18
 8001c38:	20000000 	.word	0x20000000
 8001c3c:	20000004 	.word	0x20000004

08001c40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c40:	b5b0      	push	{r4, r5, r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001c46:	4b61      	ldr	r3, [pc, #388]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x18c>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f003 030c 	and.w	r3, r3, #12
 8001c52:	2b0c      	cmp	r3, #12
 8001c54:	d00d      	beq.n	8001c72 <HAL_RCC_GetSysClockFreq+0x32>
 8001c56:	2b0c      	cmp	r3, #12
 8001c58:	f200 80a4 	bhi.w	8001da4 <HAL_RCC_GetSysClockFreq+0x164>
 8001c5c:	2b04      	cmp	r3, #4
 8001c5e:	d002      	beq.n	8001c66 <HAL_RCC_GetSysClockFreq+0x26>
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d003      	beq.n	8001c6c <HAL_RCC_GetSysClockFreq+0x2c>
 8001c64:	e09e      	b.n	8001da4 <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c66:	4b5a      	ldr	r3, [pc, #360]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x190>)
 8001c68:	613b      	str	r3, [r7, #16]
      break;
 8001c6a:	e0a9      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c6c:	4b59      	ldr	r3, [pc, #356]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x194>)
 8001c6e:	613b      	str	r3, [r7, #16]
      break;
 8001c70:	e0a6      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	0c9b      	lsrs	r3, r3, #18
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	4a57      	ldr	r2, [pc, #348]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x198>)
 8001c7c:	5cd3      	ldrb	r3, [r2, r3]
 8001c7e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	0d9b      	lsrs	r3, r3, #22
 8001c84:	f003 0303 	and.w	r3, r3, #3
 8001c88:	3301      	adds	r3, #1
 8001c8a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c8c:	4b4f      	ldr	r3, [pc, #316]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x18c>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d041      	beq.n	8001d1c <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	461c      	mov	r4, r3
 8001c9c:	f04f 0500 	mov.w	r5, #0
 8001ca0:	4620      	mov	r0, r4
 8001ca2:	4629      	mov	r1, r5
 8001ca4:	f04f 0200 	mov.w	r2, #0
 8001ca8:	f04f 0300 	mov.w	r3, #0
 8001cac:	014b      	lsls	r3, r1, #5
 8001cae:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001cb2:	0142      	lsls	r2, r0, #5
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	1b00      	subs	r0, r0, r4
 8001cba:	eb61 0105 	sbc.w	r1, r1, r5
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	f04f 0300 	mov.w	r3, #0
 8001cc6:	018b      	lsls	r3, r1, #6
 8001cc8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ccc:	0182      	lsls	r2, r0, #6
 8001cce:	1a12      	subs	r2, r2, r0
 8001cd0:	eb63 0301 	sbc.w	r3, r3, r1
 8001cd4:	f04f 0000 	mov.w	r0, #0
 8001cd8:	f04f 0100 	mov.w	r1, #0
 8001cdc:	00d9      	lsls	r1, r3, #3
 8001cde:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ce2:	00d0      	lsls	r0, r2, #3
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	1912      	adds	r2, r2, r4
 8001cea:	eb45 0303 	adc.w	r3, r5, r3
 8001cee:	f04f 0000 	mov.w	r0, #0
 8001cf2:	f04f 0100 	mov.w	r1, #0
 8001cf6:	0259      	lsls	r1, r3, #9
 8001cf8:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001cfc:	0250      	lsls	r0, r2, #9
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	f04f 0300 	mov.w	r3, #0
 8001d0e:	f7fe fa3d 	bl	800018c <__aeabi_uldivmod>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	4613      	mov	r3, r2
 8001d18:	617b      	str	r3, [r7, #20]
 8001d1a:	e040      	b.n	8001d9e <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	461c      	mov	r4, r3
 8001d20:	f04f 0500 	mov.w	r5, #0
 8001d24:	4620      	mov	r0, r4
 8001d26:	4629      	mov	r1, r5
 8001d28:	f04f 0200 	mov.w	r2, #0
 8001d2c:	f04f 0300 	mov.w	r3, #0
 8001d30:	014b      	lsls	r3, r1, #5
 8001d32:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d36:	0142      	lsls	r2, r0, #5
 8001d38:	4610      	mov	r0, r2
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	1b00      	subs	r0, r0, r4
 8001d3e:	eb61 0105 	sbc.w	r1, r1, r5
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	f04f 0300 	mov.w	r3, #0
 8001d4a:	018b      	lsls	r3, r1, #6
 8001d4c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d50:	0182      	lsls	r2, r0, #6
 8001d52:	1a12      	subs	r2, r2, r0
 8001d54:	eb63 0301 	sbc.w	r3, r3, r1
 8001d58:	f04f 0000 	mov.w	r0, #0
 8001d5c:	f04f 0100 	mov.w	r1, #0
 8001d60:	00d9      	lsls	r1, r3, #3
 8001d62:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d66:	00d0      	lsls	r0, r2, #3
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	1912      	adds	r2, r2, r4
 8001d6e:	eb45 0303 	adc.w	r3, r5, r3
 8001d72:	f04f 0000 	mov.w	r0, #0
 8001d76:	f04f 0100 	mov.w	r1, #0
 8001d7a:	0299      	lsls	r1, r3, #10
 8001d7c:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001d80:	0290      	lsls	r0, r2, #10
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4610      	mov	r0, r2
 8001d88:	4619      	mov	r1, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	f04f 0300 	mov.w	r3, #0
 8001d92:	f7fe f9fb 	bl	800018c <__aeabi_uldivmod>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	613b      	str	r3, [r7, #16]
      break;
 8001da2:	e00d      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001da4:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x18c>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	0b5b      	lsrs	r3, r3, #13
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	3301      	adds	r3, #1
 8001db4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	613b      	str	r3, [r7, #16]
      break;
 8001dbe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dc0:	693b      	ldr	r3, [r7, #16]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bdb0      	pop	{r4, r5, r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	00f42400 	.word	0x00f42400
 8001dd4:	007a1200 	.word	0x007a1200
 8001dd8:	08002c0c 	.word	0x08002c0c

08001ddc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001de0:	4b02      	ldr	r3, [pc, #8]	; (8001dec <HAL_RCC_GetHCLKFreq+0x10>)
 8001de2:	681b      	ldr	r3, [r3, #0]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr
 8001dec:	20000000 	.word	0x20000000

08001df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001df4:	f7ff fff2 	bl	8001ddc <HAL_RCC_GetHCLKFreq>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	0a1b      	lsrs	r3, r3, #8
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	4903      	ldr	r1, [pc, #12]	; (8001e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e06:	5ccb      	ldrb	r3, [r1, r3]
 8001e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40023800 	.word	0x40023800
 8001e14:	08002c28 	.word	0x08002c28

08001e18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e1c:	f7ff ffde 	bl	8001ddc <HAL_RCC_GetHCLKFreq>
 8001e20:	4602      	mov	r2, r0
 8001e22:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	0adb      	lsrs	r3, r3, #11
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	4903      	ldr	r1, [pc, #12]	; (8001e3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e2e:	5ccb      	ldrb	r3, [r1, r3]
 8001e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	08002c28 	.word	0x08002c28

08001e40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b087      	sub	sp, #28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e48:	2300      	movs	r3, #0
 8001e4a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001e4c:	4b29      	ldr	r3, [pc, #164]	; (8001ef4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d12c      	bne.n	8001eb2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e58:	4b26      	ldr	r3, [pc, #152]	; (8001ef4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d005      	beq.n	8001e70 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001e64:	4b24      	ldr	r3, [pc, #144]	; (8001ef8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	e016      	b.n	8001e9e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e70:	4b20      	ldr	r3, [pc, #128]	; (8001ef4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e74:	4a1f      	ldr	r2, [pc, #124]	; (8001ef4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e7a:	6253      	str	r3, [r2, #36]	; 0x24
 8001e7c:	4b1d      	ldr	r3, [pc, #116]	; (8001ef4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001e88:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001e90:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e92:	4b18      	ldr	r3, [pc, #96]	; (8001ef4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e96:	4a17      	ldr	r2, [pc, #92]	; (8001ef4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001e98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001ea4:	d105      	bne.n	8001eb2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001eac:	d101      	bne.n	8001eb2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001eae:	2301      	movs	r3, #1
 8001eb0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d105      	bne.n	8001ec4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001eb8:	4b10      	ldr	r3, [pc, #64]	; (8001efc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a0f      	ldr	r2, [pc, #60]	; (8001efc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ebe:	f043 0304 	orr.w	r3, r3, #4
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	4b0d      	ldr	r3, [pc, #52]	; (8001efc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f023 0201 	bic.w	r2, r3, #1
 8001ecc:	490b      	ldr	r1, [pc, #44]	; (8001efc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ed4:	4b09      	ldr	r3, [pc, #36]	; (8001efc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d001      	beq.n	8001ee6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	371c      	adds	r7, #28
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc80      	pop	{r7}
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40007000 	.word	0x40007000
 8001efc:	40023c00 	.word	0x40023c00

08001f00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e03f      	b.n	8001f92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d106      	bne.n	8001f2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7fe fcfe 	bl	8000928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2224      	movs	r2, #36	; 0x24
 8001f30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 fc83 	bl	8002850 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	691a      	ldr	r2, [r3, #16]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	695a      	ldr	r2, [r3, #20]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68da      	ldr	r2, [r3, #12]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2220      	movs	r2, #32
 8001f84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b088      	sub	sp, #32
 8001f9e:	af02      	add	r7, sp, #8
 8001fa0:	60f8      	str	r0, [r7, #12]
 8001fa2:	60b9      	str	r1, [r7, #8]
 8001fa4:	603b      	str	r3, [r7, #0]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b20      	cmp	r3, #32
 8001fb8:	f040 8083 	bne.w	80020c2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d002      	beq.n	8001fc8 <HAL_UART_Transmit+0x2e>
 8001fc2:	88fb      	ldrh	r3, [r7, #6]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e07b      	b.n	80020c4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d101      	bne.n	8001fda <HAL_UART_Transmit+0x40>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e074      	b.n	80020c4 <HAL_UART_Transmit+0x12a>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2221      	movs	r2, #33	; 0x21
 8001fec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001ff0:	f7fe fe86 	bl	8000d00 <HAL_GetTick>
 8001ff4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	88fa      	ldrh	r2, [r7, #6]
 8001ffa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	88fa      	ldrh	r2, [r7, #6]
 8002000:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800200a:	e042      	b.n	8002092 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002010:	b29b      	uxth	r3, r3
 8002012:	3b01      	subs	r3, #1
 8002014:	b29a      	uxth	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002022:	d122      	bne.n	800206a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	2200      	movs	r2, #0
 800202c:	2180      	movs	r1, #128	; 0x80
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 faa5 	bl	800257e <UART_WaitOnFlagUntilTimeout>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e042      	b.n	80020c4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	461a      	mov	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002050:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d103      	bne.n	8002062 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	3302      	adds	r3, #2
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	e017      	b.n	8002092 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	3301      	adds	r3, #1
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	e013      	b.n	8002092 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	2200      	movs	r2, #0
 8002072:	2180      	movs	r1, #128	; 0x80
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f000 fa82 	bl	800257e <UART_WaitOnFlagUntilTimeout>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e01f      	b.n	80020c4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	1c5a      	adds	r2, r3, #1
 8002088:	60ba      	str	r2, [r7, #8]
 800208a:	781a      	ldrb	r2, [r3, #0]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002096:	b29b      	uxth	r3, r3
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1b7      	bne.n	800200c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	2200      	movs	r2, #0
 80020a4:	2140      	movs	r1, #64	; 0x40
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 fa69 	bl	800257e <UART_WaitOnFlagUntilTimeout>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e006      	b.n	80020c4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2220      	movs	r2, #32
 80020ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80020be:	2300      	movs	r3, #0
 80020c0:	e000      	b.n	80020c4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80020c2:	2302      	movs	r3, #2
  }
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af02      	add	r7, sp, #8
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	603b      	str	r3, [r7, #0]
 80020d8:	4613      	mov	r3, r2
 80020da:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b20      	cmp	r3, #32
 80020ea:	f040 8090 	bne.w	800220e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d002      	beq.n	80020fa <HAL_UART_Receive+0x2e>
 80020f4:	88fb      	ldrh	r3, [r7, #6]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e088      	b.n	8002210 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002104:	2b01      	cmp	r3, #1
 8002106:	d101      	bne.n	800210c <HAL_UART_Receive+0x40>
 8002108:	2302      	movs	r3, #2
 800210a:	e081      	b.n	8002210 <HAL_UART_Receive+0x144>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2222      	movs	r2, #34	; 0x22
 800211e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002122:	f7fe fded 	bl	8000d00 <HAL_GetTick>
 8002126:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	88fa      	ldrh	r2, [r7, #6]
 800212c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	88fa      	ldrh	r2, [r7, #6]
 8002132:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800213c:	e05c      	b.n	80021f8 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002142:	b29b      	uxth	r3, r3
 8002144:	3b01      	subs	r3, #1
 8002146:	b29a      	uxth	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002154:	d12b      	bne.n	80021ae <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	2200      	movs	r2, #0
 800215e:	2120      	movs	r1, #32
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f000 fa0c 	bl	800257e <UART_WaitOnFlagUntilTimeout>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e04f      	b.n	8002210 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10c      	bne.n	8002196 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	b29b      	uxth	r3, r3
 8002184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002188:	b29a      	uxth	r2, r3
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	3302      	adds	r3, #2
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	e030      	b.n	80021f8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	b29b      	uxth	r3, r3
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	3301      	adds	r3, #1
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	e024      	b.n	80021f8 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2200      	movs	r2, #0
 80021b6:	2120      	movs	r1, #32
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 f9e0 	bl	800257e <UART_WaitOnFlagUntilTimeout>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e023      	b.n	8002210 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d108      	bne.n	80021e2 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6859      	ldr	r1, [r3, #4]
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	60ba      	str	r2, [r7, #8]
 80021dc:	b2ca      	uxtb	r2, r1
 80021de:	701a      	strb	r2, [r3, #0]
 80021e0:	e00a      	b.n	80021f8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	1c59      	adds	r1, r3, #1
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d19d      	bne.n	800213e <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2220      	movs	r2, #32
 8002206:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800220a:	2300      	movs	r3, #0
 800220c:	e000      	b.n	8002210 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800220e:	2302      	movs	r3, #2
  }
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	4613      	mov	r3, r2
 8002224:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b20      	cmp	r3, #32
 8002230:	d130      	bne.n	8002294 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d002      	beq.n	800223e <HAL_UART_Transmit_IT+0x26>
 8002238:	88fb      	ldrh	r3, [r7, #6]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e029      	b.n	8002296 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002248:	2b01      	cmp	r3, #1
 800224a:	d101      	bne.n	8002250 <HAL_UART_Transmit_IT+0x38>
 800224c:	2302      	movs	r3, #2
 800224e:	e022      	b.n	8002296 <HAL_UART_Transmit_IT+0x7e>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	88fa      	ldrh	r2, [r7, #6]
 8002262:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	88fa      	ldrh	r2, [r7, #6]
 8002268:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2221      	movs	r2, #33	; 0x21
 8002274:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68da      	ldr	r2, [r3, #12]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800228e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	e000      	b.n	8002296 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002294:	2302      	movs	r3, #2
  }
}
 8002296:	4618      	mov	r0, r3
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr

080022a0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	4613      	mov	r3, r2
 80022ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b20      	cmp	r3, #32
 80022b8:	d140      	bne.n	800233c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d002      	beq.n	80022c6 <HAL_UART_Receive_IT+0x26>
 80022c0:	88fb      	ldrh	r3, [r7, #6]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e039      	b.n	800233e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d101      	bne.n	80022d8 <HAL_UART_Receive_IT+0x38>
 80022d4:	2302      	movs	r3, #2
 80022d6:	e032      	b.n	800233e <HAL_UART_Receive_IT+0x9e>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	88fa      	ldrh	r2, [r7, #6]
 80022ea:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	88fa      	ldrh	r2, [r7, #6]
 80022f0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2222      	movs	r2, #34	; 0x22
 80022fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002316:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	695a      	ldr	r2, [r3, #20]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f042 0201 	orr.w	r2, r2, #1
 8002326:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0220 	orr.w	r2, r2, #32
 8002336:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002338:	2300      	movs	r3, #0
 800233a:	e000      	b.n	800233e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800233c:	2302      	movs	r3, #2
  }
}
 800233e:	4618      	mov	r0, r3
 8002340:	3714      	adds	r7, #20
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr

08002348 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b088      	sub	sp, #32
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002368:	2300      	movs	r3, #0
 800236a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800236c:	2300      	movs	r3, #0
 800236e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10d      	bne.n	800239a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	f003 0320 	and.w	r3, r3, #32
 8002384:	2b00      	cmp	r3, #0
 8002386:	d008      	beq.n	800239a <HAL_UART_IRQHandler+0x52>
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	f003 0320 	and.w	r3, r3, #32
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f9db 	bl	800274e <UART_Receive_IT>
      return;
 8002398:	e0d0      	b.n	800253c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 80b0 	beq.w	8002502 <HAL_UART_IRQHandler+0x1ba>
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d105      	bne.n	80023b8 <HAL_UART_IRQHandler+0x70>
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 80a5 	beq.w	8002502 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00a      	beq.n	80023d8 <HAL_UART_IRQHandler+0x90>
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d0:	f043 0201 	orr.w	r2, r3, #1
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f003 0304 	and.w	r3, r3, #4
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00a      	beq.n	80023f8 <HAL_UART_IRQHandler+0xb0>
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d005      	beq.n	80023f8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f0:	f043 0202 	orr.w	r2, r3, #2
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00a      	beq.n	8002418 <HAL_UART_IRQHandler+0xd0>
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b00      	cmp	r3, #0
 800240a:	d005      	beq.n	8002418 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002410:	f043 0204 	orr.w	r2, r3, #4
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00f      	beq.n	8002442 <HAL_UART_IRQHandler+0xfa>
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	f003 0320 	and.w	r3, r3, #32
 8002428:	2b00      	cmp	r3, #0
 800242a:	d104      	bne.n	8002436 <HAL_UART_IRQHandler+0xee>
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d005      	beq.n	8002442 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243a:	f043 0208 	orr.w	r2, r3, #8
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002446:	2b00      	cmp	r3, #0
 8002448:	d077      	beq.n	800253a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	f003 0320 	and.w	r3, r3, #32
 8002450:	2b00      	cmp	r3, #0
 8002452:	d007      	beq.n	8002464 <HAL_UART_IRQHandler+0x11c>
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	f003 0320 	and.w	r3, r3, #32
 800245a:	2b00      	cmp	r3, #0
 800245c:	d002      	beq.n	8002464 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f975 	bl	800274e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246e:	2b40      	cmp	r3, #64	; 0x40
 8002470:	bf0c      	ite	eq
 8002472:	2301      	moveq	r3, #1
 8002474:	2300      	movne	r3, #0
 8002476:	b2db      	uxtb	r3, r3
 8002478:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b00      	cmp	r3, #0
 8002484:	d102      	bne.n	800248c <HAL_UART_IRQHandler+0x144>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d031      	beq.n	80024f0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f8c0 	bl	8002612 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249c:	2b40      	cmp	r3, #64	; 0x40
 800249e:	d123      	bne.n	80024e8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	695a      	ldr	r2, [r3, #20]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024ae:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d013      	beq.n	80024e0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024bc:	4a21      	ldr	r2, [pc, #132]	; (8002544 <HAL_UART_IRQHandler+0x1fc>)
 80024be:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7fe fd54 	bl	8000f72 <HAL_DMA_Abort_IT>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d016      	beq.n	80024fe <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024da:	4610      	mov	r0, r2
 80024dc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024de:	e00e      	b.n	80024fe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 f843 	bl	800256c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024e6:	e00a      	b.n	80024fe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 f83f 	bl	800256c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024ee:	e006      	b.n	80024fe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 f83b 	bl	800256c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80024fc:	e01d      	b.n	800253a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024fe:	bf00      	nop
    return;
 8002500:	e01b      	b.n	800253a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002508:	2b00      	cmp	r3, #0
 800250a:	d008      	beq.n	800251e <HAL_UART_IRQHandler+0x1d6>
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f8ac 	bl	8002674 <UART_Transmit_IT>
    return;
 800251c:	e00e      	b.n	800253c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002524:	2b00      	cmp	r3, #0
 8002526:	d009      	beq.n	800253c <HAL_UART_IRQHandler+0x1f4>
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252e:	2b00      	cmp	r3, #0
 8002530:	d004      	beq.n	800253c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f8f3 	bl	800271e <UART_EndTransmit_IT>
    return;
 8002538:	e000      	b.n	800253c <HAL_UART_IRQHandler+0x1f4>
    return;
 800253a:	bf00      	nop
  }
}
 800253c:	3720      	adds	r7, #32
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	0800264d 	.word	0x0800264d

08002548 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr

0800255a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr

0800256c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr

0800257e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b084      	sub	sp, #16
 8002582:	af00      	add	r7, sp, #0
 8002584:	60f8      	str	r0, [r7, #12]
 8002586:	60b9      	str	r1, [r7, #8]
 8002588:	603b      	str	r3, [r7, #0]
 800258a:	4613      	mov	r3, r2
 800258c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800258e:	e02c      	b.n	80025ea <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002596:	d028      	beq.n	80025ea <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d007      	beq.n	80025ae <UART_WaitOnFlagUntilTimeout+0x30>
 800259e:	f7fe fbaf 	bl	8000d00 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d21d      	bcs.n	80025ea <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68da      	ldr	r2, [r3, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80025bc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	695a      	ldr	r2, [r3, #20]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 0201 	bic.w	r2, r2, #1
 80025cc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2220      	movs	r2, #32
 80025d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2220      	movs	r2, #32
 80025da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e00f      	b.n	800260a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	4013      	ands	r3, r2
 80025f4:	68ba      	ldr	r2, [r7, #8]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	bf0c      	ite	eq
 80025fa:	2301      	moveq	r3, #1
 80025fc:	2300      	movne	r3, #0
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	461a      	mov	r2, r3
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	429a      	cmp	r2, r3
 8002606:	d0c3      	beq.n	8002590 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68da      	ldr	r2, [r3, #12]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002628:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	695a      	ldr	r2, [r3, #20]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0201 	bic.w	r2, r2, #1
 8002638:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2220      	movs	r2, #32
 800263e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr

0800264c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f7ff ff80 	bl	800256c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800266c:	bf00      	nop
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b21      	cmp	r3, #33	; 0x21
 8002686:	d144      	bne.n	8002712 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002690:	d11a      	bne.n	80026c8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	461a      	mov	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026a6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d105      	bne.n	80026bc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	1c9a      	adds	r2, r3, #2
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	621a      	str	r2, [r3, #32]
 80026ba:	e00e      	b.n	80026da <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	1c5a      	adds	r2, r3, #1
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	621a      	str	r2, [r3, #32]
 80026c6:	e008      	b.n	80026da <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	1c59      	adds	r1, r3, #1
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6211      	str	r1, [r2, #32]
 80026d2:	781a      	ldrb	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026de:	b29b      	uxth	r3, r3
 80026e0:	3b01      	subs	r3, #1
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	4619      	mov	r1, r3
 80026e8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10f      	bne.n	800270e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68da      	ldr	r2, [r3, #12]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800270c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800270e:	2300      	movs	r3, #0
 8002710:	e000      	b.n	8002714 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002712:	2302      	movs	r3, #2
  }
}
 8002714:	4618      	mov	r0, r3
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	bc80      	pop	{r7}
 800271c:	4770      	bx	lr

0800271e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002734:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2220      	movs	r2, #32
 800273a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7ff ff02 	bl	8002548 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b084      	sub	sp, #16
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b22      	cmp	r3, #34	; 0x22
 8002760:	d171      	bne.n	8002846 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800276a:	d123      	bne.n	80027b4 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002770:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10e      	bne.n	8002798 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	b29b      	uxth	r3, r3
 8002782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002790:	1c9a      	adds	r2, r3, #2
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	629a      	str	r2, [r3, #40]	; 0x28
 8002796:	e029      	b.n	80027ec <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ac:	1c5a      	adds	r2, r3, #1
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	629a      	str	r2, [r3, #40]	; 0x28
 80027b2:	e01b      	b.n	80027ec <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10a      	bne.n	80027d2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6858      	ldr	r0, [r3, #4]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c6:	1c59      	adds	r1, r3, #1
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6291      	str	r1, [r2, #40]	; 0x28
 80027cc:	b2c2      	uxtb	r2, r0
 80027ce:	701a      	strb	r2, [r3, #0]
 80027d0:	e00c      	b.n	80027ec <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027de:	1c58      	adds	r0, r3, #1
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	6288      	str	r0, [r1, #40]	; 0x28
 80027e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	3b01      	subs	r3, #1
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	4619      	mov	r1, r3
 80027fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d120      	bne.n	8002842 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0220 	bic.w	r2, r2, #32
 800280e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800281e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	695a      	ldr	r2, [r3, #20]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 0201 	bic.w	r2, r2, #1
 800282e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2220      	movs	r2, #32
 8002834:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff fe8e 	bl	800255a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800283e:	2300      	movs	r3, #0
 8002840:	e002      	b.n	8002848 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002842:	2300      	movs	r3, #0
 8002844:	e000      	b.n	8002848 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002846:	2302      	movs	r3, #2
  }
}
 8002848:	4618      	mov	r0, r3
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	430a      	orrs	r2, r1
 800286c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689a      	ldr	r2, [r3, #8]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	431a      	orrs	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	4313      	orrs	r3, r2
 8002884:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002890:	f023 030c 	bic.w	r3, r3, #12
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6812      	ldr	r2, [r2, #0]
 8002898:	68b9      	ldr	r1, [r7, #8]
 800289a:	430b      	orrs	r3, r1
 800289c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	699a      	ldr	r2, [r3, #24]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a55      	ldr	r2, [pc, #340]	; (8002a10 <UART_SetConfig+0x1c0>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d103      	bne.n	80028c6 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80028be:	f7ff faab 	bl	8001e18 <HAL_RCC_GetPCLK2Freq>
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	e002      	b.n	80028cc <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80028c6:	f7ff fa93 	bl	8001df0 <HAL_RCC_GetPCLK1Freq>
 80028ca:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028d4:	d14c      	bne.n	8002970 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	009a      	lsls	r2, r3, #2
 80028e0:	441a      	add	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ec:	4a49      	ldr	r2, [pc, #292]	; (8002a14 <UART_SetConfig+0x1c4>)
 80028ee:	fba2 2303 	umull	r2, r3, r2, r3
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	0119      	lsls	r1, r3, #4
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	4613      	mov	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	009a      	lsls	r2, r3, #2
 8002900:	441a      	add	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	fbb2 f2f3 	udiv	r2, r2, r3
 800290c:	4b41      	ldr	r3, [pc, #260]	; (8002a14 <UART_SetConfig+0x1c4>)
 800290e:	fba3 0302 	umull	r0, r3, r3, r2
 8002912:	095b      	lsrs	r3, r3, #5
 8002914:	2064      	movs	r0, #100	; 0x64
 8002916:	fb00 f303 	mul.w	r3, r0, r3
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	3332      	adds	r3, #50	; 0x32
 8002920:	4a3c      	ldr	r2, [pc, #240]	; (8002a14 <UART_SetConfig+0x1c4>)
 8002922:	fba2 2303 	umull	r2, r3, r2, r3
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800292e:	4419      	add	r1, r3
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	009a      	lsls	r2, r3, #2
 800293a:	441a      	add	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	fbb2 f2f3 	udiv	r2, r2, r3
 8002946:	4b33      	ldr	r3, [pc, #204]	; (8002a14 <UART_SetConfig+0x1c4>)
 8002948:	fba3 0302 	umull	r0, r3, r3, r2
 800294c:	095b      	lsrs	r3, r3, #5
 800294e:	2064      	movs	r0, #100	; 0x64
 8002950:	fb00 f303 	mul.w	r3, r0, r3
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	3332      	adds	r3, #50	; 0x32
 800295a:	4a2e      	ldr	r2, [pc, #184]	; (8002a14 <UART_SetConfig+0x1c4>)
 800295c:	fba2 2303 	umull	r2, r3, r2, r3
 8002960:	095b      	lsrs	r3, r3, #5
 8002962:	f003 0207 	and.w	r2, r3, #7
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	440a      	add	r2, r1
 800296c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800296e:	e04a      	b.n	8002a06 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	4613      	mov	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	009a      	lsls	r2, r3, #2
 800297a:	441a      	add	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	fbb2 f3f3 	udiv	r3, r2, r3
 8002986:	4a23      	ldr	r2, [pc, #140]	; (8002a14 <UART_SetConfig+0x1c4>)
 8002988:	fba2 2303 	umull	r2, r3, r2, r3
 800298c:	095b      	lsrs	r3, r3, #5
 800298e:	0119      	lsls	r1, r3, #4
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	009a      	lsls	r2, r3, #2
 800299a:	441a      	add	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80029a6:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <UART_SetConfig+0x1c4>)
 80029a8:	fba3 0302 	umull	r0, r3, r3, r2
 80029ac:	095b      	lsrs	r3, r3, #5
 80029ae:	2064      	movs	r0, #100	; 0x64
 80029b0:	fb00 f303 	mul.w	r3, r0, r3
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	3332      	adds	r3, #50	; 0x32
 80029ba:	4a16      	ldr	r2, [pc, #88]	; (8002a14 <UART_SetConfig+0x1c4>)
 80029bc:	fba2 2303 	umull	r2, r3, r2, r3
 80029c0:	095b      	lsrs	r3, r3, #5
 80029c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029c6:	4419      	add	r1, r3
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	4613      	mov	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	009a      	lsls	r2, r3, #2
 80029d2:	441a      	add	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	fbb2 f2f3 	udiv	r2, r2, r3
 80029de:	4b0d      	ldr	r3, [pc, #52]	; (8002a14 <UART_SetConfig+0x1c4>)
 80029e0:	fba3 0302 	umull	r0, r3, r3, r2
 80029e4:	095b      	lsrs	r3, r3, #5
 80029e6:	2064      	movs	r0, #100	; 0x64
 80029e8:	fb00 f303 	mul.w	r3, r0, r3
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	3332      	adds	r3, #50	; 0x32
 80029f2:	4a08      	ldr	r2, [pc, #32]	; (8002a14 <UART_SetConfig+0x1c4>)
 80029f4:	fba2 2303 	umull	r2, r3, r2, r3
 80029f8:	095b      	lsrs	r3, r3, #5
 80029fa:	f003 020f 	and.w	r2, r3, #15
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	440a      	add	r2, r1
 8002a04:	609a      	str	r2, [r3, #8]
}
 8002a06:	bf00      	nop
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40013800 	.word	0x40013800
 8002a14:	51eb851f 	.word	0x51eb851f

08002a18 <__libc_init_array>:
 8002a18:	b570      	push	{r4, r5, r6, lr}
 8002a1a:	2600      	movs	r6, #0
 8002a1c:	4d0c      	ldr	r5, [pc, #48]	; (8002a50 <__libc_init_array+0x38>)
 8002a1e:	4c0d      	ldr	r4, [pc, #52]	; (8002a54 <__libc_init_array+0x3c>)
 8002a20:	1b64      	subs	r4, r4, r5
 8002a22:	10a4      	asrs	r4, r4, #2
 8002a24:	42a6      	cmp	r6, r4
 8002a26:	d109      	bne.n	8002a3c <__libc_init_array+0x24>
 8002a28:	f000 f83a 	bl	8002aa0 <_init>
 8002a2c:	2600      	movs	r6, #0
 8002a2e:	4d0a      	ldr	r5, [pc, #40]	; (8002a58 <__libc_init_array+0x40>)
 8002a30:	4c0a      	ldr	r4, [pc, #40]	; (8002a5c <__libc_init_array+0x44>)
 8002a32:	1b64      	subs	r4, r4, r5
 8002a34:	10a4      	asrs	r4, r4, #2
 8002a36:	42a6      	cmp	r6, r4
 8002a38:	d105      	bne.n	8002a46 <__libc_init_array+0x2e>
 8002a3a:	bd70      	pop	{r4, r5, r6, pc}
 8002a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a40:	4798      	blx	r3
 8002a42:	3601      	adds	r6, #1
 8002a44:	e7ee      	b.n	8002a24 <__libc_init_array+0xc>
 8002a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a4a:	4798      	blx	r3
 8002a4c:	3601      	adds	r6, #1
 8002a4e:	e7f2      	b.n	8002a36 <__libc_init_array+0x1e>
 8002a50:	08002c38 	.word	0x08002c38
 8002a54:	08002c38 	.word	0x08002c38
 8002a58:	08002c38 	.word	0x08002c38
 8002a5c:	08002c3c 	.word	0x08002c3c

08002a60 <memset>:
 8002a60:	4603      	mov	r3, r0
 8002a62:	4402      	add	r2, r0
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d100      	bne.n	8002a6a <memset+0xa>
 8002a68:	4770      	bx	lr
 8002a6a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a6e:	e7f9      	b.n	8002a64 <memset+0x4>

08002a70 <strstr>:
 8002a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a72:	780c      	ldrb	r4, [r1, #0]
 8002a74:	b164      	cbz	r4, 8002a90 <strstr+0x20>
 8002a76:	4603      	mov	r3, r0
 8002a78:	781a      	ldrb	r2, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	1c5e      	adds	r6, r3, #1
 8002a7e:	b90a      	cbnz	r2, 8002a84 <strstr+0x14>
 8002a80:	4610      	mov	r0, r2
 8002a82:	e005      	b.n	8002a90 <strstr+0x20>
 8002a84:	4294      	cmp	r4, r2
 8002a86:	d108      	bne.n	8002a9a <strstr+0x2a>
 8002a88:	460d      	mov	r5, r1
 8002a8a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8002a8e:	b902      	cbnz	r2, 8002a92 <strstr+0x22>
 8002a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a92:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8002a96:	4297      	cmp	r7, r2
 8002a98:	d0f7      	beq.n	8002a8a <strstr+0x1a>
 8002a9a:	4633      	mov	r3, r6
 8002a9c:	e7ec      	b.n	8002a78 <strstr+0x8>
	...

08002aa0 <_init>:
 8002aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aa2:	bf00      	nop
 8002aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aa6:	bc08      	pop	{r3}
 8002aa8:	469e      	mov	lr, r3
 8002aaa:	4770      	bx	lr

08002aac <_fini>:
 8002aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aae:	bf00      	nop
 8002ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ab2:	bc08      	pop	{r3}
 8002ab4:	469e      	mov	lr, r3
 8002ab6:	4770      	bx	lr
